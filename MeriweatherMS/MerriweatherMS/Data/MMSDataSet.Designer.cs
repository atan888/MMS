//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace System.Windows.Forms.MMS.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MMSDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MMSDataSet : global::System.Data.DataSet {
        
        private CustomerDataTable tableCustomer;
        
        private PropertyDataTable tableProperty;
        
        private EmployeeDataTable tableEmployee;
        
        private CustomerJobDataTable tableCustomerJob;
        
        private ServiceDataTable tableService;
        
        private RouteDataTable tableRoute;
        
        private CustPropertyDataTable tableCustProperty;
        
        private CrewDataTable tableCrew;
        
        private VendorDataTable tableVendor;
        
        private PropServiceDataTable tablePropService;
        
        private CustPropertyJobsDataTable tableCustPropertyJobs;
        
        private CrewNameDataTable tableCrewName;
        
        private RouteListDataTable tableRouteList;
        
        private CustomerTypeListDataTable tableCustomerTypeList;
        
        private JobStatusListDataTable tableJobStatusList;
        
        private RouteViewDataTable tableRouteView;
        
        private LetterDataTableDataTable tableLetterDataTable;
        
        private CustomerNewletterDataTable tableCustomerNewletter;
        
        private UserProfileDataTable tableUserProfile;
        
        private CustomerNewLettersDataTable tableCustomerNewLetters;
        
        private BonusDataTable tableBonus;
        
        private EmployeeBonusDataTable tableEmployeeBonus;
        
        private global::System.Data.DataRelation relationFK_Property_Customer;
        
        private global::System.Data.DataRelation relationFK_Crew_Employee;
        
        private global::System.Data.DataRelation relationFK_Service_Property;
        
        private global::System.Data.DataRelation relationFK_CustomerJob_Property;
        
        private global::System.Data.DataRelation relationFK_Crew_Employee1;
        
        private global::System.Data.DataRelation relationFK_Property_Customer2;
        
        private global::System.Data.DataRelation relationFK_Route_Service1;
        
        private global::System.Data.DataRelation relationFK_CustomerJob_Property1;
        
        private global::System.Data.DataRelation relationFK_EmployeeBonus_Employee;
        
        private global::System.Data.DataRelation relationFK_Crew_Employee2;
        
        private global::System.Data.DataRelation relationFK_EmployeeBonus_EmployeeBonus;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MMSDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MMSDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Customer"] != null)) {
                    base.Tables.Add(new CustomerDataTable(ds.Tables["Customer"]));
                }
                if ((ds.Tables["Property"] != null)) {
                    base.Tables.Add(new PropertyDataTable(ds.Tables["Property"]));
                }
                if ((ds.Tables["Employee"] != null)) {
                    base.Tables.Add(new EmployeeDataTable(ds.Tables["Employee"]));
                }
                if ((ds.Tables["CustomerJob"] != null)) {
                    base.Tables.Add(new CustomerJobDataTable(ds.Tables["CustomerJob"]));
                }
                if ((ds.Tables["Service"] != null)) {
                    base.Tables.Add(new ServiceDataTable(ds.Tables["Service"]));
                }
                if ((ds.Tables["Route"] != null)) {
                    base.Tables.Add(new RouteDataTable(ds.Tables["Route"]));
                }
                if ((ds.Tables["CustProperty"] != null)) {
                    base.Tables.Add(new CustPropertyDataTable(ds.Tables["CustProperty"]));
                }
                if ((ds.Tables["Crew"] != null)) {
                    base.Tables.Add(new CrewDataTable(ds.Tables["Crew"]));
                }
                if ((ds.Tables["Vendor"] != null)) {
                    base.Tables.Add(new VendorDataTable(ds.Tables["Vendor"]));
                }
                if ((ds.Tables["PropService"] != null)) {
                    base.Tables.Add(new PropServiceDataTable(ds.Tables["PropService"]));
                }
                if ((ds.Tables["CustPropertyJobs"] != null)) {
                    base.Tables.Add(new CustPropertyJobsDataTable(ds.Tables["CustPropertyJobs"]));
                }
                if ((ds.Tables["CrewName"] != null)) {
                    base.Tables.Add(new CrewNameDataTable(ds.Tables["CrewName"]));
                }
                if ((ds.Tables["RouteList"] != null)) {
                    base.Tables.Add(new RouteListDataTable(ds.Tables["RouteList"]));
                }
                if ((ds.Tables["CustomerTypeList"] != null)) {
                    base.Tables.Add(new CustomerTypeListDataTable(ds.Tables["CustomerTypeList"]));
                }
                if ((ds.Tables["JobStatusList"] != null)) {
                    base.Tables.Add(new JobStatusListDataTable(ds.Tables["JobStatusList"]));
                }
                if ((ds.Tables["RouteView"] != null)) {
                    base.Tables.Add(new RouteViewDataTable(ds.Tables["RouteView"]));
                }
                if ((ds.Tables["LetterDataTable"] != null)) {
                    base.Tables.Add(new LetterDataTableDataTable(ds.Tables["LetterDataTable"]));
                }
                if ((ds.Tables["CustomerNewletter"] != null)) {
                    base.Tables.Add(new CustomerNewletterDataTable(ds.Tables["CustomerNewletter"]));
                }
                if ((ds.Tables["UserProfile"] != null)) {
                    base.Tables.Add(new UserProfileDataTable(ds.Tables["UserProfile"]));
                }
                if ((ds.Tables["CustomerNewLetters"] != null)) {
                    base.Tables.Add(new CustomerNewLettersDataTable(ds.Tables["CustomerNewLetters"]));
                }
                if ((ds.Tables["Bonus"] != null)) {
                    base.Tables.Add(new BonusDataTable(ds.Tables["Bonus"]));
                }
                if ((ds.Tables["EmployeeBonus"] != null)) {
                    base.Tables.Add(new EmployeeBonusDataTable(ds.Tables["EmployeeBonus"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerDataTable Customer {
            get {
                return this.tableCustomer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PropertyDataTable Property {
            get {
                return this.tableProperty;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeDataTable Employee {
            get {
                return this.tableEmployee;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerJobDataTable CustomerJob {
            get {
                return this.tableCustomerJob;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServiceDataTable Service {
            get {
                return this.tableService;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RouteDataTable Route {
            get {
                return this.tableRoute;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustPropertyDataTable CustProperty {
            get {
                return this.tableCustProperty;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CrewDataTable Crew {
            get {
                return this.tableCrew;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VendorDataTable Vendor {
            get {
                return this.tableVendor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PropServiceDataTable PropService {
            get {
                return this.tablePropService;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustPropertyJobsDataTable CustPropertyJobs {
            get {
                return this.tableCustPropertyJobs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CrewNameDataTable CrewName {
            get {
                return this.tableCrewName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RouteListDataTable RouteList {
            get {
                return this.tableRouteList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerTypeListDataTable CustomerTypeList {
            get {
                return this.tableCustomerTypeList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JobStatusListDataTable JobStatusList {
            get {
                return this.tableJobStatusList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RouteViewDataTable RouteView {
            get {
                return this.tableRouteView;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LetterDataTableDataTable LetterDataTable {
            get {
                return this.tableLetterDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerNewletterDataTable CustomerNewletter {
            get {
                return this.tableCustomerNewletter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserProfileDataTable UserProfile {
            get {
                return this.tableUserProfile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerNewLettersDataTable CustomerNewLetters {
            get {
                return this.tableCustomerNewLetters;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BonusDataTable Bonus {
            get {
                return this.tableBonus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeBonusDataTable EmployeeBonus {
            get {
                return this.tableEmployeeBonus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MMSDataSet cln = ((MMSDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Customer"] != null)) {
                    base.Tables.Add(new CustomerDataTable(ds.Tables["Customer"]));
                }
                if ((ds.Tables["Property"] != null)) {
                    base.Tables.Add(new PropertyDataTable(ds.Tables["Property"]));
                }
                if ((ds.Tables["Employee"] != null)) {
                    base.Tables.Add(new EmployeeDataTable(ds.Tables["Employee"]));
                }
                if ((ds.Tables["CustomerJob"] != null)) {
                    base.Tables.Add(new CustomerJobDataTable(ds.Tables["CustomerJob"]));
                }
                if ((ds.Tables["Service"] != null)) {
                    base.Tables.Add(new ServiceDataTable(ds.Tables["Service"]));
                }
                if ((ds.Tables["Route"] != null)) {
                    base.Tables.Add(new RouteDataTable(ds.Tables["Route"]));
                }
                if ((ds.Tables["CustProperty"] != null)) {
                    base.Tables.Add(new CustPropertyDataTable(ds.Tables["CustProperty"]));
                }
                if ((ds.Tables["Crew"] != null)) {
                    base.Tables.Add(new CrewDataTable(ds.Tables["Crew"]));
                }
                if ((ds.Tables["Vendor"] != null)) {
                    base.Tables.Add(new VendorDataTable(ds.Tables["Vendor"]));
                }
                if ((ds.Tables["PropService"] != null)) {
                    base.Tables.Add(new PropServiceDataTable(ds.Tables["PropService"]));
                }
                if ((ds.Tables["CustPropertyJobs"] != null)) {
                    base.Tables.Add(new CustPropertyJobsDataTable(ds.Tables["CustPropertyJobs"]));
                }
                if ((ds.Tables["CrewName"] != null)) {
                    base.Tables.Add(new CrewNameDataTable(ds.Tables["CrewName"]));
                }
                if ((ds.Tables["RouteList"] != null)) {
                    base.Tables.Add(new RouteListDataTable(ds.Tables["RouteList"]));
                }
                if ((ds.Tables["CustomerTypeList"] != null)) {
                    base.Tables.Add(new CustomerTypeListDataTable(ds.Tables["CustomerTypeList"]));
                }
                if ((ds.Tables["JobStatusList"] != null)) {
                    base.Tables.Add(new JobStatusListDataTable(ds.Tables["JobStatusList"]));
                }
                if ((ds.Tables["RouteView"] != null)) {
                    base.Tables.Add(new RouteViewDataTable(ds.Tables["RouteView"]));
                }
                if ((ds.Tables["LetterDataTable"] != null)) {
                    base.Tables.Add(new LetterDataTableDataTable(ds.Tables["LetterDataTable"]));
                }
                if ((ds.Tables["CustomerNewletter"] != null)) {
                    base.Tables.Add(new CustomerNewletterDataTable(ds.Tables["CustomerNewletter"]));
                }
                if ((ds.Tables["UserProfile"] != null)) {
                    base.Tables.Add(new UserProfileDataTable(ds.Tables["UserProfile"]));
                }
                if ((ds.Tables["CustomerNewLetters"] != null)) {
                    base.Tables.Add(new CustomerNewLettersDataTable(ds.Tables["CustomerNewLetters"]));
                }
                if ((ds.Tables["Bonus"] != null)) {
                    base.Tables.Add(new BonusDataTable(ds.Tables["Bonus"]));
                }
                if ((ds.Tables["EmployeeBonus"] != null)) {
                    base.Tables.Add(new EmployeeBonusDataTable(ds.Tables["EmployeeBonus"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCustomer = ((CustomerDataTable)(base.Tables["Customer"]));
            if ((initTable == true)) {
                if ((this.tableCustomer != null)) {
                    this.tableCustomer.InitVars();
                }
            }
            this.tableProperty = ((PropertyDataTable)(base.Tables["Property"]));
            if ((initTable == true)) {
                if ((this.tableProperty != null)) {
                    this.tableProperty.InitVars();
                }
            }
            this.tableEmployee = ((EmployeeDataTable)(base.Tables["Employee"]));
            if ((initTable == true)) {
                if ((this.tableEmployee != null)) {
                    this.tableEmployee.InitVars();
                }
            }
            this.tableCustomerJob = ((CustomerJobDataTable)(base.Tables["CustomerJob"]));
            if ((initTable == true)) {
                if ((this.tableCustomerJob != null)) {
                    this.tableCustomerJob.InitVars();
                }
            }
            this.tableService = ((ServiceDataTable)(base.Tables["Service"]));
            if ((initTable == true)) {
                if ((this.tableService != null)) {
                    this.tableService.InitVars();
                }
            }
            this.tableRoute = ((RouteDataTable)(base.Tables["Route"]));
            if ((initTable == true)) {
                if ((this.tableRoute != null)) {
                    this.tableRoute.InitVars();
                }
            }
            this.tableCustProperty = ((CustPropertyDataTable)(base.Tables["CustProperty"]));
            if ((initTable == true)) {
                if ((this.tableCustProperty != null)) {
                    this.tableCustProperty.InitVars();
                }
            }
            this.tableCrew = ((CrewDataTable)(base.Tables["Crew"]));
            if ((initTable == true)) {
                if ((this.tableCrew != null)) {
                    this.tableCrew.InitVars();
                }
            }
            this.tableVendor = ((VendorDataTable)(base.Tables["Vendor"]));
            if ((initTable == true)) {
                if ((this.tableVendor != null)) {
                    this.tableVendor.InitVars();
                }
            }
            this.tablePropService = ((PropServiceDataTable)(base.Tables["PropService"]));
            if ((initTable == true)) {
                if ((this.tablePropService != null)) {
                    this.tablePropService.InitVars();
                }
            }
            this.tableCustPropertyJobs = ((CustPropertyJobsDataTable)(base.Tables["CustPropertyJobs"]));
            if ((initTable == true)) {
                if ((this.tableCustPropertyJobs != null)) {
                    this.tableCustPropertyJobs.InitVars();
                }
            }
            this.tableCrewName = ((CrewNameDataTable)(base.Tables["CrewName"]));
            if ((initTable == true)) {
                if ((this.tableCrewName != null)) {
                    this.tableCrewName.InitVars();
                }
            }
            this.tableRouteList = ((RouteListDataTable)(base.Tables["RouteList"]));
            if ((initTable == true)) {
                if ((this.tableRouteList != null)) {
                    this.tableRouteList.InitVars();
                }
            }
            this.tableCustomerTypeList = ((CustomerTypeListDataTable)(base.Tables["CustomerTypeList"]));
            if ((initTable == true)) {
                if ((this.tableCustomerTypeList != null)) {
                    this.tableCustomerTypeList.InitVars();
                }
            }
            this.tableJobStatusList = ((JobStatusListDataTable)(base.Tables["JobStatusList"]));
            if ((initTable == true)) {
                if ((this.tableJobStatusList != null)) {
                    this.tableJobStatusList.InitVars();
                }
            }
            this.tableRouteView = ((RouteViewDataTable)(base.Tables["RouteView"]));
            if ((initTable == true)) {
                if ((this.tableRouteView != null)) {
                    this.tableRouteView.InitVars();
                }
            }
            this.tableLetterDataTable = ((LetterDataTableDataTable)(base.Tables["LetterDataTable"]));
            if ((initTable == true)) {
                if ((this.tableLetterDataTable != null)) {
                    this.tableLetterDataTable.InitVars();
                }
            }
            this.tableCustomerNewletter = ((CustomerNewletterDataTable)(base.Tables["CustomerNewletter"]));
            if ((initTable == true)) {
                if ((this.tableCustomerNewletter != null)) {
                    this.tableCustomerNewletter.InitVars();
                }
            }
            this.tableUserProfile = ((UserProfileDataTable)(base.Tables["UserProfile"]));
            if ((initTable == true)) {
                if ((this.tableUserProfile != null)) {
                    this.tableUserProfile.InitVars();
                }
            }
            this.tableCustomerNewLetters = ((CustomerNewLettersDataTable)(base.Tables["CustomerNewLetters"]));
            if ((initTable == true)) {
                if ((this.tableCustomerNewLetters != null)) {
                    this.tableCustomerNewLetters.InitVars();
                }
            }
            this.tableBonus = ((BonusDataTable)(base.Tables["Bonus"]));
            if ((initTable == true)) {
                if ((this.tableBonus != null)) {
                    this.tableBonus.InitVars();
                }
            }
            this.tableEmployeeBonus = ((EmployeeBonusDataTable)(base.Tables["EmployeeBonus"]));
            if ((initTable == true)) {
                if ((this.tableEmployeeBonus != null)) {
                    this.tableEmployeeBonus.InitVars();
                }
            }
            this.relationFK_Property_Customer = this.Relations["FK_Property_Customer"];
            this.relationFK_Crew_Employee = this.Relations["FK_Crew_Employee"];
            this.relationFK_Service_Property = this.Relations["FK_Service_Property"];
            this.relationFK_CustomerJob_Property = this.Relations["FK_CustomerJob_Property"];
            this.relationFK_Crew_Employee1 = this.Relations["FK_Crew_Employee1"];
            this.relationFK_Property_Customer2 = this.Relations["FK_Property_Customer2"];
            this.relationFK_Route_Service1 = this.Relations["FK_Route_Service1"];
            this.relationFK_CustomerJob_Property1 = this.Relations["FK_CustomerJob_Property1"];
            this.relationFK_EmployeeBonus_Employee = this.Relations["FK_EmployeeBonus_Employee"];
            this.relationFK_Crew_Employee2 = this.Relations["FK_Crew_Employee2"];
            this.relationFK_EmployeeBonus_EmployeeBonus = this.Relations["FK_EmployeeBonus_EmployeeBonus"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MMSDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MMSDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCustomer = new CustomerDataTable();
            base.Tables.Add(this.tableCustomer);
            this.tableProperty = new PropertyDataTable();
            base.Tables.Add(this.tableProperty);
            this.tableEmployee = new EmployeeDataTable();
            base.Tables.Add(this.tableEmployee);
            this.tableCustomerJob = new CustomerJobDataTable();
            base.Tables.Add(this.tableCustomerJob);
            this.tableService = new ServiceDataTable();
            base.Tables.Add(this.tableService);
            this.tableRoute = new RouteDataTable();
            base.Tables.Add(this.tableRoute);
            this.tableCustProperty = new CustPropertyDataTable();
            base.Tables.Add(this.tableCustProperty);
            this.tableCrew = new CrewDataTable();
            base.Tables.Add(this.tableCrew);
            this.tableVendor = new VendorDataTable();
            base.Tables.Add(this.tableVendor);
            this.tablePropService = new PropServiceDataTable();
            base.Tables.Add(this.tablePropService);
            this.tableCustPropertyJobs = new CustPropertyJobsDataTable();
            base.Tables.Add(this.tableCustPropertyJobs);
            this.tableCrewName = new CrewNameDataTable();
            base.Tables.Add(this.tableCrewName);
            this.tableRouteList = new RouteListDataTable();
            base.Tables.Add(this.tableRouteList);
            this.tableCustomerTypeList = new CustomerTypeListDataTable();
            base.Tables.Add(this.tableCustomerTypeList);
            this.tableJobStatusList = new JobStatusListDataTable();
            base.Tables.Add(this.tableJobStatusList);
            this.tableRouteView = new RouteViewDataTable();
            base.Tables.Add(this.tableRouteView);
            this.tableLetterDataTable = new LetterDataTableDataTable();
            base.Tables.Add(this.tableLetterDataTable);
            this.tableCustomerNewletter = new CustomerNewletterDataTable();
            base.Tables.Add(this.tableCustomerNewletter);
            this.tableUserProfile = new UserProfileDataTable();
            base.Tables.Add(this.tableUserProfile);
            this.tableCustomerNewLetters = new CustomerNewLettersDataTable();
            base.Tables.Add(this.tableCustomerNewLetters);
            this.tableBonus = new BonusDataTable();
            base.Tables.Add(this.tableBonus);
            this.tableEmployeeBonus = new EmployeeBonusDataTable();
            base.Tables.Add(this.tableEmployeeBonus);
            this.relationFK_Property_Customer = new global::System.Data.DataRelation("FK_Property_Customer", new global::System.Data.DataColumn[] {
                        this.tableCustomer.CustomerIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProperty.CustomerIDColumn}, false);
            this.Relations.Add(this.relationFK_Property_Customer);
            this.relationFK_Crew_Employee = new global::System.Data.DataRelation("FK_Crew_Employee", new global::System.Data.DataColumn[] {
                        this.tableEmployee.EmployeeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCrew.EmployeeIdColumn}, false);
            this.Relations.Add(this.relationFK_Crew_Employee);
            this.relationFK_Service_Property = new global::System.Data.DataRelation("FK_Service_Property", new global::System.Data.DataColumn[] {
                        this.tableProperty.PropertyIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableService.PropertyIDColumn}, false);
            this.Relations.Add(this.relationFK_Service_Property);
            this.relationFK_CustomerJob_Property = new global::System.Data.DataRelation("FK_CustomerJob_Property", new global::System.Data.DataColumn[] {
                        this.tableProperty.PropertyIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCustomerJob.PropertyIDColumn}, false);
            this.Relations.Add(this.relationFK_CustomerJob_Property);
            this.relationFK_Crew_Employee1 = new global::System.Data.DataRelation("FK_Crew_Employee1", new global::System.Data.DataColumn[] {
                        this.tableEmployee.EmployeeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCrewName.EmployeeIdColumn}, false);
            this.Relations.Add(this.relationFK_Crew_Employee1);
            this.relationFK_Property_Customer2 = new global::System.Data.DataRelation("FK_Property_Customer2", new global::System.Data.DataColumn[] {
                        this.tableCustomerNewletter.CustomerIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProperty.CustomerIDColumn}, false);
            this.Relations.Add(this.relationFK_Property_Customer2);
            this.relationFK_Route_Service1 = new global::System.Data.DataRelation("FK_Route_Service1", new global::System.Data.DataColumn[] {
                        this.tableService.ServiceIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRoute.PropertyIDColumn}, false);
            this.Relations.Add(this.relationFK_Route_Service1);
            this.relationFK_CustomerJob_Property1 = new global::System.Data.DataRelation("FK_CustomerJob_Property1", new global::System.Data.DataColumn[] {
                        this.tableProperty.PropertyIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCustPropertyJobs.PropertyIDColumn}, false);
            this.Relations.Add(this.relationFK_CustomerJob_Property1);
            this.relationFK_EmployeeBonus_Employee = new global::System.Data.DataRelation("FK_EmployeeBonus_Employee", new global::System.Data.DataColumn[] {
                        this.tableEmployee.EmployeeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmployeeBonus.EmployeeIDColumn}, false);
            this.Relations.Add(this.relationFK_EmployeeBonus_Employee);
            this.relationFK_Crew_Employee2 = new global::System.Data.DataRelation("FK_Crew_Employee2", new global::System.Data.DataColumn[] {
                        this.tableBonus.EmployeeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCrew.EmployeeIdColumn}, false);
            this.Relations.Add(this.relationFK_Crew_Employee2);
            this.relationFK_EmployeeBonus_EmployeeBonus = new global::System.Data.DataRelation("FK_EmployeeBonus_EmployeeBonus", new global::System.Data.DataColumn[] {
                        this.tableBonus.EmployeeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmployeeBonus.EmployeeIDColumn}, false);
            this.Relations.Add(this.relationFK_EmployeeBonus_EmployeeBonus);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProperty() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployee() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomerJob() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeService() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRoute() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustProperty() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCrew() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVendor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePropService() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustPropertyJobs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCrewName() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRouteList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomerTypeList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJobStatusList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRouteView() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLetterDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomerNewletter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserProfile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomerNewLetters() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBonus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployeeBonus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MMSDataSet ds = new MMSDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void CustomerRowChangeEventHandler(object sender, CustomerRowChangeEvent e);
        
        public delegate void PropertyRowChangeEventHandler(object sender, PropertyRowChangeEvent e);
        
        public delegate void EmployeeRowChangeEventHandler(object sender, EmployeeRowChangeEvent e);
        
        public delegate void CustomerJobRowChangeEventHandler(object sender, CustomerJobRowChangeEvent e);
        
        public delegate void ServiceRowChangeEventHandler(object sender, ServiceRowChangeEvent e);
        
        public delegate void RouteRowChangeEventHandler(object sender, RouteRowChangeEvent e);
        
        public delegate void CustPropertyRowChangeEventHandler(object sender, CustPropertyRowChangeEvent e);
        
        public delegate void CrewRowChangeEventHandler(object sender, CrewRowChangeEvent e);
        
        public delegate void VendorRowChangeEventHandler(object sender, VendorRowChangeEvent e);
        
        public delegate void PropServiceRowChangeEventHandler(object sender, PropServiceRowChangeEvent e);
        
        public delegate void CustPropertyJobsRowChangeEventHandler(object sender, CustPropertyJobsRowChangeEvent e);
        
        public delegate void CrewNameRowChangeEventHandler(object sender, CrewNameRowChangeEvent e);
        
        public delegate void RouteListRowChangeEventHandler(object sender, RouteListRowChangeEvent e);
        
        public delegate void CustomerTypeListRowChangeEventHandler(object sender, CustomerTypeListRowChangeEvent e);
        
        public delegate void JobStatusListRowChangeEventHandler(object sender, JobStatusListRowChangeEvent e);
        
        public delegate void RouteViewRowChangeEventHandler(object sender, RouteViewRowChangeEvent e);
        
        public delegate void LetterDataTableRowChangeEventHandler(object sender, LetterDataTableRowChangeEvent e);
        
        public delegate void CustomerNewletterRowChangeEventHandler(object sender, CustomerNewletterRowChangeEvent e);
        
        public delegate void UserProfileRowChangeEventHandler(object sender, UserProfileRowChangeEvent e);
        
        public delegate void CustomerNewLettersRowChangeEventHandler(object sender, CustomerNewLettersRowChangeEvent e);
        
        public delegate void BonusRowChangeEventHandler(object sender, BonusRowChangeEvent e);
        
        public delegate void EmployeeBonusRowChangeEventHandler(object sender, EmployeeBonusRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerDataTable : global::System.Data.TypedTableBase<CustomerRow> {
            
            private global::System.Data.DataColumn columnCustomerID;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnPhone1;
            
            private global::System.Data.DataColumn columnPhone2;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnModified;
            
            private global::System.Data.DataColumn columnBusinessType;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnNewsletter;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnGroupType;
            
            private global::System.Data.DataColumn columnAccountNumber;
            
            private global::System.Data.DataColumn columnBusinessName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerDataTable() {
                this.TableName = "Customer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone1Column {
                get {
                    return this.columnPhone1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone2Column {
                get {
                    return this.columnPhone2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedColumn {
                get {
                    return this.columnModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BusinessTypeColumn {
                get {
                    return this.columnBusinessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsletterColumn {
                get {
                    return this.columnNewsletter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupTypeColumn {
                get {
                    return this.columnGroupType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNumberColumn {
                get {
                    return this.columnAccountNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BusinessNameColumn {
                get {
                    return this.columnBusinessName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow this[int index] {
                get {
                    return ((CustomerRow)(this.Rows[index]));
                }
            }
            
            public event CustomerRowChangeEventHandler CustomerRowChanging;
            
            public event CustomerRowChangeEventHandler CustomerRowChanged;
            
            public event CustomerRowChangeEventHandler CustomerRowDeleting;
            
            public event CustomerRowChangeEventHandler CustomerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerRow(CustomerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow AddCustomerRow(
                        string LastName, 
                        string FirstName, 
                        string Address, 
                        string City, 
                        string State, 
                        string Zip, 
                        string Phone1, 
                        string Phone2, 
                        string Email, 
                        byte[] Modified, 
                        bool BusinessType, 
                        string Type, 
                        bool Newsletter, 
                        bool Active, 
                        string GroupType, 
                        string AccountNumber, 
                        string BusinessName) {
                CustomerRow rowCustomerRow = ((CustomerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LastName,
                        FirstName,
                        Address,
                        City,
                        State,
                        Zip,
                        Phone1,
                        Phone2,
                        Email,
                        Modified,
                        BusinessType,
                        Type,
                        Newsletter,
                        Active,
                        GroupType,
                        AccountNumber,
                        BusinessName};
                rowCustomerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomerRow);
                return rowCustomerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow FindByCustomerID(int CustomerID) {
                return ((CustomerRow)(this.Rows.Find(new object[] {
                            CustomerID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomerDataTable cln = ((CustomerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerID = base.Columns["CustomerID"];
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnPhone1 = base.Columns["Phone1"];
                this.columnPhone2 = base.Columns["Phone2"];
                this.columnEmail = base.Columns["Email"];
                this.columnModified = base.Columns["Modified"];
                this.columnBusinessType = base.Columns["BusinessType"];
                this.columnType = base.Columns["Type"];
                this.columnNewsletter = base.Columns["Newsletter"];
                this.columnActive = base.Columns["Active"];
                this.columnGroupType = base.Columns["GroupType"];
                this.columnAccountNumber = base.Columns["AccountNumber"];
                this.columnBusinessName = base.Columns["BusinessName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerID = new global::System.Data.DataColumn("CustomerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerID);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnPhone1 = new global::System.Data.DataColumn("Phone1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone1);
                this.columnPhone2 = new global::System.Data.DataColumn("Phone2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone2);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnModified = new global::System.Data.DataColumn("Modified", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified);
                this.columnBusinessType = new global::System.Data.DataColumn("BusinessType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessType);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnNewsletter = new global::System.Data.DataColumn("Newsletter", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsletter);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnGroupType = new global::System.Data.DataColumn("GroupType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupType);
                this.columnAccountNumber = new global::System.Data.DataColumn("AccountNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountNumber);
                this.columnBusinessName = new global::System.Data.DataColumn("BusinessName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCustomerID}, true));
                this.columnCustomerID.AutoIncrement = true;
                this.columnCustomerID.AutoIncrementSeed = -1;
                this.columnCustomerID.AutoIncrementStep = -1;
                this.columnCustomerID.AllowDBNull = false;
                this.columnCustomerID.ReadOnly = true;
                this.columnCustomerID.Unique = true;
                this.columnLastName.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnPhone1.MaxLength = 50;
                this.columnPhone2.MaxLength = 50;
                this.columnEmail.MaxLength = 50;
                this.columnModified.ReadOnly = true;
                this.columnType.MaxLength = 10;
                this.columnActive.AllowDBNull = false;
                this.columnActive.DefaultValue = ((bool)(true));
                this.columnGroupType.MaxLength = 50;
                this.columnAccountNumber.MaxLength = 50;
                this.columnBusinessName.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow NewCustomerRow() {
                return ((CustomerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerRowChanged != null)) {
                    this.CustomerRowChanged(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerRowChanging != null)) {
                    this.CustomerRowChanging(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerRowDeleted != null)) {
                    this.CustomerRowDeleted(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerRowDeleting != null)) {
                    this.CustomerRowDeleting(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerRow(CustomerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PropertyDataTable : global::System.Data.TypedTableBase<PropertyRow> {
            
            private global::System.Data.DataColumn columnPropertyID;
            
            private global::System.Data.DataColumn columnCustomerID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnPhone;
            
            private global::System.Data.DataColumn columnSubdivision;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnAccountNumber;
            
            private global::System.Data.DataColumn columnGroupType;
            
            private global::System.Data.DataColumn columnGutterRegion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyDataTable() {
                this.TableName = "Property";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PropertyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PropertyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyIDColumn {
                get {
                    return this.columnPropertyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubdivisionColumn {
                get {
                    return this.columnSubdivision;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNumberColumn {
                get {
                    return this.columnAccountNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupTypeColumn {
                get {
                    return this.columnGroupType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GutterRegionColumn {
                get {
                    return this.columnGutterRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow this[int index] {
                get {
                    return ((PropertyRow)(this.Rows[index]));
                }
            }
            
            public event PropertyRowChangeEventHandler PropertyRowChanging;
            
            public event PropertyRowChangeEventHandler PropertyRowChanged;
            
            public event PropertyRowChangeEventHandler PropertyRowDeleting;
            
            public event PropertyRowChangeEventHandler PropertyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPropertyRow(PropertyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow AddPropertyRow(CustomerRow parentCustomerRowByFK_Property_Customer, string Description, string Address, string City, string State, string Zip, string Phone, string Subdivision, bool Active, string AccountNumber, string GroupType, string GutterRegion) {
                PropertyRow rowPropertyRow = ((PropertyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Description,
                        Address,
                        City,
                        State,
                        Zip,
                        Phone,
                        Subdivision,
                        Active,
                        AccountNumber,
                        GroupType,
                        GutterRegion};
                if ((parentCustomerRowByFK_Property_Customer != null)) {
                    columnValuesArray[1] = parentCustomerRowByFK_Property_Customer[0];
                }
                rowPropertyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPropertyRow);
                return rowPropertyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow FindByPropertyID(int PropertyID) {
                return ((PropertyRow)(this.Rows.Find(new object[] {
                            PropertyID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PropertyDataTable cln = ((PropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PropertyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPropertyID = base.Columns["PropertyID"];
                this.columnCustomerID = base.Columns["CustomerID"];
                this.columnDescription = base.Columns["Description"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnPhone = base.Columns["Phone"];
                this.columnSubdivision = base.Columns["Subdivision"];
                this.columnActive = base.Columns["Active"];
                this.columnAccountNumber = base.Columns["AccountNumber"];
                this.columnGroupType = base.Columns["GroupType"];
                this.columnGutterRegion = base.Columns["GutterRegion"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPropertyID = new global::System.Data.DataColumn("PropertyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyID);
                this.columnCustomerID = new global::System.Data.DataColumn("CustomerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnSubdivision = new global::System.Data.DataColumn("Subdivision", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubdivision);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnAccountNumber = new global::System.Data.DataColumn("AccountNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountNumber);
                this.columnGroupType = new global::System.Data.DataColumn("GroupType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupType);
                this.columnGutterRegion = new global::System.Data.DataColumn("GutterRegion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGutterRegion);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPropertyID}, true));
                this.columnPropertyID.AutoIncrement = true;
                this.columnPropertyID.AutoIncrementSeed = -1;
                this.columnPropertyID.AutoIncrementStep = -1;
                this.columnPropertyID.AllowDBNull = false;
                this.columnPropertyID.ReadOnly = true;
                this.columnPropertyID.Unique = true;
                this.columnCustomerID.AllowDBNull = false;
                this.columnDescription.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnPhone.MaxLength = 50;
                this.columnSubdivision.MaxLength = 50;
                this.columnActive.AllowDBNull = false;
                this.columnActive.DefaultValue = ((bool)(true));
                this.columnAccountNumber.MaxLength = 50;
                this.columnGroupType.DefaultValue = ((string)("Current"));
                this.columnGroupType.MaxLength = 50;
                this.columnGutterRegion.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow NewPropertyRow() {
                return ((PropertyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PropertyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PropertyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PropertyRowChanged != null)) {
                    this.PropertyRowChanged(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PropertyRowChanging != null)) {
                    this.PropertyRowChanging(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PropertyRowDeleted != null)) {
                    this.PropertyRowDeleted(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PropertyRowDeleting != null)) {
                    this.PropertyRowDeleting(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePropertyRow(PropertyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PropertyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeDataTable : global::System.Data.TypedTableBase<EmployeeRow> {
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnPhone1;
            
            private global::System.Data.DataColumn columnPhone2;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnContractor;
            
            private global::System.Data.DataColumn columnActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDataTable() {
                this.TableName = "Employee";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone1Column {
                get {
                    return this.columnPhone1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone2Column {
                get {
                    return this.columnPhone2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContractorColumn {
                get {
                    return this.columnContractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow this[int index] {
                get {
                    return ((EmployeeRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeRowChangeEventHandler EmployeeRowChanging;
            
            public event EmployeeRowChangeEventHandler EmployeeRowChanged;
            
            public event EmployeeRowChangeEventHandler EmployeeRowDeleting;
            
            public event EmployeeRowChangeEventHandler EmployeeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeRow(EmployeeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow AddEmployeeRow(string Address, string FirstName, string LastName, string City, string State, string Zip, string Phone1, string Phone2, string Notes, bool Contractor, bool Active) {
                EmployeeRow rowEmployeeRow = ((EmployeeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Address,
                        FirstName,
                        LastName,
                        City,
                        State,
                        Zip,
                        Phone1,
                        Phone2,
                        Notes,
                        Contractor,
                        Active};
                rowEmployeeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployeeRow);
                return rowEmployeeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow FindByEmployeeID(int EmployeeID) {
                return ((EmployeeRow)(this.Rows.Find(new object[] {
                            EmployeeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmployeeDataTable cln = ((EmployeeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmployeeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnAddress = base.Columns["Address"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnPhone1 = base.Columns["Phone1"];
                this.columnPhone2 = base.Columns["Phone2"];
                this.columnNotes = base.Columns["Notes"];
                this.columnContractor = base.Columns["Contractor"];
                this.columnActive = base.Columns["Active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnPhone1 = new global::System.Data.DataColumn("Phone1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone1);
                this.columnPhone2 = new global::System.Data.DataColumn("Phone2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone2);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnContractor = new global::System.Data.DataColumn("Contractor", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractor);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmployeeID}, true));
                this.columnEmployeeID.AutoIncrement = true;
                this.columnEmployeeID.AutoIncrementSeed = -1;
                this.columnEmployeeID.AutoIncrementStep = -1;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnEmployeeID.Unique = true;
                this.columnAddress.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnPhone1.MaxLength = 50;
                this.columnPhone2.MaxLength = 50;
                this.columnNotes.MaxLength = 1000;
                this.columnContractor.AllowDBNull = false;
                this.columnContractor.DefaultValue = ((bool)(false));
                this.columnActive.AllowDBNull = false;
                this.columnActive.DefaultValue = ((bool)(true));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow NewEmployeeRow() {
                return ((EmployeeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmployeeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmployeeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeRowChanged != null)) {
                    this.EmployeeRowChanged(this, new EmployeeRowChangeEvent(((EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeRowChanging != null)) {
                    this.EmployeeRowChanging(this, new EmployeeRowChangeEvent(((EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeRowDeleted != null)) {
                    this.EmployeeRowDeleted(this, new EmployeeRowChangeEvent(((EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeRowDeleting != null)) {
                    this.EmployeeRowDeleting(this, new EmployeeRowChangeEvent(((EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeRow(EmployeeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerJobDataTable : global::System.Data.TypedTableBase<CustomerJobRow> {
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnRepeat;
            
            private global::System.Data.DataColumn columnFrequency;
            
            private global::System.Data.DataColumn columnIntervalType;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnCostContractor;
            
            private global::System.Data.DataColumn columnCostFourStep;
            
            private global::System.Data.DataColumn columnInstructions;
            
            private global::System.Data.DataColumn columnPropertyID;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnManHours;
            
            private global::System.Data.DataColumn columnCompliments;
            
            private global::System.Data.DataColumn columnComplaints;
            
            private global::System.Data.DataColumn columnCostB;
            
            private global::System.Data.DataColumn columnCostC;
            
            private global::System.Data.DataColumn columnCrewKey;
            
            private global::System.Data.DataColumn columnSelectPrint;
            
            private global::System.Data.DataColumn columnMaterialCost;
            
            private global::System.Data.DataColumn columnRevenue;
            
            private global::System.Data.DataColumn columnQBInvoiceID;
            
            private global::System.Data.DataColumn columnQBItemID;
            
            private global::System.Data.DataColumn columnQBItemIDB;
            
            private global::System.Data.DataColumn columnQBItemIDC;
            
            private global::System.Data.DataColumn columnFourStepJob;
            
            private global::System.Data.DataColumn columnCustomerJobID;
            
            private global::System.Data.DataColumn columnFourStepMat;
            
            private global::System.Data.DataColumn columnQBDescription;
            
            private global::System.Data.DataColumn columnFourStepJob2;
            
            private global::System.Data.DataColumn columnFourStepJob3;
            
            private global::System.Data.DataColumn columnFourStepJob4;
            
            private global::System.Data.DataColumn columnFourStepJob1;
            
            private global::System.Data.DataColumn columnQBDescriptionA;
            
            private global::System.Data.DataColumn columnCostD;
            
            private global::System.Data.DataColumn columnQBItemIDD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerJobDataTable() {
                this.TableName = "CustomerJob";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerJobDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerJobDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RepeatColumn {
                get {
                    return this.columnRepeat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IntervalTypeColumn {
                get {
                    return this.columnIntervalType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostContractorColumn {
                get {
                    return this.columnCostContractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostFourStepColumn {
                get {
                    return this.columnCostFourStep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstructionsColumn {
                get {
                    return this.columnInstructions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyIDColumn {
                get {
                    return this.columnPropertyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManHoursColumn {
                get {
                    return this.columnManHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComplimentsColumn {
                get {
                    return this.columnCompliments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComplaintsColumn {
                get {
                    return this.columnComplaints;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostBColumn {
                get {
                    return this.columnCostB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCColumn {
                get {
                    return this.columnCostC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CrewKeyColumn {
                get {
                    return this.columnCrewKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectPrintColumn {
                get {
                    return this.columnSelectPrint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialCostColumn {
                get {
                    return this.columnMaterialCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevenueColumn {
                get {
                    return this.columnRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBInvoiceIDColumn {
                get {
                    return this.columnQBInvoiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBItemIDColumn {
                get {
                    return this.columnQBItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBItemIDBColumn {
                get {
                    return this.columnQBItemIDB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBItemIDCColumn {
                get {
                    return this.columnQBItemIDC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepJobColumn {
                get {
                    return this.columnFourStepJob;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerJobIDColumn {
                get {
                    return this.columnCustomerJobID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepMatColumn {
                get {
                    return this.columnFourStepMat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBDescriptionColumn {
                get {
                    return this.columnQBDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepJob2Column {
                get {
                    return this.columnFourStepJob2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepJob3Column {
                get {
                    return this.columnFourStepJob3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepJob4Column {
                get {
                    return this.columnFourStepJob4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepJob1Column {
                get {
                    return this.columnFourStepJob1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBDescriptionAColumn {
                get {
                    return this.columnQBDescriptionA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostDColumn {
                get {
                    return this.columnCostD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBItemIDDColumn {
                get {
                    return this.columnQBItemIDD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerJobRow this[int index] {
                get {
                    return ((CustomerJobRow)(this.Rows[index]));
                }
            }
            
            public event CustomerJobRowChangeEventHandler CustomerJobRowChanging;
            
            public event CustomerJobRowChangeEventHandler CustomerJobRowChanged;
            
            public event CustomerJobRowChangeEventHandler CustomerJobRowDeleting;
            
            public event CustomerJobRowChangeEventHandler CustomerJobRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerJobRow(CustomerJobRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerJobRow AddCustomerJobRow(
                        System.DateTime Date, 
                        string Type, 
                        bool Repeat, 
                        int Frequency, 
                        string IntervalType, 
                        decimal Cost, 
                        decimal CostContractor, 
                        decimal CostFourStep, 
                        string Instructions, 
                        PropertyRow parentPropertyRowByFK_CustomerJob_Property, 
                        string Status, 
                        float ManHours, 
                        string Compliments, 
                        string Complaints, 
                        decimal CostB, 
                        decimal CostC, 
                        string CrewKey, 
                        bool SelectPrint, 
                        decimal MaterialCost, 
                        decimal Revenue, 
                        string QBInvoiceID, 
                        string QBItemID, 
                        string QBItemIDB, 
                        string QBItemIDC, 
                        bool FourStepJob, 
                        float FourStepMat, 
                        string QBDescription, 
                        bool FourStepJob2, 
                        bool FourStepJob3, 
                        bool FourStepJob4, 
                        bool FourStepJob1, 
                        string QBDescriptionA, 
                        decimal CostD, 
                        string QBItemIDD) {
                CustomerJobRow rowCustomerJobRow = ((CustomerJobRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Date,
                        Type,
                        Repeat,
                        Frequency,
                        IntervalType,
                        Cost,
                        CostContractor,
                        CostFourStep,
                        Instructions,
                        null,
                        Status,
                        ManHours,
                        Compliments,
                        Complaints,
                        CostB,
                        CostC,
                        CrewKey,
                        SelectPrint,
                        MaterialCost,
                        Revenue,
                        QBInvoiceID,
                        QBItemID,
                        QBItemIDB,
                        QBItemIDC,
                        FourStepJob,
                        null,
                        FourStepMat,
                        QBDescription,
                        FourStepJob2,
                        FourStepJob3,
                        FourStepJob4,
                        FourStepJob1,
                        QBDescriptionA,
                        CostD,
                        QBItemIDD};
                if ((parentPropertyRowByFK_CustomerJob_Property != null)) {
                    columnValuesArray[9] = parentPropertyRowByFK_CustomerJob_Property[0];
                }
                rowCustomerJobRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomerJobRow);
                return rowCustomerJobRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerJobRow FindByCustomerJobID(long CustomerJobID) {
                return ((CustomerJobRow)(this.Rows.Find(new object[] {
                            CustomerJobID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomerJobDataTable cln = ((CustomerJobDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomerJobDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDate = base.Columns["Date"];
                this.columnType = base.Columns["Type"];
                this.columnRepeat = base.Columns["Repeat"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnIntervalType = base.Columns["IntervalType"];
                this.columnCost = base.Columns["Cost"];
                this.columnCostContractor = base.Columns["CostContractor"];
                this.columnCostFourStep = base.Columns["CostFourStep"];
                this.columnInstructions = base.Columns["Instructions"];
                this.columnPropertyID = base.Columns["PropertyID"];
                this.columnStatus = base.Columns["Status"];
                this.columnManHours = base.Columns["ManHours"];
                this.columnCompliments = base.Columns["Compliments"];
                this.columnComplaints = base.Columns["Complaints"];
                this.columnCostB = base.Columns["CostB"];
                this.columnCostC = base.Columns["CostC"];
                this.columnCrewKey = base.Columns["CrewKey"];
                this.columnSelectPrint = base.Columns["SelectPrint"];
                this.columnMaterialCost = base.Columns["MaterialCost"];
                this.columnRevenue = base.Columns["Revenue"];
                this.columnQBInvoiceID = base.Columns["QBInvoiceID"];
                this.columnQBItemID = base.Columns["QBItemID"];
                this.columnQBItemIDB = base.Columns["QBItemIDB"];
                this.columnQBItemIDC = base.Columns["QBItemIDC"];
                this.columnFourStepJob = base.Columns["FourStepJob"];
                this.columnCustomerJobID = base.Columns["CustomerJobID"];
                this.columnFourStepMat = base.Columns["FourStepMat"];
                this.columnQBDescription = base.Columns["QBDescription"];
                this.columnFourStepJob2 = base.Columns["FourStepJob2"];
                this.columnFourStepJob3 = base.Columns["FourStepJob3"];
                this.columnFourStepJob4 = base.Columns["FourStepJob4"];
                this.columnFourStepJob1 = base.Columns["FourStepJob1"];
                this.columnQBDescriptionA = base.Columns["QBDescriptionA"];
                this.columnCostD = base.Columns["CostD"];
                this.columnQBItemIDD = base.Columns["QBItemIDD"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnRepeat = new global::System.Data.DataColumn("Repeat", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepeat);
                this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequency);
                this.columnIntervalType = new global::System.Data.DataColumn("IntervalType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIntervalType);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnCostContractor = new global::System.Data.DataColumn("CostContractor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostContractor);
                this.columnCostFourStep = new global::System.Data.DataColumn("CostFourStep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostFourStep);
                this.columnInstructions = new global::System.Data.DataColumn("Instructions", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstructions);
                this.columnPropertyID = new global::System.Data.DataColumn("PropertyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyID);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnManHours = new global::System.Data.DataColumn("ManHours", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManHours);
                this.columnCompliments = new global::System.Data.DataColumn("Compliments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompliments);
                this.columnComplaints = new global::System.Data.DataColumn("Complaints", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComplaints);
                this.columnCostB = new global::System.Data.DataColumn("CostB", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostB);
                this.columnCostC = new global::System.Data.DataColumn("CostC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostC);
                this.columnCrewKey = new global::System.Data.DataColumn("CrewKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrewKey);
                this.columnSelectPrint = new global::System.Data.DataColumn("SelectPrint", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectPrint);
                this.columnMaterialCost = new global::System.Data.DataColumn("MaterialCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialCost);
                this.columnRevenue = new global::System.Data.DataColumn("Revenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevenue);
                this.columnQBInvoiceID = new global::System.Data.DataColumn("QBInvoiceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBInvoiceID);
                this.columnQBItemID = new global::System.Data.DataColumn("QBItemID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBItemID);
                this.columnQBItemIDB = new global::System.Data.DataColumn("QBItemIDB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBItemIDB);
                this.columnQBItemIDC = new global::System.Data.DataColumn("QBItemIDC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBItemIDC);
                this.columnFourStepJob = new global::System.Data.DataColumn("FourStepJob", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepJob);
                this.columnCustomerJobID = new global::System.Data.DataColumn("CustomerJobID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerJobID);
                this.columnFourStepMat = new global::System.Data.DataColumn("FourStepMat", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepMat);
                this.columnQBDescription = new global::System.Data.DataColumn("QBDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBDescription);
                this.columnFourStepJob2 = new global::System.Data.DataColumn("FourStepJob2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepJob2);
                this.columnFourStepJob3 = new global::System.Data.DataColumn("FourStepJob3", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepJob3);
                this.columnFourStepJob4 = new global::System.Data.DataColumn("FourStepJob4", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepJob4);
                this.columnFourStepJob1 = new global::System.Data.DataColumn("FourStepJob1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepJob1);
                this.columnQBDescriptionA = new global::System.Data.DataColumn("QBDescriptionA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBDescriptionA);
                this.columnCostD = new global::System.Data.DataColumn("CostD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostD);
                this.columnQBItemIDD = new global::System.Data.DataColumn("QBItemIDD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBItemIDD);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnCustomerJobID}, true));
                this.columnType.MaxLength = 50;
                this.columnIntervalType.MaxLength = 20;
                this.columnInstructions.MaxLength = 1000;
                this.columnPropertyID.AllowDBNull = false;
                this.columnStatus.MaxLength = 25;
                this.columnCompliments.MaxLength = 250;
                this.columnComplaints.MaxLength = 250;
                this.columnCrewKey.MaxLength = 50;
                this.columnMaterialCost.DefaultValue = ((decimal)(0m));
                this.columnQBInvoiceID.MaxLength = 50;
                this.columnQBItemID.MaxLength = 50;
                this.columnQBItemIDB.MaxLength = 50;
                this.columnQBItemIDC.MaxLength = 50;
                this.columnCustomerJobID.AutoIncrement = true;
                this.columnCustomerJobID.AutoIncrementSeed = -1;
                this.columnCustomerJobID.AutoIncrementStep = -1;
                this.columnCustomerJobID.AllowDBNull = false;
                this.columnCustomerJobID.ReadOnly = true;
                this.columnCustomerJobID.Unique = true;
                this.columnQBDescription.MaxLength = 250;
                this.columnQBDescriptionA.MaxLength = 250;
                this.columnQBItemIDD.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerJobRow NewCustomerJobRow() {
                return ((CustomerJobRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomerJobRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomerJobRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerJobRowChanged != null)) {
                    this.CustomerJobRowChanged(this, new CustomerJobRowChangeEvent(((CustomerJobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerJobRowChanging != null)) {
                    this.CustomerJobRowChanging(this, new CustomerJobRowChangeEvent(((CustomerJobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerJobRowDeleted != null)) {
                    this.CustomerJobRowDeleted(this, new CustomerJobRowChangeEvent(((CustomerJobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerJobRowDeleting != null)) {
                    this.CustomerJobRowDeleting(this, new CustomerJobRowChangeEvent(((CustomerJobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerJobRow(CustomerJobRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerJobDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServiceDataTable : global::System.Data.TypedTableBase<ServiceRow> {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnSummerServices;
            
            private global::System.Data.DataColumn columnFallServices;
            
            private global::System.Data.DataColumn columnWinterServices;
            
            private global::System.Data.DataColumn columnPropMow;
            
            private global::System.Data.DataColumn columnPropFourStep;
            
            private global::System.Data.DataColumn columnPropSeed;
            
            private global::System.Data.DataColumn columnPropFertilize;
            
            private global::System.Data.DataColumn columnPropLime;
            
            private global::System.Data.DataColumn columnPropAeration;
            
            private global::System.Data.DataColumn columnPropertyID;
            
            private global::System.Data.DataColumn columnFourStepMat;
            
            private global::System.Data.DataColumn columnFourStepDate1;
            
            private global::System.Data.DataColumn columnFourStepDate2;
            
            private global::System.Data.DataColumn columnFourStepDate3;
            
            private global::System.Data.DataColumn columnFourStepDate4;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnFourStepCost;
            
            private global::System.Data.DataColumn columnContractorCost;
            
            private global::System.Data.DataColumn columnLeafInstruct;
            
            private global::System.Data.DataColumn columnSpecInstruct;
            
            private global::System.Data.DataColumn columnFourStepInstruct;
            
            private global::System.Data.DataColumn columnGutterInstruct;
            
            private global::System.Data.DataColumn columnSpringServices;
            
            private global::System.Data.DataColumn columnMowType;
            
            private global::System.Data.DataColumn columnFourStepType;
            
            private global::System.Data.DataColumn columnLeafType;
            
            private global::System.Data.DataColumn columnGutterType;
            
            private global::System.Data.DataColumn columnOtherType;
            
            private global::System.Data.DataColumn columnFrequency;
            
            private global::System.Data.DataColumn columnFourStepMat1;
            
            private global::System.Data.DataColumn columnCostB;
            
            private global::System.Data.DataColumn columnCostC;
            
            private global::System.Data.DataColumn columnMaterialCost;
            
            private global::System.Data.DataColumn columnApplicationType;
            
            private global::System.Data.DataColumn columnPruningType;
            
            private global::System.Data.DataColumn columnMulchingType;
            
            private global::System.Data.DataColumn columnCostApp;
            
            private global::System.Data.DataColumn columnCostPruning;
            
            private global::System.Data.DataColumn columnCostMulching;
            
            private global::System.Data.DataColumn columnCostOther;
            
            private global::System.Data.DataColumn columnCCostB;
            
            private global::System.Data.DataColumn columnCCostC;
            
            private global::System.Data.DataColumn columnCCostApp;
            
            private global::System.Data.DataColumn columnCCostPruning;
            
            private global::System.Data.DataColumn columnCCostMulching;
            
            private global::System.Data.DataColumn columnCCostOther;
            
            private global::System.Data.DataColumn columnAppInstruct;
            
            private global::System.Data.DataColumn columnPruneInstruct;
            
            private global::System.Data.DataColumn columnMulchInstruct;
            
            private global::System.Data.DataColumn columnOtherInstruct;
            
            private global::System.Data.DataColumn columnMulchingType2;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnFourStepType1;
            
            private global::System.Data.DataColumn columnFourStepType2;
            
            private global::System.Data.DataColumn columnFourStepType3;
            
            private global::System.Data.DataColumn columnFourStepType4;
            
            private global::System.Data.DataColumn columnYCost;
            
            private global::System.Data.DataColumn columnYCostB;
            
            private global::System.Data.DataColumn columnYCostC;
            
            private global::System.Data.DataColumn columnYCostApp;
            
            private global::System.Data.DataColumn columnYCostPruning;
            
            private global::System.Data.DataColumn columnYCostMulching;
            
            private global::System.Data.DataColumn columnYCostOther;
            
            private global::System.Data.DataColumn columnYCost4Step;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceDataTable() {
                this.TableName = "Service";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServiceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServiceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SummerServicesColumn {
                get {
                    return this.columnSummerServices;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FallServicesColumn {
                get {
                    return this.columnFallServices;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WinterServicesColumn {
                get {
                    return this.columnWinterServices;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropMowColumn {
                get {
                    return this.columnPropMow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropFourStepColumn {
                get {
                    return this.columnPropFourStep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropSeedColumn {
                get {
                    return this.columnPropSeed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropFertilizeColumn {
                get {
                    return this.columnPropFertilize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropLimeColumn {
                get {
                    return this.columnPropLime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropAerationColumn {
                get {
                    return this.columnPropAeration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyIDColumn {
                get {
                    return this.columnPropertyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepMatColumn {
                get {
                    return this.columnFourStepMat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepDate1Column {
                get {
                    return this.columnFourStepDate1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepDate2Column {
                get {
                    return this.columnFourStepDate2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepDate3Column {
                get {
                    return this.columnFourStepDate3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepDate4Column {
                get {
                    return this.columnFourStepDate4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepCostColumn {
                get {
                    return this.columnFourStepCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContractorCostColumn {
                get {
                    return this.columnContractorCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeafInstructColumn {
                get {
                    return this.columnLeafInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecInstructColumn {
                get {
                    return this.columnSpecInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepInstructColumn {
                get {
                    return this.columnFourStepInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GutterInstructColumn {
                get {
                    return this.columnGutterInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpringServicesColumn {
                get {
                    return this.columnSpringServices;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MowTypeColumn {
                get {
                    return this.columnMowType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepTypeColumn {
                get {
                    return this.columnFourStepType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeafTypeColumn {
                get {
                    return this.columnLeafType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GutterTypeColumn {
                get {
                    return this.columnGutterType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherTypeColumn {
                get {
                    return this.columnOtherType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepMat1Column {
                get {
                    return this.columnFourStepMat1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostBColumn {
                get {
                    return this.columnCostB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCColumn {
                get {
                    return this.columnCostC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialCostColumn {
                get {
                    return this.columnMaterialCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplicationTypeColumn {
                get {
                    return this.columnApplicationType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PruningTypeColumn {
                get {
                    return this.columnPruningType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MulchingTypeColumn {
                get {
                    return this.columnMulchingType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostAppColumn {
                get {
                    return this.columnCostApp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostPruningColumn {
                get {
                    return this.columnCostPruning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostMulchingColumn {
                get {
                    return this.columnCostMulching;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostOtherColumn {
                get {
                    return this.columnCostOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCostBColumn {
                get {
                    return this.columnCCostB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCostCColumn {
                get {
                    return this.columnCCostC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCostAppColumn {
                get {
                    return this.columnCCostApp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCostPruningColumn {
                get {
                    return this.columnCCostPruning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCostMulchingColumn {
                get {
                    return this.columnCCostMulching;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCostOtherColumn {
                get {
                    return this.columnCCostOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppInstructColumn {
                get {
                    return this.columnAppInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PruneInstructColumn {
                get {
                    return this.columnPruneInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MulchInstructColumn {
                get {
                    return this.columnMulchInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherInstructColumn {
                get {
                    return this.columnOtherInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MulchingType2Column {
                get {
                    return this.columnMulchingType2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepType1Column {
                get {
                    return this.columnFourStepType1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepType2Column {
                get {
                    return this.columnFourStepType2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepType3Column {
                get {
                    return this.columnFourStepType3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepType4Column {
                get {
                    return this.columnFourStepType4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostColumn {
                get {
                    return this.columnYCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostBColumn {
                get {
                    return this.columnYCostB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostCColumn {
                get {
                    return this.columnYCostC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostAppColumn {
                get {
                    return this.columnYCostApp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostPruningColumn {
                get {
                    return this.columnYCostPruning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostMulchingColumn {
                get {
                    return this.columnYCostMulching;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostOtherColumn {
                get {
                    return this.columnYCostOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCost4StepColumn {
                get {
                    return this.columnYCost4Step;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRow this[int index] {
                get {
                    return ((ServiceRow)(this.Rows[index]));
                }
            }
            
            public event ServiceRowChangeEventHandler ServiceRowChanging;
            
            public event ServiceRowChangeEventHandler ServiceRowChanged;
            
            public event ServiceRowChangeEventHandler ServiceRowDeleting;
            
            public event ServiceRowChangeEventHandler ServiceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServiceRow(ServiceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRow AddServiceRow(
                        System.DateTime Date, 
                        string SummerServices, 
                        string FallServices, 
                        string WinterServices, 
                        decimal PropMow, 
                        decimal PropFourStep, 
                        decimal PropSeed, 
                        decimal PropFertilize, 
                        decimal PropLime, 
                        decimal PropAeration, 
                        PropertyRow parentPropertyRowByFK_Service_Property, 
                        int FourStepMat, 
                        System.DateTime FourStepDate1, 
                        System.DateTime FourStepDate2, 
                        System.DateTime FourStepDate3, 
                        System.DateTime FourStepDate4, 
                        decimal Cost, 
                        decimal FourStepCost, 
                        decimal ContractorCost, 
                        string LeafInstruct, 
                        string SpecInstruct, 
                        string FourStepInstruct, 
                        string GutterInstruct, 
                        string SpringServices, 
                        bool MowType, 
                        bool FourStepType, 
                        bool LeafType, 
                        bool GutterType, 
                        bool OtherType, 
                        string Frequency, 
                        float FourStepMat1, 
                        decimal CostB, 
                        decimal CostC, 
                        decimal MaterialCost, 
                        bool ApplicationType, 
                        bool PruningType, 
                        bool MulchingType, 
                        decimal CostApp, 
                        decimal CostPruning, 
                        decimal CostMulching, 
                        decimal CostOther, 
                        decimal CCostB, 
                        decimal CCostC, 
                        decimal CCostApp, 
                        decimal CCostPruning, 
                        decimal CCostMulching, 
                        decimal CCostOther, 
                        string AppInstruct, 
                        string PruneInstruct, 
                        string MulchInstruct, 
                        string OtherInstruct, 
                        bool MulchingType2, 
                        string Notes, 
                        bool FourStepType1, 
                        bool FourStepType2, 
                        bool FourStepType3, 
                        bool FourStepType4, 
                        int YCost, 
                        int YCostB, 
                        int YCostC, 
                        int YCostApp, 
                        int YCostPruning, 
                        int YCostMulching, 
                        int YCostOther, 
                        int YCost4Step) {
                ServiceRow rowServiceRow = ((ServiceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Date,
                        SummerServices,
                        FallServices,
                        WinterServices,
                        PropMow,
                        PropFourStep,
                        PropSeed,
                        PropFertilize,
                        PropLime,
                        PropAeration,
                        null,
                        FourStepMat,
                        FourStepDate1,
                        FourStepDate2,
                        FourStepDate3,
                        FourStepDate4,
                        Cost,
                        FourStepCost,
                        ContractorCost,
                        LeafInstruct,
                        SpecInstruct,
                        FourStepInstruct,
                        GutterInstruct,
                        SpringServices,
                        MowType,
                        FourStepType,
                        LeafType,
                        GutterType,
                        OtherType,
                        Frequency,
                        FourStepMat1,
                        CostB,
                        CostC,
                        MaterialCost,
                        ApplicationType,
                        PruningType,
                        MulchingType,
                        CostApp,
                        CostPruning,
                        CostMulching,
                        CostOther,
                        CCostB,
                        CCostC,
                        CCostApp,
                        CCostPruning,
                        CCostMulching,
                        CCostOther,
                        AppInstruct,
                        PruneInstruct,
                        MulchInstruct,
                        OtherInstruct,
                        MulchingType2,
                        Notes,
                        FourStepType1,
                        FourStepType2,
                        FourStepType3,
                        FourStepType4,
                        YCost,
                        YCostB,
                        YCostC,
                        YCostApp,
                        YCostPruning,
                        YCostMulching,
                        YCostOther,
                        YCost4Step};
                if ((parentPropertyRowByFK_Service_Property != null)) {
                    columnValuesArray[11] = parentPropertyRowByFK_Service_Property[0];
                }
                rowServiceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowServiceRow);
                return rowServiceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRow FindByServiceID(int ServiceID) {
                return ((ServiceRow)(this.Rows.Find(new object[] {
                            ServiceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ServiceDataTable cln = ((ServiceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ServiceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnDate = base.Columns["Date"];
                this.columnSummerServices = base.Columns["SummerServices"];
                this.columnFallServices = base.Columns["FallServices"];
                this.columnWinterServices = base.Columns["WinterServices"];
                this.columnPropMow = base.Columns["PropMow"];
                this.columnPropFourStep = base.Columns["PropFourStep"];
                this.columnPropSeed = base.Columns["PropSeed"];
                this.columnPropFertilize = base.Columns["PropFertilize"];
                this.columnPropLime = base.Columns["PropLime"];
                this.columnPropAeration = base.Columns["PropAeration"];
                this.columnPropertyID = base.Columns["PropertyID"];
                this.columnFourStepMat = base.Columns["FourStepMat"];
                this.columnFourStepDate1 = base.Columns["FourStepDate1"];
                this.columnFourStepDate2 = base.Columns["FourStepDate2"];
                this.columnFourStepDate3 = base.Columns["FourStepDate3"];
                this.columnFourStepDate4 = base.Columns["FourStepDate4"];
                this.columnCost = base.Columns["Cost"];
                this.columnFourStepCost = base.Columns["FourStepCost"];
                this.columnContractorCost = base.Columns["ContractorCost"];
                this.columnLeafInstruct = base.Columns["LeafInstruct"];
                this.columnSpecInstruct = base.Columns["SpecInstruct"];
                this.columnFourStepInstruct = base.Columns["FourStepInstruct"];
                this.columnGutterInstruct = base.Columns["GutterInstruct"];
                this.columnSpringServices = base.Columns["SpringServices"];
                this.columnMowType = base.Columns["MowType"];
                this.columnFourStepType = base.Columns["FourStepType"];
                this.columnLeafType = base.Columns["LeafType"];
                this.columnGutterType = base.Columns["GutterType"];
                this.columnOtherType = base.Columns["OtherType"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnFourStepMat1 = base.Columns["FourStepMat1"];
                this.columnCostB = base.Columns["CostB"];
                this.columnCostC = base.Columns["CostC"];
                this.columnMaterialCost = base.Columns["MaterialCost"];
                this.columnApplicationType = base.Columns["ApplicationType"];
                this.columnPruningType = base.Columns["PruningType"];
                this.columnMulchingType = base.Columns["MulchingType"];
                this.columnCostApp = base.Columns["CostApp"];
                this.columnCostPruning = base.Columns["CostPruning"];
                this.columnCostMulching = base.Columns["CostMulching"];
                this.columnCostOther = base.Columns["CostOther"];
                this.columnCCostB = base.Columns["CCostB"];
                this.columnCCostC = base.Columns["CCostC"];
                this.columnCCostApp = base.Columns["CCostApp"];
                this.columnCCostPruning = base.Columns["CCostPruning"];
                this.columnCCostMulching = base.Columns["CCostMulching"];
                this.columnCCostOther = base.Columns["CCostOther"];
                this.columnAppInstruct = base.Columns["AppInstruct"];
                this.columnPruneInstruct = base.Columns["PruneInstruct"];
                this.columnMulchInstruct = base.Columns["MulchInstruct"];
                this.columnOtherInstruct = base.Columns["OtherInstruct"];
                this.columnMulchingType2 = base.Columns["MulchingType2"];
                this.columnNotes = base.Columns["Notes"];
                this.columnFourStepType1 = base.Columns["FourStepType1"];
                this.columnFourStepType2 = base.Columns["FourStepType2"];
                this.columnFourStepType3 = base.Columns["FourStepType3"];
                this.columnFourStepType4 = base.Columns["FourStepType4"];
                this.columnYCost = base.Columns["YCost"];
                this.columnYCostB = base.Columns["YCostB"];
                this.columnYCostC = base.Columns["YCostC"];
                this.columnYCostApp = base.Columns["YCostApp"];
                this.columnYCostPruning = base.Columns["YCostPruning"];
                this.columnYCostMulching = base.Columns["YCostMulching"];
                this.columnYCostOther = base.Columns["YCostOther"];
                this.columnYCost4Step = base.Columns["YCost4Step"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnSummerServices = new global::System.Data.DataColumn("SummerServices", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSummerServices);
                this.columnFallServices = new global::System.Data.DataColumn("FallServices", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFallServices);
                this.columnWinterServices = new global::System.Data.DataColumn("WinterServices", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWinterServices);
                this.columnPropMow = new global::System.Data.DataColumn("PropMow", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropMow);
                this.columnPropFourStep = new global::System.Data.DataColumn("PropFourStep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropFourStep);
                this.columnPropSeed = new global::System.Data.DataColumn("PropSeed", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropSeed);
                this.columnPropFertilize = new global::System.Data.DataColumn("PropFertilize", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropFertilize);
                this.columnPropLime = new global::System.Data.DataColumn("PropLime", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropLime);
                this.columnPropAeration = new global::System.Data.DataColumn("PropAeration", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropAeration);
                this.columnPropertyID = new global::System.Data.DataColumn("PropertyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyID);
                this.columnFourStepMat = new global::System.Data.DataColumn("FourStepMat", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepMat);
                this.columnFourStepDate1 = new global::System.Data.DataColumn("FourStepDate1", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepDate1);
                this.columnFourStepDate2 = new global::System.Data.DataColumn("FourStepDate2", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepDate2);
                this.columnFourStepDate3 = new global::System.Data.DataColumn("FourStepDate3", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepDate3);
                this.columnFourStepDate4 = new global::System.Data.DataColumn("FourStepDate4", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepDate4);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnFourStepCost = new global::System.Data.DataColumn("FourStepCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepCost);
                this.columnContractorCost = new global::System.Data.DataColumn("ContractorCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractorCost);
                this.columnLeafInstruct = new global::System.Data.DataColumn("LeafInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeafInstruct);
                this.columnSpecInstruct = new global::System.Data.DataColumn("SpecInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecInstruct);
                this.columnFourStepInstruct = new global::System.Data.DataColumn("FourStepInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepInstruct);
                this.columnGutterInstruct = new global::System.Data.DataColumn("GutterInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGutterInstruct);
                this.columnSpringServices = new global::System.Data.DataColumn("SpringServices", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpringServices);
                this.columnMowType = new global::System.Data.DataColumn("MowType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMowType);
                this.columnFourStepType = new global::System.Data.DataColumn("FourStepType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepType);
                this.columnLeafType = new global::System.Data.DataColumn("LeafType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeafType);
                this.columnGutterType = new global::System.Data.DataColumn("GutterType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGutterType);
                this.columnOtherType = new global::System.Data.DataColumn("OtherType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherType);
                this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequency);
                this.columnFourStepMat1 = new global::System.Data.DataColumn("FourStepMat1", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepMat1);
                this.columnCostB = new global::System.Data.DataColumn("CostB", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostB);
                this.columnCostC = new global::System.Data.DataColumn("CostC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostC);
                this.columnMaterialCost = new global::System.Data.DataColumn("MaterialCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialCost);
                this.columnApplicationType = new global::System.Data.DataColumn("ApplicationType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplicationType);
                this.columnPruningType = new global::System.Data.DataColumn("PruningType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPruningType);
                this.columnMulchingType = new global::System.Data.DataColumn("MulchingType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMulchingType);
                this.columnCostApp = new global::System.Data.DataColumn("CostApp", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostApp);
                this.columnCostPruning = new global::System.Data.DataColumn("CostPruning", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostPruning);
                this.columnCostMulching = new global::System.Data.DataColumn("CostMulching", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostMulching);
                this.columnCostOther = new global::System.Data.DataColumn("CostOther", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostOther);
                this.columnCCostB = new global::System.Data.DataColumn("CCostB", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCostB);
                this.columnCCostC = new global::System.Data.DataColumn("CCostC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCostC);
                this.columnCCostApp = new global::System.Data.DataColumn("CCostApp", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCostApp);
                this.columnCCostPruning = new global::System.Data.DataColumn("CCostPruning", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCostPruning);
                this.columnCCostMulching = new global::System.Data.DataColumn("CCostMulching", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCostMulching);
                this.columnCCostOther = new global::System.Data.DataColumn("CCostOther", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCostOther);
                this.columnAppInstruct = new global::System.Data.DataColumn("AppInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppInstruct);
                this.columnPruneInstruct = new global::System.Data.DataColumn("PruneInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPruneInstruct);
                this.columnMulchInstruct = new global::System.Data.DataColumn("MulchInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMulchInstruct);
                this.columnOtherInstruct = new global::System.Data.DataColumn("OtherInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherInstruct);
                this.columnMulchingType2 = new global::System.Data.DataColumn("MulchingType2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMulchingType2);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnFourStepType1 = new global::System.Data.DataColumn("FourStepType1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepType1);
                this.columnFourStepType2 = new global::System.Data.DataColumn("FourStepType2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepType2);
                this.columnFourStepType3 = new global::System.Data.DataColumn("FourStepType3", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepType3);
                this.columnFourStepType4 = new global::System.Data.DataColumn("FourStepType4", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepType4);
                this.columnYCost = new global::System.Data.DataColumn("YCost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCost);
                this.columnYCostB = new global::System.Data.DataColumn("YCostB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCostB);
                this.columnYCostC = new global::System.Data.DataColumn("YCostC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCostC);
                this.columnYCostApp = new global::System.Data.DataColumn("YCostApp", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCostApp);
                this.columnYCostPruning = new global::System.Data.DataColumn("YCostPruning", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCostPruning);
                this.columnYCostMulching = new global::System.Data.DataColumn("YCostMulching", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCostMulching);
                this.columnYCostOther = new global::System.Data.DataColumn("YCostOther", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCostOther);
                this.columnYCost4Step = new global::System.Data.DataColumn("YCost4Step", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCost4Step);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID}, true));
                this.columnServiceID.AutoIncrement = true;
                this.columnServiceID.AutoIncrementSeed = -1;
                this.columnServiceID.AutoIncrementStep = -1;
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.ReadOnly = true;
                this.columnServiceID.Unique = true;
                this.columnSummerServices.MaxLength = 50;
                this.columnFallServices.MaxLength = 50;
                this.columnWinterServices.MaxLength = 50;
                this.columnLeafInstruct.MaxLength = 1000;
                this.columnSpecInstruct.MaxLength = 1000;
                this.columnFourStepInstruct.MaxLength = 1000;
                this.columnGutterInstruct.MaxLength = 1000;
                this.columnSpringServices.MaxLength = 50;
                this.columnFrequency.MaxLength = 25;
                this.columnFourStepMat1.Caption = "FourStepMat";
                this.columnMaterialCost.DefaultValue = ((decimal)(0m));
                this.columnAppInstruct.MaxLength = 1000;
                this.columnPruneInstruct.MaxLength = 1000;
                this.columnMulchInstruct.MaxLength = 1000;
                this.columnOtherInstruct.MaxLength = 1000;
                this.columnNotes.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRow NewServiceRow() {
                return ((ServiceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ServiceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ServiceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServiceRowChanged != null)) {
                    this.ServiceRowChanged(this, new ServiceRowChangeEvent(((ServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServiceRowChanging != null)) {
                    this.ServiceRowChanging(this, new ServiceRowChangeEvent(((ServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServiceRowDeleted != null)) {
                    this.ServiceRowDeleted(this, new ServiceRowChangeEvent(((ServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServiceRowDeleting != null)) {
                    this.ServiceRowDeleting(this, new ServiceRowChangeEvent(((ServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServiceRow(ServiceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServiceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RouteDataTable : global::System.Data.TypedTableBase<RouteRow> {
            
            private global::System.Data.DataColumn columnRouteID;
            
            private global::System.Data.DataColumn columnRouteOrder;
            
            private global::System.Data.DataColumn columnRouteName;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnPropertyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteDataTable() {
                this.TableName = "Route";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RouteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RouteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteIDColumn {
                get {
                    return this.columnRouteID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteOrderColumn {
                get {
                    return this.columnRouteOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteNameColumn {
                get {
                    return this.columnRouteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyIDColumn {
                get {
                    return this.columnPropertyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteRow this[int index] {
                get {
                    return ((RouteRow)(this.Rows[index]));
                }
            }
            
            public event RouteRowChangeEventHandler RouteRowChanging;
            
            public event RouteRowChangeEventHandler RouteRowChanged;
            
            public event RouteRowChangeEventHandler RouteRowDeleting;
            
            public event RouteRowChangeEventHandler RouteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRouteRow(RouteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteRow AddRouteRow(int RouteID, long RouteOrder, string RouteName, string Notes, ServiceRow parentServiceRowByFK_Route_Service1) {
                RouteRow rowRouteRow = ((RouteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RouteID,
                        RouteOrder,
                        RouteName,
                        Notes,
                        null};
                if ((parentServiceRowByFK_Route_Service1 != null)) {
                    columnValuesArray[4] = parentServiceRowByFK_Route_Service1[0];
                }
                rowRouteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRouteRow);
                return rowRouteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteRow FindByRouteID(int RouteID) {
                return ((RouteRow)(this.Rows.Find(new object[] {
                            RouteID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RouteDataTable cln = ((RouteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RouteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRouteID = base.Columns["RouteID"];
                this.columnRouteOrder = base.Columns["RouteOrder"];
                this.columnRouteName = base.Columns["RouteName"];
                this.columnNotes = base.Columns["Notes"];
                this.columnPropertyID = base.Columns["PropertyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRouteID = new global::System.Data.DataColumn("RouteID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRouteID);
                this.columnRouteOrder = new global::System.Data.DataColumn("RouteOrder", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRouteOrder);
                this.columnRouteName = new global::System.Data.DataColumn("RouteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRouteName);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnPropertyID = new global::System.Data.DataColumn("PropertyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRouteID}, true));
                this.columnRouteID.AllowDBNull = false;
                this.columnRouteID.Unique = true;
                this.columnRouteName.MaxLength = 50;
                this.columnNotes.MaxLength = 1000;
                this.columnPropertyID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteRow NewRouteRow() {
                return ((RouteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RouteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RouteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RouteRowChanged != null)) {
                    this.RouteRowChanged(this, new RouteRowChangeEvent(((RouteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RouteRowChanging != null)) {
                    this.RouteRowChanging(this, new RouteRowChangeEvent(((RouteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RouteRowDeleted != null)) {
                    this.RouteRowDeleted(this, new RouteRowChangeEvent(((RouteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RouteRowDeleting != null)) {
                    this.RouteRowDeleting(this, new RouteRowChangeEvent(((RouteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRouteRow(RouteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RouteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustPropertyDataTable : global::System.Data.TypedTableBase<CustPropertyRow> {
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnSubdivision;
            
            private global::System.Data.DataColumn columnPropertyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyDataTable() {
                this.TableName = "CustProperty";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustPropertyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustPropertyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubdivisionColumn {
                get {
                    return this.columnSubdivision;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyIDColumn {
                get {
                    return this.columnPropertyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyRow this[int index] {
                get {
                    return ((CustPropertyRow)(this.Rows[index]));
                }
            }
            
            public event CustPropertyRowChangeEventHandler CustPropertyRowChanging;
            
            public event CustPropertyRowChangeEventHandler CustPropertyRowChanged;
            
            public event CustPropertyRowChangeEventHandler CustPropertyRowDeleting;
            
            public event CustPropertyRowChangeEventHandler CustPropertyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustPropertyRow(CustPropertyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyRow AddCustPropertyRow(string LastName, string FirstName, string Description, string Address, string City, string State, string Zip, string Subdivision) {
                CustPropertyRow rowCustPropertyRow = ((CustPropertyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LastName,
                        FirstName,
                        Description,
                        Address,
                        City,
                        State,
                        Zip,
                        Subdivision,
                        null};
                rowCustPropertyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustPropertyRow);
                return rowCustPropertyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyRow FindByPropertyID(int PropertyID) {
                return ((CustPropertyRow)(this.Rows.Find(new object[] {
                            PropertyID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustPropertyDataTable cln = ((CustPropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustPropertyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnDescription = base.Columns["Description"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnSubdivision = base.Columns["Subdivision"];
                this.columnPropertyID = base.Columns["PropertyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnSubdivision = new global::System.Data.DataColumn("Subdivision", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubdivision);
                this.columnPropertyID = new global::System.Data.DataColumn("PropertyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPropertyID}, true));
                this.columnLastName.AllowDBNull = false;
                this.columnLastName.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnDescription.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnSubdivision.MaxLength = 50;
                this.columnPropertyID.AutoIncrement = true;
                this.columnPropertyID.AutoIncrementSeed = -1;
                this.columnPropertyID.AutoIncrementStep = -1;
                this.columnPropertyID.AllowDBNull = false;
                this.columnPropertyID.ReadOnly = true;
                this.columnPropertyID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyRow NewCustPropertyRow() {
                return ((CustPropertyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustPropertyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustPropertyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustPropertyRowChanged != null)) {
                    this.CustPropertyRowChanged(this, new CustPropertyRowChangeEvent(((CustPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustPropertyRowChanging != null)) {
                    this.CustPropertyRowChanging(this, new CustPropertyRowChangeEvent(((CustPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustPropertyRowDeleted != null)) {
                    this.CustPropertyRowDeleted(this, new CustPropertyRowChangeEvent(((CustPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustPropertyRowDeleting != null)) {
                    this.CustPropertyRowDeleting(this, new CustPropertyRowChangeEvent(((CustPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustPropertyRow(CustPropertyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustPropertyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CrewDataTable : global::System.Data.TypedTableBase<CrewRow> {
            
            private global::System.Data.DataColumn columnEmployeeId;
            
            private global::System.Data.DataColumn columnCustomerJobID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewDataTable() {
                this.TableName = "Crew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CrewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CrewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIdColumn {
                get {
                    return this.columnEmployeeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerJobIDColumn {
                get {
                    return this.columnCustomerJobID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewRow this[int index] {
                get {
                    return ((CrewRow)(this.Rows[index]));
                }
            }
            
            public event CrewRowChangeEventHandler CrewRowChanging;
            
            public event CrewRowChangeEventHandler CrewRowChanged;
            
            public event CrewRowChangeEventHandler CrewRowDeleting;
            
            public event CrewRowChangeEventHandler CrewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCrewRow(CrewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewRow AddCrewRow(EmployeeRow parentEmployeeRowByFK_Crew_Employee, int CustomerJobID) {
                CrewRow rowCrewRow = ((CrewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CustomerJobID};
                if ((parentEmployeeRowByFK_Crew_Employee != null)) {
                    columnValuesArray[0] = parentEmployeeRowByFK_Crew_Employee[0];
                }
                rowCrewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCrewRow);
                return rowCrewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CrewDataTable cln = ((CrewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CrewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeId = base.Columns["EmployeeId"];
                this.columnCustomerJobID = base.Columns["CustomerJobID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeId = new global::System.Data.DataColumn("EmployeeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeId);
                this.columnCustomerJobID = new global::System.Data.DataColumn("CustomerJobID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerJobID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewRow NewCrewRow() {
                return ((CrewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CrewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CrewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CrewRowChanged != null)) {
                    this.CrewRowChanged(this, new CrewRowChangeEvent(((CrewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CrewRowChanging != null)) {
                    this.CrewRowChanging(this, new CrewRowChangeEvent(((CrewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CrewRowDeleted != null)) {
                    this.CrewRowDeleted(this, new CrewRowChangeEvent(((CrewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CrewRowDeleting != null)) {
                    this.CrewRowDeleting(this, new CrewRowChangeEvent(((CrewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCrewRow(CrewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CrewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VendorDataTable : global::System.Data.TypedTableBase<VendorRow> {
            
            private global::System.Data.DataColumn columnVendorID;
            
            private global::System.Data.DataColumn columnVendorName;
            
            private global::System.Data.DataColumn columnContactName;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnPhoneNumber;
            
            private global::System.Data.DataColumn columnFaxNumber;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnWebsite;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorDataTable() {
                this.TableName = "Vendor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VendorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VendorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorIDColumn {
                get {
                    return this.columnVendorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorNameColumn {
                get {
                    return this.columnVendorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FaxNumberColumn {
                get {
                    return this.columnFaxNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebsiteColumn {
                get {
                    return this.columnWebsite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorRow this[int index] {
                get {
                    return ((VendorRow)(this.Rows[index]));
                }
            }
            
            public event VendorRowChangeEventHandler VendorRowChanging;
            
            public event VendorRowChangeEventHandler VendorRowChanged;
            
            public event VendorRowChangeEventHandler VendorRowDeleting;
            
            public event VendorRowChangeEventHandler VendorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVendorRow(VendorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorRow AddVendorRow(string VendorName, string ContactName, string Address, string City, string State, string Zip, string PhoneNumber, string FaxNumber, string Email, string Website, string Notes, bool Active) {
                VendorRow rowVendorRow = ((VendorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        VendorName,
                        ContactName,
                        Address,
                        City,
                        State,
                        Zip,
                        PhoneNumber,
                        FaxNumber,
                        Email,
                        Website,
                        Notes,
                        Active};
                rowVendorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVendorRow);
                return rowVendorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorRow FindByVendorID(int VendorID) {
                return ((VendorRow)(this.Rows.Find(new object[] {
                            VendorID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VendorDataTable cln = ((VendorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VendorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVendorID = base.Columns["VendorID"];
                this.columnVendorName = base.Columns["VendorName"];
                this.columnContactName = base.Columns["ContactName"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnPhoneNumber = base.Columns["PhoneNumber"];
                this.columnFaxNumber = base.Columns["FaxNumber"];
                this.columnEmail = base.Columns["Email"];
                this.columnWebsite = base.Columns["Website"];
                this.columnNotes = base.Columns["Notes"];
                this.columnActive = base.Columns["Active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVendorID = new global::System.Data.DataColumn("VendorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorID);
                this.columnVendorName = new global::System.Data.DataColumn("VendorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorName);
                this.columnContactName = new global::System.Data.DataColumn("ContactName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactName);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnPhoneNumber = new global::System.Data.DataColumn("PhoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneNumber);
                this.columnFaxNumber = new global::System.Data.DataColumn("FaxNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFaxNumber);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnWebsite = new global::System.Data.DataColumn("Website", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebsite);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnVendorID}, true));
                this.columnVendorID.AutoIncrement = true;
                this.columnVendorID.AutoIncrementSeed = -1;
                this.columnVendorID.AutoIncrementStep = -1;
                this.columnVendorID.AllowDBNull = false;
                this.columnVendorID.ReadOnly = true;
                this.columnVendorID.Unique = true;
                this.columnVendorName.MaxLength = 50;
                this.columnContactName.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnPhoneNumber.MaxLength = 50;
                this.columnFaxNumber.MaxLength = 50;
                this.columnEmail.MaxLength = 50;
                this.columnWebsite.MaxLength = 50;
                this.columnNotes.MaxLength = 1000;
                this.columnActive.AllowDBNull = false;
                this.columnActive.DefaultValue = ((bool)(true));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorRow NewVendorRow() {
                return ((VendorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VendorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VendorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VendorRowChanged != null)) {
                    this.VendorRowChanged(this, new VendorRowChangeEvent(((VendorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VendorRowChanging != null)) {
                    this.VendorRowChanging(this, new VendorRowChangeEvent(((VendorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VendorRowDeleted != null)) {
                    this.VendorRowDeleted(this, new VendorRowChangeEvent(((VendorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VendorRowDeleting != null)) {
                    this.VendorRowDeleting(this, new VendorRowChangeEvent(((VendorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVendorRow(VendorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VendorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PropServiceDataTable : global::System.Data.TypedTableBase<PropServiceRow> {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnPropertyID;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnMowType;
            
            private global::System.Data.DataColumn columnFourStepType;
            
            private global::System.Data.DataColumn columnLeafType;
            
            private global::System.Data.DataColumn columnGutterType;
            
            private global::System.Data.DataColumn columnOtherType;
            
            private global::System.Data.DataColumn columnFrequency;
            
            private global::System.Data.DataColumn columnSpringServices;
            
            private global::System.Data.DataColumn columnSummerServices;
            
            private global::System.Data.DataColumn columnFallServices;
            
            private global::System.Data.DataColumn columnWinterServices;
            
            private global::System.Data.DataColumn columnFourStepMat;
            
            private global::System.Data.DataColumn columnFourStepDate1;
            
            private global::System.Data.DataColumn columnFourStepDate2;
            
            private global::System.Data.DataColumn columnFourStepDate3;
            
            private global::System.Data.DataColumn columnFourStepDate4;
            
            private global::System.Data.DataColumn columnPropMow;
            
            private global::System.Data.DataColumn columnPropFourStep;
            
            private global::System.Data.DataColumn columnPropSeed;
            
            private global::System.Data.DataColumn columnPropFertilize;
            
            private global::System.Data.DataColumn columnPropLime;
            
            private global::System.Data.DataColumn columnPropAeration;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnFourStepCost;
            
            private global::System.Data.DataColumn columnContractorCost;
            
            private global::System.Data.DataColumn columnLeafInstruct;
            
            private global::System.Data.DataColumn columnSpecInstruct;
            
            private global::System.Data.DataColumn columnFourStepInstruct;
            
            private global::System.Data.DataColumn columnGutterInstruct;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnPhone;
            
            private global::System.Data.DataColumn columnSubdivision;
            
            private global::System.Data.DataColumn columnGroupType;
            
            private global::System.Data.DataColumn columnCostB;
            
            private global::System.Data.DataColumn columnCostC;
            
            private global::System.Data.DataColumn columnMaterialCost;
            
            private global::System.Data.DataColumn columnApplicationType;
            
            private global::System.Data.DataColumn columnPruningType;
            
            private global::System.Data.DataColumn columnMulchingType;
            
            private global::System.Data.DataColumn columnCostApp;
            
            private global::System.Data.DataColumn columnCostPruning;
            
            private global::System.Data.DataColumn columnCostMulching;
            
            private global::System.Data.DataColumn columnCostOther;
            
            private global::System.Data.DataColumn columnCCostB;
            
            private global::System.Data.DataColumn columnCCostC;
            
            private global::System.Data.DataColumn columnCCostApp;
            
            private global::System.Data.DataColumn columnCCostPruning;
            
            private global::System.Data.DataColumn columnCCostMulching;
            
            private global::System.Data.DataColumn columnCCostOther;
            
            private global::System.Data.DataColumn columnAppInstruct;
            
            private global::System.Data.DataColumn columnPruneInstruct;
            
            private global::System.Data.DataColumn columnMulchInstruct;
            
            private global::System.Data.DataColumn columnOtherInstruct;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnGutterRegion;
            
            private global::System.Data.DataColumn columnFourStepType1;
            
            private global::System.Data.DataColumn columnFourStepType2;
            
            private global::System.Data.DataColumn columnFourStepType3;
            
            private global::System.Data.DataColumn columnFourStepType4;
            
            private global::System.Data.DataColumn columnYCost;
            
            private global::System.Data.DataColumn columnYCostB;
            
            private global::System.Data.DataColumn columnYCostC;
            
            private global::System.Data.DataColumn columnYCostApp;
            
            private global::System.Data.DataColumn columnYCostPruning;
            
            private global::System.Data.DataColumn columnYCostMulching;
            
            private global::System.Data.DataColumn columnYCostOther;
            
            private global::System.Data.DataColumn columnYCost4Step;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropServiceDataTable() {
                this.TableName = "PropService";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PropServiceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PropServiceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyIDColumn {
                get {
                    return this.columnPropertyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MowTypeColumn {
                get {
                    return this.columnMowType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepTypeColumn {
                get {
                    return this.columnFourStepType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeafTypeColumn {
                get {
                    return this.columnLeafType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GutterTypeColumn {
                get {
                    return this.columnGutterType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherTypeColumn {
                get {
                    return this.columnOtherType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpringServicesColumn {
                get {
                    return this.columnSpringServices;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SummerServicesColumn {
                get {
                    return this.columnSummerServices;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FallServicesColumn {
                get {
                    return this.columnFallServices;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WinterServicesColumn {
                get {
                    return this.columnWinterServices;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepMatColumn {
                get {
                    return this.columnFourStepMat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepDate1Column {
                get {
                    return this.columnFourStepDate1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepDate2Column {
                get {
                    return this.columnFourStepDate2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepDate3Column {
                get {
                    return this.columnFourStepDate3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepDate4Column {
                get {
                    return this.columnFourStepDate4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropMowColumn {
                get {
                    return this.columnPropMow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropFourStepColumn {
                get {
                    return this.columnPropFourStep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropSeedColumn {
                get {
                    return this.columnPropSeed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropFertilizeColumn {
                get {
                    return this.columnPropFertilize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropLimeColumn {
                get {
                    return this.columnPropLime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropAerationColumn {
                get {
                    return this.columnPropAeration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepCostColumn {
                get {
                    return this.columnFourStepCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContractorCostColumn {
                get {
                    return this.columnContractorCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeafInstructColumn {
                get {
                    return this.columnLeafInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecInstructColumn {
                get {
                    return this.columnSpecInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepInstructColumn {
                get {
                    return this.columnFourStepInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GutterInstructColumn {
                get {
                    return this.columnGutterInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubdivisionColumn {
                get {
                    return this.columnSubdivision;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupTypeColumn {
                get {
                    return this.columnGroupType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostBColumn {
                get {
                    return this.columnCostB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCColumn {
                get {
                    return this.columnCostC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialCostColumn {
                get {
                    return this.columnMaterialCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplicationTypeColumn {
                get {
                    return this.columnApplicationType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PruningTypeColumn {
                get {
                    return this.columnPruningType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MulchingTypeColumn {
                get {
                    return this.columnMulchingType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostAppColumn {
                get {
                    return this.columnCostApp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostPruningColumn {
                get {
                    return this.columnCostPruning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostMulchingColumn {
                get {
                    return this.columnCostMulching;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostOtherColumn {
                get {
                    return this.columnCostOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCostBColumn {
                get {
                    return this.columnCCostB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCostCColumn {
                get {
                    return this.columnCCostC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCostAppColumn {
                get {
                    return this.columnCCostApp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCostPruningColumn {
                get {
                    return this.columnCCostPruning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCostMulchingColumn {
                get {
                    return this.columnCCostMulching;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCostOtherColumn {
                get {
                    return this.columnCCostOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppInstructColumn {
                get {
                    return this.columnAppInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PruneInstructColumn {
                get {
                    return this.columnPruneInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MulchInstructColumn {
                get {
                    return this.columnMulchInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherInstructColumn {
                get {
                    return this.columnOtherInstruct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GutterRegionColumn {
                get {
                    return this.columnGutterRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepType1Column {
                get {
                    return this.columnFourStepType1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepType2Column {
                get {
                    return this.columnFourStepType2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepType3Column {
                get {
                    return this.columnFourStepType3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepType4Column {
                get {
                    return this.columnFourStepType4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostColumn {
                get {
                    return this.columnYCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostBColumn {
                get {
                    return this.columnYCostB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostCColumn {
                get {
                    return this.columnYCostC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostAppColumn {
                get {
                    return this.columnYCostApp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostPruningColumn {
                get {
                    return this.columnYCostPruning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostMulchingColumn {
                get {
                    return this.columnYCostMulching;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCostOtherColumn {
                get {
                    return this.columnYCostOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCost4StepColumn {
                get {
                    return this.columnYCost4Step;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropServiceRow this[int index] {
                get {
                    return ((PropServiceRow)(this.Rows[index]));
                }
            }
            
            public event PropServiceRowChangeEventHandler PropServiceRowChanging;
            
            public event PropServiceRowChangeEventHandler PropServiceRowChanged;
            
            public event PropServiceRowChangeEventHandler PropServiceRowDeleting;
            
            public event PropServiceRowChangeEventHandler PropServiceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPropServiceRow(PropServiceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropServiceRow AddPropServiceRow(
                        int PropertyID, 
                        System.DateTime Date, 
                        bool MowType, 
                        bool FourStepType, 
                        bool LeafType, 
                        bool GutterType, 
                        bool OtherType, 
                        string Frequency, 
                        string SpringServices, 
                        string SummerServices, 
                        string FallServices, 
                        string WinterServices, 
                        float FourStepMat, 
                        System.DateTime FourStepDate1, 
                        System.DateTime FourStepDate2, 
                        System.DateTime FourStepDate3, 
                        System.DateTime FourStepDate4, 
                        decimal PropMow, 
                        decimal PropFourStep, 
                        decimal PropSeed, 
                        decimal PropFertilize, 
                        decimal PropLime, 
                        decimal PropAeration, 
                        decimal Cost, 
                        decimal FourStepCost, 
                        decimal ContractorCost, 
                        string LeafInstruct, 
                        string SpecInstruct, 
                        string FourStepInstruct, 
                        string GutterInstruct, 
                        string LastName, 
                        string FirstName, 
                        string Description, 
                        string Address, 
                        string City, 
                        string State, 
                        string Zip, 
                        string Phone, 
                        string Subdivision, 
                        string GroupType, 
                        decimal CostB, 
                        decimal CostC, 
                        decimal MaterialCost, 
                        bool ApplicationType, 
                        bool PruningType, 
                        bool MulchingType, 
                        decimal CostApp, 
                        decimal CostPruning, 
                        decimal CostMulching, 
                        decimal CostOther, 
                        decimal CCostB, 
                        decimal CCostC, 
                        decimal CCostApp, 
                        decimal CCostPruning, 
                        decimal CCostMulching, 
                        decimal CCostOther, 
                        string AppInstruct, 
                        string PruneInstruct, 
                        string MulchInstruct, 
                        string OtherInstruct, 
                        string Notes, 
                        string GutterRegion, 
                        bool FourStepType1, 
                        bool FourStepType2, 
                        bool FourStepType3, 
                        bool FourStepType4, 
                        int YCost, 
                        int YCostB, 
                        int YCostC, 
                        int YCostApp, 
                        int YCostPruning, 
                        int YCostMulching, 
                        int YCostOther, 
                        int YCost4Step) {
                PropServiceRow rowPropServiceRow = ((PropServiceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PropertyID,
                        Date,
                        MowType,
                        FourStepType,
                        LeafType,
                        GutterType,
                        OtherType,
                        Frequency,
                        SpringServices,
                        SummerServices,
                        FallServices,
                        WinterServices,
                        FourStepMat,
                        FourStepDate1,
                        FourStepDate2,
                        FourStepDate3,
                        FourStepDate4,
                        PropMow,
                        PropFourStep,
                        PropSeed,
                        PropFertilize,
                        PropLime,
                        PropAeration,
                        Cost,
                        FourStepCost,
                        ContractorCost,
                        LeafInstruct,
                        SpecInstruct,
                        FourStepInstruct,
                        GutterInstruct,
                        LastName,
                        FirstName,
                        Description,
                        Address,
                        City,
                        State,
                        Zip,
                        Phone,
                        Subdivision,
                        GroupType,
                        CostB,
                        CostC,
                        MaterialCost,
                        ApplicationType,
                        PruningType,
                        MulchingType,
                        CostApp,
                        CostPruning,
                        CostMulching,
                        CostOther,
                        CCostB,
                        CCostC,
                        CCostApp,
                        CCostPruning,
                        CCostMulching,
                        CCostOther,
                        AppInstruct,
                        PruneInstruct,
                        MulchInstruct,
                        OtherInstruct,
                        Notes,
                        GutterRegion,
                        FourStepType1,
                        FourStepType2,
                        FourStepType3,
                        FourStepType4,
                        YCost,
                        YCostB,
                        YCostC,
                        YCostApp,
                        YCostPruning,
                        YCostMulching,
                        YCostOther,
                        YCost4Step};
                rowPropServiceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPropServiceRow);
                return rowPropServiceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropServiceRow FindByServiceID(int ServiceID) {
                return ((PropServiceRow)(this.Rows.Find(new object[] {
                            ServiceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PropServiceDataTable cln = ((PropServiceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PropServiceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnPropertyID = base.Columns["PropertyID"];
                this.columnDate = base.Columns["Date"];
                this.columnMowType = base.Columns["MowType"];
                this.columnFourStepType = base.Columns["FourStepType"];
                this.columnLeafType = base.Columns["LeafType"];
                this.columnGutterType = base.Columns["GutterType"];
                this.columnOtherType = base.Columns["OtherType"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnSpringServices = base.Columns["SpringServices"];
                this.columnSummerServices = base.Columns["SummerServices"];
                this.columnFallServices = base.Columns["FallServices"];
                this.columnWinterServices = base.Columns["WinterServices"];
                this.columnFourStepMat = base.Columns["FourStepMat"];
                this.columnFourStepDate1 = base.Columns["FourStepDate1"];
                this.columnFourStepDate2 = base.Columns["FourStepDate2"];
                this.columnFourStepDate3 = base.Columns["FourStepDate3"];
                this.columnFourStepDate4 = base.Columns["FourStepDate4"];
                this.columnPropMow = base.Columns["PropMow"];
                this.columnPropFourStep = base.Columns["PropFourStep"];
                this.columnPropSeed = base.Columns["PropSeed"];
                this.columnPropFertilize = base.Columns["PropFertilize"];
                this.columnPropLime = base.Columns["PropLime"];
                this.columnPropAeration = base.Columns["PropAeration"];
                this.columnCost = base.Columns["Cost"];
                this.columnFourStepCost = base.Columns["FourStepCost"];
                this.columnContractorCost = base.Columns["ContractorCost"];
                this.columnLeafInstruct = base.Columns["LeafInstruct"];
                this.columnSpecInstruct = base.Columns["SpecInstruct"];
                this.columnFourStepInstruct = base.Columns["FourStepInstruct"];
                this.columnGutterInstruct = base.Columns["GutterInstruct"];
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnDescription = base.Columns["Description"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnPhone = base.Columns["Phone"];
                this.columnSubdivision = base.Columns["Subdivision"];
                this.columnGroupType = base.Columns["GroupType"];
                this.columnCostB = base.Columns["CostB"];
                this.columnCostC = base.Columns["CostC"];
                this.columnMaterialCost = base.Columns["MaterialCost"];
                this.columnApplicationType = base.Columns["ApplicationType"];
                this.columnPruningType = base.Columns["PruningType"];
                this.columnMulchingType = base.Columns["MulchingType"];
                this.columnCostApp = base.Columns["CostApp"];
                this.columnCostPruning = base.Columns["CostPruning"];
                this.columnCostMulching = base.Columns["CostMulching"];
                this.columnCostOther = base.Columns["CostOther"];
                this.columnCCostB = base.Columns["CCostB"];
                this.columnCCostC = base.Columns["CCostC"];
                this.columnCCostApp = base.Columns["CCostApp"];
                this.columnCCostPruning = base.Columns["CCostPruning"];
                this.columnCCostMulching = base.Columns["CCostMulching"];
                this.columnCCostOther = base.Columns["CCostOther"];
                this.columnAppInstruct = base.Columns["AppInstruct"];
                this.columnPruneInstruct = base.Columns["PruneInstruct"];
                this.columnMulchInstruct = base.Columns["MulchInstruct"];
                this.columnOtherInstruct = base.Columns["OtherInstruct"];
                this.columnNotes = base.Columns["Notes"];
                this.columnGutterRegion = base.Columns["GutterRegion"];
                this.columnFourStepType1 = base.Columns["FourStepType1"];
                this.columnFourStepType2 = base.Columns["FourStepType2"];
                this.columnFourStepType3 = base.Columns["FourStepType3"];
                this.columnFourStepType4 = base.Columns["FourStepType4"];
                this.columnYCost = base.Columns["YCost"];
                this.columnYCostB = base.Columns["YCostB"];
                this.columnYCostC = base.Columns["YCostC"];
                this.columnYCostApp = base.Columns["YCostApp"];
                this.columnYCostPruning = base.Columns["YCostPruning"];
                this.columnYCostMulching = base.Columns["YCostMulching"];
                this.columnYCostOther = base.Columns["YCostOther"];
                this.columnYCost4Step = base.Columns["YCost4Step"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnPropertyID = new global::System.Data.DataColumn("PropertyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyID);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnMowType = new global::System.Data.DataColumn("MowType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMowType);
                this.columnFourStepType = new global::System.Data.DataColumn("FourStepType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepType);
                this.columnLeafType = new global::System.Data.DataColumn("LeafType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeafType);
                this.columnGutterType = new global::System.Data.DataColumn("GutterType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGutterType);
                this.columnOtherType = new global::System.Data.DataColumn("OtherType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherType);
                this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequency);
                this.columnSpringServices = new global::System.Data.DataColumn("SpringServices", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpringServices);
                this.columnSummerServices = new global::System.Data.DataColumn("SummerServices", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSummerServices);
                this.columnFallServices = new global::System.Data.DataColumn("FallServices", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFallServices);
                this.columnWinterServices = new global::System.Data.DataColumn("WinterServices", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWinterServices);
                this.columnFourStepMat = new global::System.Data.DataColumn("FourStepMat", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepMat);
                this.columnFourStepDate1 = new global::System.Data.DataColumn("FourStepDate1", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepDate1);
                this.columnFourStepDate2 = new global::System.Data.DataColumn("FourStepDate2", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepDate2);
                this.columnFourStepDate3 = new global::System.Data.DataColumn("FourStepDate3", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepDate3);
                this.columnFourStepDate4 = new global::System.Data.DataColumn("FourStepDate4", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepDate4);
                this.columnPropMow = new global::System.Data.DataColumn("PropMow", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropMow);
                this.columnPropFourStep = new global::System.Data.DataColumn("PropFourStep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropFourStep);
                this.columnPropSeed = new global::System.Data.DataColumn("PropSeed", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropSeed);
                this.columnPropFertilize = new global::System.Data.DataColumn("PropFertilize", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropFertilize);
                this.columnPropLime = new global::System.Data.DataColumn("PropLime", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropLime);
                this.columnPropAeration = new global::System.Data.DataColumn("PropAeration", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropAeration);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnFourStepCost = new global::System.Data.DataColumn("FourStepCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepCost);
                this.columnContractorCost = new global::System.Data.DataColumn("ContractorCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractorCost);
                this.columnLeafInstruct = new global::System.Data.DataColumn("LeafInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeafInstruct);
                this.columnSpecInstruct = new global::System.Data.DataColumn("SpecInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecInstruct);
                this.columnFourStepInstruct = new global::System.Data.DataColumn("FourStepInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepInstruct);
                this.columnGutterInstruct = new global::System.Data.DataColumn("GutterInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGutterInstruct);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnSubdivision = new global::System.Data.DataColumn("Subdivision", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubdivision);
                this.columnGroupType = new global::System.Data.DataColumn("GroupType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupType);
                this.columnCostB = new global::System.Data.DataColumn("CostB", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostB);
                this.columnCostC = new global::System.Data.DataColumn("CostC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostC);
                this.columnMaterialCost = new global::System.Data.DataColumn("MaterialCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialCost);
                this.columnApplicationType = new global::System.Data.DataColumn("ApplicationType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplicationType);
                this.columnPruningType = new global::System.Data.DataColumn("PruningType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPruningType);
                this.columnMulchingType = new global::System.Data.DataColumn("MulchingType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMulchingType);
                this.columnCostApp = new global::System.Data.DataColumn("CostApp", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostApp);
                this.columnCostPruning = new global::System.Data.DataColumn("CostPruning", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostPruning);
                this.columnCostMulching = new global::System.Data.DataColumn("CostMulching", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostMulching);
                this.columnCostOther = new global::System.Data.DataColumn("CostOther", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostOther);
                this.columnCCostB = new global::System.Data.DataColumn("CCostB", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCostB);
                this.columnCCostC = new global::System.Data.DataColumn("CCostC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCostC);
                this.columnCCostApp = new global::System.Data.DataColumn("CCostApp", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCostApp);
                this.columnCCostPruning = new global::System.Data.DataColumn("CCostPruning", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCostPruning);
                this.columnCCostMulching = new global::System.Data.DataColumn("CCostMulching", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCostMulching);
                this.columnCCostOther = new global::System.Data.DataColumn("CCostOther", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCostOther);
                this.columnAppInstruct = new global::System.Data.DataColumn("AppInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppInstruct);
                this.columnPruneInstruct = new global::System.Data.DataColumn("PruneInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPruneInstruct);
                this.columnMulchInstruct = new global::System.Data.DataColumn("MulchInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMulchInstruct);
                this.columnOtherInstruct = new global::System.Data.DataColumn("OtherInstruct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherInstruct);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnGutterRegion = new global::System.Data.DataColumn("GutterRegion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGutterRegion);
                this.columnFourStepType1 = new global::System.Data.DataColumn("FourStepType1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepType1);
                this.columnFourStepType2 = new global::System.Data.DataColumn("FourStepType2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepType2);
                this.columnFourStepType3 = new global::System.Data.DataColumn("FourStepType3", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepType3);
                this.columnFourStepType4 = new global::System.Data.DataColumn("FourStepType4", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepType4);
                this.columnYCost = new global::System.Data.DataColumn("YCost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCost);
                this.columnYCostB = new global::System.Data.DataColumn("YCostB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCostB);
                this.columnYCostC = new global::System.Data.DataColumn("YCostC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCostC);
                this.columnYCostApp = new global::System.Data.DataColumn("YCostApp", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCostApp);
                this.columnYCostPruning = new global::System.Data.DataColumn("YCostPruning", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCostPruning);
                this.columnYCostMulching = new global::System.Data.DataColumn("YCostMulching", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCostMulching);
                this.columnYCostOther = new global::System.Data.DataColumn("YCostOther", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCostOther);
                this.columnYCost4Step = new global::System.Data.DataColumn("YCost4Step", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCost4Step);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID}, true));
                this.columnServiceID.AutoIncrement = true;
                this.columnServiceID.AutoIncrementSeed = -1;
                this.columnServiceID.AutoIncrementStep = -1;
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.ReadOnly = true;
                this.columnServiceID.Unique = true;
                this.columnFrequency.MaxLength = 25;
                this.columnSpringServices.MaxLength = 200;
                this.columnSummerServices.MaxLength = 200;
                this.columnFallServices.MaxLength = 200;
                this.columnWinterServices.MaxLength = 200;
                this.columnLeafInstruct.MaxLength = 1000;
                this.columnSpecInstruct.MaxLength = 1000;
                this.columnFourStepInstruct.MaxLength = 1000;
                this.columnGutterInstruct.MaxLength = 1000;
                this.columnLastName.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnDescription.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnPhone.MaxLength = 50;
                this.columnSubdivision.MaxLength = 50;
                this.columnGroupType.MaxLength = 50;
                this.columnMaterialCost.DefaultValue = ((decimal)(0m));
                this.columnAppInstruct.MaxLength = 1000;
                this.columnPruneInstruct.MaxLength = 1000;
                this.columnMulchInstruct.MaxLength = 1000;
                this.columnOtherInstruct.MaxLength = 1000;
                this.columnNotes.MaxLength = 1000;
                this.columnGutterRegion.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropServiceRow NewPropServiceRow() {
                return ((PropServiceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PropServiceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PropServiceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PropServiceRowChanged != null)) {
                    this.PropServiceRowChanged(this, new PropServiceRowChangeEvent(((PropServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PropServiceRowChanging != null)) {
                    this.PropServiceRowChanging(this, new PropServiceRowChangeEvent(((PropServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PropServiceRowDeleted != null)) {
                    this.PropServiceRowDeleted(this, new PropServiceRowChangeEvent(((PropServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PropServiceRowDeleting != null)) {
                    this.PropServiceRowDeleting(this, new PropServiceRowChangeEvent(((PropServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePropServiceRow(PropServiceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PropServiceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustPropertyJobsDataTable : global::System.Data.TypedTableBase<CustPropertyJobsRow> {
            
            private global::System.Data.DataColumn columnCustomerJobID;
            
            private global::System.Data.DataColumn columnPropertyID;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnRepeat;
            
            private global::System.Data.DataColumn columnFrequency;
            
            private global::System.Data.DataColumn columnIntervalType;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnCostContractor;
            
            private global::System.Data.DataColumn columnCostFourStep;
            
            private global::System.Data.DataColumn columnInstructions;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnManHours;
            
            private global::System.Data.DataColumn columnCompliments;
            
            private global::System.Data.DataColumn columnComplaints;
            
            private global::System.Data.DataColumn columnCustomerID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnPhone;
            
            private global::System.Data.DataColumn columnSubdivision;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnAccountNumber;
            
            private global::System.Data.DataColumn columnCostB;
            
            private global::System.Data.DataColumn columnCostC;
            
            private global::System.Data.DataColumn columnCrewKey;
            
            private global::System.Data.DataColumn columnSelectPrint;
            
            private global::System.Data.DataColumn columnMaterialCost;
            
            private global::System.Data.DataColumn columnRevenue;
            
            private global::System.Data.DataColumn columnQBInvoiceID;
            
            private global::System.Data.DataColumn columnQBItemID;
            
            private global::System.Data.DataColumn columnQBItemIDB;
            
            private global::System.Data.DataColumn columnQBItemIDC;
            
            private global::System.Data.DataColumn columnFourStepJob;
            
            private global::System.Data.DataColumn columnFourStepMat;
            
            private global::System.Data.DataColumn columnGutterRegion;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnFourStepJob1;
            
            private global::System.Data.DataColumn columnFourStepJob2;
            
            private global::System.Data.DataColumn columnFourStepJob3;
            
            private global::System.Data.DataColumn columnFourStepJob4;
            
            private global::System.Data.DataColumn columnCostD;
            
            private global::System.Data.DataColumn columnQBItemIDD;
            
            private global::System.Data.DataColumn columnExpr1;
            
            private global::System.Data.DataColumn columnQBDescription;
            
            private global::System.Data.DataColumn columnQBDescriptionA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyJobsDataTable() {
                this.TableName = "CustPropertyJobs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustPropertyJobsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustPropertyJobsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerJobIDColumn {
                get {
                    return this.columnCustomerJobID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyIDColumn {
                get {
                    return this.columnPropertyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RepeatColumn {
                get {
                    return this.columnRepeat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IntervalTypeColumn {
                get {
                    return this.columnIntervalType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostContractorColumn {
                get {
                    return this.columnCostContractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostFourStepColumn {
                get {
                    return this.columnCostFourStep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstructionsColumn {
                get {
                    return this.columnInstructions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManHoursColumn {
                get {
                    return this.columnManHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComplimentsColumn {
                get {
                    return this.columnCompliments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComplaintsColumn {
                get {
                    return this.columnComplaints;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubdivisionColumn {
                get {
                    return this.columnSubdivision;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNumberColumn {
                get {
                    return this.columnAccountNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostBColumn {
                get {
                    return this.columnCostB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCColumn {
                get {
                    return this.columnCostC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CrewKeyColumn {
                get {
                    return this.columnCrewKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectPrintColumn {
                get {
                    return this.columnSelectPrint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialCostColumn {
                get {
                    return this.columnMaterialCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevenueColumn {
                get {
                    return this.columnRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBInvoiceIDColumn {
                get {
                    return this.columnQBInvoiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBItemIDColumn {
                get {
                    return this.columnQBItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBItemIDBColumn {
                get {
                    return this.columnQBItemIDB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBItemIDCColumn {
                get {
                    return this.columnQBItemIDC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepJobColumn {
                get {
                    return this.columnFourStepJob;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepMatColumn {
                get {
                    return this.columnFourStepMat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GutterRegionColumn {
                get {
                    return this.columnGutterRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepJob1Column {
                get {
                    return this.columnFourStepJob1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepJob2Column {
                get {
                    return this.columnFourStepJob2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepJob3Column {
                get {
                    return this.columnFourStepJob3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepJob4Column {
                get {
                    return this.columnFourStepJob4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostDColumn {
                get {
                    return this.columnCostD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBItemIDDColumn {
                get {
                    return this.columnQBItemIDD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Expr1Column {
                get {
                    return this.columnExpr1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBDescriptionColumn {
                get {
                    return this.columnQBDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBDescriptionAColumn {
                get {
                    return this.columnQBDescriptionA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyJobsRow this[int index] {
                get {
                    return ((CustPropertyJobsRow)(this.Rows[index]));
                }
            }
            
            public event CustPropertyJobsRowChangeEventHandler CustPropertyJobsRowChanging;
            
            public event CustPropertyJobsRowChangeEventHandler CustPropertyJobsRowChanged;
            
            public event CustPropertyJobsRowChangeEventHandler CustPropertyJobsRowDeleting;
            
            public event CustPropertyJobsRowChangeEventHandler CustPropertyJobsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustPropertyJobsRow(CustPropertyJobsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyJobsRow AddCustPropertyJobsRow(
                        PropertyRow parentPropertyRowByFK_CustomerJob_Property1, 
                        System.DateTime Date, 
                        string Type, 
                        bool Repeat, 
                        int Frequency, 
                        string IntervalType, 
                        decimal Cost, 
                        decimal CostContractor, 
                        decimal CostFourStep, 
                        string Instructions, 
                        string Status, 
                        float ManHours, 
                        string Compliments, 
                        string Complaints, 
                        string CustomerID, 
                        string Description, 
                        string Address, 
                        string City, 
                        string State, 
                        string Zip, 
                        string Phone, 
                        string Subdivision, 
                        string LastName, 
                        string FirstName, 
                        bool Active, 
                        string AccountNumber, 
                        decimal CostB, 
                        decimal CostC, 
                        string CrewKey, 
                        bool SelectPrint, 
                        decimal MaterialCost, 
                        decimal Revenue, 
                        string QBInvoiceID, 
                        string QBItemID, 
                        string QBItemIDB, 
                        string QBItemIDC, 
                        bool FourStepJob, 
                        float FourStepMat, 
                        string GutterRegion, 
                        string Notes, 
                        bool FourStepJob1, 
                        bool FourStepJob2, 
                        bool FourStepJob3, 
                        bool FourStepJob4, 
                        decimal CostD, 
                        string QBItemIDD, 
                        string Expr1, 
                        string QBDescription, 
                        string QBDescriptionA) {
                CustPropertyJobsRow rowCustPropertyJobsRow = ((CustPropertyJobsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Date,
                        Type,
                        Repeat,
                        Frequency,
                        IntervalType,
                        Cost,
                        CostContractor,
                        CostFourStep,
                        Instructions,
                        Status,
                        ManHours,
                        Compliments,
                        Complaints,
                        CustomerID,
                        Description,
                        Address,
                        City,
                        State,
                        Zip,
                        Phone,
                        Subdivision,
                        LastName,
                        FirstName,
                        Active,
                        AccountNumber,
                        CostB,
                        CostC,
                        CrewKey,
                        SelectPrint,
                        MaterialCost,
                        Revenue,
                        QBInvoiceID,
                        QBItemID,
                        QBItemIDB,
                        QBItemIDC,
                        FourStepJob,
                        FourStepMat,
                        GutterRegion,
                        Notes,
                        FourStepJob1,
                        FourStepJob2,
                        FourStepJob3,
                        FourStepJob4,
                        CostD,
                        QBItemIDD,
                        Expr1,
                        QBDescription,
                        QBDescriptionA};
                if ((parentPropertyRowByFK_CustomerJob_Property1 != null)) {
                    columnValuesArray[1] = parentPropertyRowByFK_CustomerJob_Property1[0];
                }
                rowCustPropertyJobsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustPropertyJobsRow);
                return rowCustPropertyJobsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyJobsRow FindByCustomerJobID(int CustomerJobID) {
                return ((CustPropertyJobsRow)(this.Rows.Find(new object[] {
                            CustomerJobID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustPropertyJobsDataTable cln = ((CustPropertyJobsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustPropertyJobsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerJobID = base.Columns["CustomerJobID"];
                this.columnPropertyID = base.Columns["PropertyID"];
                this.columnDate = base.Columns["Date"];
                this.columnType = base.Columns["Type"];
                this.columnRepeat = base.Columns["Repeat"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnIntervalType = base.Columns["IntervalType"];
                this.columnCost = base.Columns["Cost"];
                this.columnCostContractor = base.Columns["CostContractor"];
                this.columnCostFourStep = base.Columns["CostFourStep"];
                this.columnInstructions = base.Columns["Instructions"];
                this.columnStatus = base.Columns["Status"];
                this.columnManHours = base.Columns["ManHours"];
                this.columnCompliments = base.Columns["Compliments"];
                this.columnComplaints = base.Columns["Complaints"];
                this.columnCustomerID = base.Columns["CustomerID"];
                this.columnDescription = base.Columns["Description"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnPhone = base.Columns["Phone"];
                this.columnSubdivision = base.Columns["Subdivision"];
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnActive = base.Columns["Active"];
                this.columnAccountNumber = base.Columns["AccountNumber"];
                this.columnCostB = base.Columns["CostB"];
                this.columnCostC = base.Columns["CostC"];
                this.columnCrewKey = base.Columns["CrewKey"];
                this.columnSelectPrint = base.Columns["SelectPrint"];
                this.columnMaterialCost = base.Columns["MaterialCost"];
                this.columnRevenue = base.Columns["Revenue"];
                this.columnQBInvoiceID = base.Columns["QBInvoiceID"];
                this.columnQBItemID = base.Columns["QBItemID"];
                this.columnQBItemIDB = base.Columns["QBItemIDB"];
                this.columnQBItemIDC = base.Columns["QBItemIDC"];
                this.columnFourStepJob = base.Columns["FourStepJob"];
                this.columnFourStepMat = base.Columns["FourStepMat"];
                this.columnGutterRegion = base.Columns["GutterRegion"];
                this.columnNotes = base.Columns["Notes"];
                this.columnFourStepJob1 = base.Columns["FourStepJob1"];
                this.columnFourStepJob2 = base.Columns["FourStepJob2"];
                this.columnFourStepJob3 = base.Columns["FourStepJob3"];
                this.columnFourStepJob4 = base.Columns["FourStepJob4"];
                this.columnCostD = base.Columns["CostD"];
                this.columnQBItemIDD = base.Columns["QBItemIDD"];
                this.columnExpr1 = base.Columns["Expr1"];
                this.columnQBDescription = base.Columns["QBDescription"];
                this.columnQBDescriptionA = base.Columns["QBDescriptionA"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerJobID = new global::System.Data.DataColumn("CustomerJobID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerJobID);
                this.columnPropertyID = new global::System.Data.DataColumn("PropertyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyID);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnRepeat = new global::System.Data.DataColumn("Repeat", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepeat);
                this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequency);
                this.columnIntervalType = new global::System.Data.DataColumn("IntervalType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIntervalType);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnCostContractor = new global::System.Data.DataColumn("CostContractor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostContractor);
                this.columnCostFourStep = new global::System.Data.DataColumn("CostFourStep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostFourStep);
                this.columnInstructions = new global::System.Data.DataColumn("Instructions", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstructions);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnManHours = new global::System.Data.DataColumn("ManHours", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManHours);
                this.columnCompliments = new global::System.Data.DataColumn("Compliments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompliments);
                this.columnComplaints = new global::System.Data.DataColumn("Complaints", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComplaints);
                this.columnCustomerID = new global::System.Data.DataColumn("CustomerID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnSubdivision = new global::System.Data.DataColumn("Subdivision", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubdivision);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnAccountNumber = new global::System.Data.DataColumn("AccountNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountNumber);
                this.columnCostB = new global::System.Data.DataColumn("CostB", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostB);
                this.columnCostC = new global::System.Data.DataColumn("CostC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostC);
                this.columnCrewKey = new global::System.Data.DataColumn("CrewKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrewKey);
                this.columnSelectPrint = new global::System.Data.DataColumn("SelectPrint", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectPrint);
                this.columnMaterialCost = new global::System.Data.DataColumn("MaterialCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialCost);
                this.columnRevenue = new global::System.Data.DataColumn("Revenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevenue);
                this.columnQBInvoiceID = new global::System.Data.DataColumn("QBInvoiceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBInvoiceID);
                this.columnQBItemID = new global::System.Data.DataColumn("QBItemID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBItemID);
                this.columnQBItemIDB = new global::System.Data.DataColumn("QBItemIDB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBItemIDB);
                this.columnQBItemIDC = new global::System.Data.DataColumn("QBItemIDC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBItemIDC);
                this.columnFourStepJob = new global::System.Data.DataColumn("FourStepJob", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepJob);
                this.columnFourStepMat = new global::System.Data.DataColumn("FourStepMat", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepMat);
                this.columnGutterRegion = new global::System.Data.DataColumn("GutterRegion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGutterRegion);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnFourStepJob1 = new global::System.Data.DataColumn("FourStepJob1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepJob1);
                this.columnFourStepJob2 = new global::System.Data.DataColumn("FourStepJob2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepJob2);
                this.columnFourStepJob3 = new global::System.Data.DataColumn("FourStepJob3", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepJob3);
                this.columnFourStepJob4 = new global::System.Data.DataColumn("FourStepJob4", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepJob4);
                this.columnCostD = new global::System.Data.DataColumn("CostD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostD);
                this.columnQBItemIDD = new global::System.Data.DataColumn("QBItemIDD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBItemIDD);
                this.columnExpr1 = new global::System.Data.DataColumn("Expr1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpr1);
                this.columnQBDescription = new global::System.Data.DataColumn("QBDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBDescription);
                this.columnQBDescriptionA = new global::System.Data.DataColumn("QBDescriptionA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBDescriptionA);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCustomerJobID}, true));
                this.columnCustomerJobID.AutoIncrement = true;
                this.columnCustomerJobID.AutoIncrementSeed = -1;
                this.columnCustomerJobID.AutoIncrementStep = -1;
                this.columnCustomerJobID.AllowDBNull = false;
                this.columnCustomerJobID.ReadOnly = true;
                this.columnCustomerJobID.Unique = true;
                this.columnPropertyID.AllowDBNull = false;
                this.columnType.MaxLength = 25;
                this.columnIntervalType.MaxLength = 20;
                this.columnInstructions.MaxLength = 1000;
                this.columnStatus.MaxLength = 25;
                this.columnCompliments.MaxLength = 250;
                this.columnComplaints.MaxLength = 250;
                this.columnDescription.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnPhone.MaxLength = 50;
                this.columnSubdivision.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnActive.AllowDBNull = false;
                this.columnAccountNumber.MaxLength = 50;
                this.columnCrewKey.MaxLength = 50;
                this.columnSelectPrint.DefaultValue = ((bool)(false));
                this.columnMaterialCost.DefaultValue = ((decimal)(0m));
                this.columnQBInvoiceID.MaxLength = 50;
                this.columnQBItemID.MaxLength = 50;
                this.columnQBItemIDB.MaxLength = 50;
                this.columnQBItemIDC.MaxLength = 50;
                this.columnGutterRegion.MaxLength = 50;
                this.columnNotes.MaxLength = 1000;
                this.columnQBItemIDD.MaxLength = 50;
                this.columnExpr1.MaxLength = 50;
                this.columnQBDescription.MaxLength = 250;
                this.columnQBDescriptionA.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyJobsRow NewCustPropertyJobsRow() {
                return ((CustPropertyJobsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustPropertyJobsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustPropertyJobsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustPropertyJobsRowChanged != null)) {
                    this.CustPropertyJobsRowChanged(this, new CustPropertyJobsRowChangeEvent(((CustPropertyJobsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustPropertyJobsRowChanging != null)) {
                    this.CustPropertyJobsRowChanging(this, new CustPropertyJobsRowChangeEvent(((CustPropertyJobsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustPropertyJobsRowDeleted != null)) {
                    this.CustPropertyJobsRowDeleted(this, new CustPropertyJobsRowChangeEvent(((CustPropertyJobsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustPropertyJobsRowDeleting != null)) {
                    this.CustPropertyJobsRowDeleting(this, new CustPropertyJobsRowChangeEvent(((CustPropertyJobsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustPropertyJobsRow(CustPropertyJobsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustPropertyJobsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CrewNameDataTable : global::System.Data.TypedTableBase<CrewNameRow> {
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnCustomerJobID;
            
            private global::System.Data.DataColumn columnEmployeeId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewNameDataTable() {
                this.TableName = "CrewName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CrewNameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CrewNameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerJobIDColumn {
                get {
                    return this.columnCustomerJobID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIdColumn {
                get {
                    return this.columnEmployeeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewNameRow this[int index] {
                get {
                    return ((CrewNameRow)(this.Rows[index]));
                }
            }
            
            public event CrewNameRowChangeEventHandler CrewNameRowChanging;
            
            public event CrewNameRowChangeEventHandler CrewNameRowChanged;
            
            public event CrewNameRowChangeEventHandler CrewNameRowDeleting;
            
            public event CrewNameRowChangeEventHandler CrewNameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCrewNameRow(CrewNameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewNameRow AddCrewNameRow(string FirstName, string LastName, int CustomerJobID, EmployeeRow parentEmployeeRowByFK_Crew_Employee1) {
                CrewNameRow rowCrewNameRow = ((CrewNameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FirstName,
                        LastName,
                        CustomerJobID,
                        null};
                if ((parentEmployeeRowByFK_Crew_Employee1 != null)) {
                    columnValuesArray[3] = parentEmployeeRowByFK_Crew_Employee1[0];
                }
                rowCrewNameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCrewNameRow);
                return rowCrewNameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CrewNameDataTable cln = ((CrewNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CrewNameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnCustomerJobID = base.Columns["CustomerJobID"];
                this.columnEmployeeId = base.Columns["EmployeeId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnCustomerJobID = new global::System.Data.DataColumn("CustomerJobID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerJobID);
                this.columnEmployeeId = new global::System.Data.DataColumn("EmployeeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeId);
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewNameRow NewCrewNameRow() {
                return ((CrewNameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CrewNameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CrewNameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CrewNameRowChanged != null)) {
                    this.CrewNameRowChanged(this, new CrewNameRowChangeEvent(((CrewNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CrewNameRowChanging != null)) {
                    this.CrewNameRowChanging(this, new CrewNameRowChangeEvent(((CrewNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CrewNameRowDeleted != null)) {
                    this.CrewNameRowDeleted(this, new CrewNameRowChangeEvent(((CrewNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CrewNameRowDeleting != null)) {
                    this.CrewNameRowDeleting(this, new CrewNameRowChangeEvent(((CrewNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCrewNameRow(CrewNameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CrewNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RouteListDataTable : global::System.Data.TypedTableBase<RouteListRow> {
            
            private global::System.Data.DataColumn columnRouteNameID;
            
            private global::System.Data.DataColumn columnRouteName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteListDataTable() {
                this.TableName = "RouteList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RouteListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RouteListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteNameIDColumn {
                get {
                    return this.columnRouteNameID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteNameColumn {
                get {
                    return this.columnRouteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteListRow this[int index] {
                get {
                    return ((RouteListRow)(this.Rows[index]));
                }
            }
            
            public event RouteListRowChangeEventHandler RouteListRowChanging;
            
            public event RouteListRowChangeEventHandler RouteListRowChanged;
            
            public event RouteListRowChangeEventHandler RouteListRowDeleting;
            
            public event RouteListRowChangeEventHandler RouteListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRouteListRow(RouteListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteListRow AddRouteListRow(string RouteName) {
                RouteListRow rowRouteListRow = ((RouteListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RouteName};
                rowRouteListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRouteListRow);
                return rowRouteListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteListRow FindByRouteNameID(int RouteNameID) {
                return ((RouteListRow)(this.Rows.Find(new object[] {
                            RouteNameID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RouteListDataTable cln = ((RouteListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RouteListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRouteNameID = base.Columns["RouteNameID"];
                this.columnRouteName = base.Columns["RouteName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRouteNameID = new global::System.Data.DataColumn("RouteNameID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRouteNameID);
                this.columnRouteName = new global::System.Data.DataColumn("RouteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRouteName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRouteNameID}, true));
                this.columnRouteNameID.AutoIncrement = true;
                this.columnRouteNameID.AutoIncrementSeed = -1;
                this.columnRouteNameID.AutoIncrementStep = -1;
                this.columnRouteNameID.AllowDBNull = false;
                this.columnRouteNameID.ReadOnly = true;
                this.columnRouteNameID.Unique = true;
                this.columnRouteName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteListRow NewRouteListRow() {
                return ((RouteListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RouteListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RouteListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RouteListRowChanged != null)) {
                    this.RouteListRowChanged(this, new RouteListRowChangeEvent(((RouteListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RouteListRowChanging != null)) {
                    this.RouteListRowChanging(this, new RouteListRowChangeEvent(((RouteListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RouteListRowDeleted != null)) {
                    this.RouteListRowDeleted(this, new RouteListRowChangeEvent(((RouteListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RouteListRowDeleting != null)) {
                    this.RouteListRowDeleting(this, new RouteListRowChangeEvent(((RouteListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRouteListRow(RouteListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RouteListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerTypeListDataTable : global::System.Data.TypedTableBase<CustomerTypeListRow> {
            
            private global::System.Data.DataColumn columnCustomerTypeID;
            
            private global::System.Data.DataColumn columnCustomerType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerTypeListDataTable() {
                this.TableName = "CustomerTypeList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerTypeListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerTypeListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerTypeIDColumn {
                get {
                    return this.columnCustomerTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerTypeColumn {
                get {
                    return this.columnCustomerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerTypeListRow this[int index] {
                get {
                    return ((CustomerTypeListRow)(this.Rows[index]));
                }
            }
            
            public event CustomerTypeListRowChangeEventHandler CustomerTypeListRowChanging;
            
            public event CustomerTypeListRowChangeEventHandler CustomerTypeListRowChanged;
            
            public event CustomerTypeListRowChangeEventHandler CustomerTypeListRowDeleting;
            
            public event CustomerTypeListRowChangeEventHandler CustomerTypeListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerTypeListRow(CustomerTypeListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerTypeListRow AddCustomerTypeListRow(string CustomerType) {
                CustomerTypeListRow rowCustomerTypeListRow = ((CustomerTypeListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CustomerType};
                rowCustomerTypeListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomerTypeListRow);
                return rowCustomerTypeListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerTypeListRow FindByCustomerTypeID(int CustomerTypeID) {
                return ((CustomerTypeListRow)(this.Rows.Find(new object[] {
                            CustomerTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomerTypeListDataTable cln = ((CustomerTypeListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomerTypeListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerTypeID = base.Columns["CustomerTypeID"];
                this.columnCustomerType = base.Columns["CustomerType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerTypeID = new global::System.Data.DataColumn("CustomerTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerTypeID);
                this.columnCustomerType = new global::System.Data.DataColumn("CustomerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCustomerTypeID}, true));
                this.columnCustomerTypeID.AutoIncrement = true;
                this.columnCustomerTypeID.AutoIncrementSeed = -1;
                this.columnCustomerTypeID.AutoIncrementStep = -1;
                this.columnCustomerTypeID.AllowDBNull = false;
                this.columnCustomerTypeID.ReadOnly = true;
                this.columnCustomerTypeID.Unique = true;
                this.columnCustomerType.AllowDBNull = false;
                this.columnCustomerType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerTypeListRow NewCustomerTypeListRow() {
                return ((CustomerTypeListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomerTypeListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomerTypeListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerTypeListRowChanged != null)) {
                    this.CustomerTypeListRowChanged(this, new CustomerTypeListRowChangeEvent(((CustomerTypeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerTypeListRowChanging != null)) {
                    this.CustomerTypeListRowChanging(this, new CustomerTypeListRowChangeEvent(((CustomerTypeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerTypeListRowDeleted != null)) {
                    this.CustomerTypeListRowDeleted(this, new CustomerTypeListRowChangeEvent(((CustomerTypeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerTypeListRowDeleting != null)) {
                    this.CustomerTypeListRowDeleting(this, new CustomerTypeListRowChangeEvent(((CustomerTypeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerTypeListRow(CustomerTypeListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerTypeListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JobStatusListDataTable : global::System.Data.TypedTableBase<JobStatusListRow> {
            
            private global::System.Data.DataColumn columnJobStatusID;
            
            private global::System.Data.DataColumn columnJobStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusListDataTable() {
                this.TableName = "JobStatusList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobStatusListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JobStatusListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobStatusIDColumn {
                get {
                    return this.columnJobStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobStatusColumn {
                get {
                    return this.columnJobStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusListRow this[int index] {
                get {
                    return ((JobStatusListRow)(this.Rows[index]));
                }
            }
            
            public event JobStatusListRowChangeEventHandler JobStatusListRowChanging;
            
            public event JobStatusListRowChangeEventHandler JobStatusListRowChanged;
            
            public event JobStatusListRowChangeEventHandler JobStatusListRowDeleting;
            
            public event JobStatusListRowChangeEventHandler JobStatusListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJobStatusListRow(JobStatusListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusListRow AddJobStatusListRow(string JobStatus) {
                JobStatusListRow rowJobStatusListRow = ((JobStatusListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        JobStatus};
                rowJobStatusListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJobStatusListRow);
                return rowJobStatusListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusListRow FindByJobStatusID(int JobStatusID) {
                return ((JobStatusListRow)(this.Rows.Find(new object[] {
                            JobStatusID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JobStatusListDataTable cln = ((JobStatusListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JobStatusListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnJobStatusID = base.Columns["JobStatusID"];
                this.columnJobStatus = base.Columns["JobStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnJobStatusID = new global::System.Data.DataColumn("JobStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobStatusID);
                this.columnJobStatus = new global::System.Data.DataColumn("JobStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnJobStatusID}, true));
                this.columnJobStatusID.AutoIncrement = true;
                this.columnJobStatusID.AutoIncrementSeed = -1;
                this.columnJobStatusID.AutoIncrementStep = -1;
                this.columnJobStatusID.AllowDBNull = false;
                this.columnJobStatusID.ReadOnly = true;
                this.columnJobStatusID.Unique = true;
                this.columnJobStatus.AllowDBNull = false;
                this.columnJobStatus.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusListRow NewJobStatusListRow() {
                return ((JobStatusListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JobStatusListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JobStatusListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JobStatusListRowChanged != null)) {
                    this.JobStatusListRowChanged(this, new JobStatusListRowChangeEvent(((JobStatusListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JobStatusListRowChanging != null)) {
                    this.JobStatusListRowChanging(this, new JobStatusListRowChangeEvent(((JobStatusListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JobStatusListRowDeleted != null)) {
                    this.JobStatusListRowDeleted(this, new JobStatusListRowChangeEvent(((JobStatusListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JobStatusListRowDeleting != null)) {
                    this.JobStatusListRowDeleting(this, new JobStatusListRowChangeEvent(((JobStatusListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJobStatusListRow(JobStatusListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JobStatusListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RouteViewDataTable : global::System.Data.TypedTableBase<RouteViewRow> {
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnSubdivision;
            
            private global::System.Data.DataColumn columnRouteID;
            
            private global::System.Data.DataColumn columnRouteName;
            
            private global::System.Data.DataColumn columnRouteOrder;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnPropertyID;
            
            private global::System.Data.DataColumn columnFourStepType;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnGroupType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteViewDataTable() {
                this.TableName = "RouteView";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RouteViewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RouteViewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubdivisionColumn {
                get {
                    return this.columnSubdivision;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteIDColumn {
                get {
                    return this.columnRouteID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteNameColumn {
                get {
                    return this.columnRouteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteOrderColumn {
                get {
                    return this.columnRouteOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyIDColumn {
                get {
                    return this.columnPropertyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourStepTypeColumn {
                get {
                    return this.columnFourStepType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupTypeColumn {
                get {
                    return this.columnGroupType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteViewRow this[int index] {
                get {
                    return ((RouteViewRow)(this.Rows[index]));
                }
            }
            
            public event RouteViewRowChangeEventHandler RouteViewRowChanging;
            
            public event RouteViewRowChangeEventHandler RouteViewRowChanged;
            
            public event RouteViewRowChangeEventHandler RouteViewRowDeleting;
            
            public event RouteViewRowChangeEventHandler RouteViewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRouteViewRow(RouteViewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteViewRow AddRouteViewRow(string LastName, string FirstName, string Description, string Address, string City, string State, string Zip, string Subdivision, string RouteName, int RouteOrder, string Notes, int PropertyID, bool FourStepType, bool Active, string GroupType) {
                RouteViewRow rowRouteViewRow = ((RouteViewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LastName,
                        FirstName,
                        Description,
                        Address,
                        City,
                        State,
                        Zip,
                        Subdivision,
                        null,
                        RouteName,
                        RouteOrder,
                        Notes,
                        PropertyID,
                        FourStepType,
                        Active,
                        GroupType};
                rowRouteViewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRouteViewRow);
                return rowRouteViewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteViewRow FindByRouteID(int RouteID) {
                return ((RouteViewRow)(this.Rows.Find(new object[] {
                            RouteID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RouteViewDataTable cln = ((RouteViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RouteViewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnDescription = base.Columns["Description"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnSubdivision = base.Columns["Subdivision"];
                this.columnRouteID = base.Columns["RouteID"];
                this.columnRouteName = base.Columns["RouteName"];
                this.columnRouteOrder = base.Columns["RouteOrder"];
                this.columnNotes = base.Columns["Notes"];
                this.columnPropertyID = base.Columns["PropertyID"];
                this.columnFourStepType = base.Columns["FourStepType"];
                this.columnActive = base.Columns["Active"];
                this.columnGroupType = base.Columns["GroupType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnSubdivision = new global::System.Data.DataColumn("Subdivision", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubdivision);
                this.columnRouteID = new global::System.Data.DataColumn("RouteID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRouteID);
                this.columnRouteName = new global::System.Data.DataColumn("RouteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRouteName);
                this.columnRouteOrder = new global::System.Data.DataColumn("RouteOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRouteOrder);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnPropertyID = new global::System.Data.DataColumn("PropertyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyID);
                this.columnFourStepType = new global::System.Data.DataColumn("FourStepType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFourStepType);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnGroupType = new global::System.Data.DataColumn("GroupType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRouteID}, true));
                this.columnLastName.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnDescription.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnSubdivision.MaxLength = 50;
                this.columnRouteID.AutoIncrement = true;
                this.columnRouteID.AutoIncrementSeed = -1;
                this.columnRouteID.AutoIncrementStep = -1;
                this.columnRouteID.AllowDBNull = false;
                this.columnRouteID.ReadOnly = true;
                this.columnRouteID.Unique = true;
                this.columnRouteName.MaxLength = 50;
                this.columnNotes.MaxLength = 1000;
                this.columnPropertyID.AllowDBNull = false;
                this.columnActive.AllowDBNull = false;
                this.columnGroupType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteViewRow NewRouteViewRow() {
                return ((RouteViewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RouteViewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RouteViewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RouteViewRowChanged != null)) {
                    this.RouteViewRowChanged(this, new RouteViewRowChangeEvent(((RouteViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RouteViewRowChanging != null)) {
                    this.RouteViewRowChanging(this, new RouteViewRowChangeEvent(((RouteViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RouteViewRowDeleted != null)) {
                    this.RouteViewRowDeleted(this, new RouteViewRowChangeEvent(((RouteViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RouteViewRowDeleting != null)) {
                    this.RouteViewRowDeleting(this, new RouteViewRowChangeEvent(((RouteViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRouteViewRow(RouteViewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RouteViewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LetterDataTableDataTable : global::System.Data.TypedTableBase<LetterDataTableRow> {
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnPropMow;
            
            private global::System.Data.DataColumn columnPropFourStep;
            
            private global::System.Data.DataColumn columnPropSeed;
            
            private global::System.Data.DataColumn columnPropFertilize;
            
            private global::System.Data.DataColumn columnPropLime;
            
            private global::System.Data.DataColumn columnPropAeration;
            
            private global::System.Data.DataColumn columnSpringServices;
            
            private global::System.Data.DataColumn columnSummerServices;
            
            private global::System.Data.DataColumn columnFallServices;
            
            private global::System.Data.DataColumn columnWinterServices;
            
            private global::System.Data.DataColumn columnGroupType;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnAccountNumber;
            
            private global::System.Data.DataColumn columnBusinessName;
            
            private global::System.Data.DataColumn columnActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LetterDataTableDataTable() {
                this.TableName = "LetterDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LetterDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LetterDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropMowColumn {
                get {
                    return this.columnPropMow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropFourStepColumn {
                get {
                    return this.columnPropFourStep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropSeedColumn {
                get {
                    return this.columnPropSeed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropFertilizeColumn {
                get {
                    return this.columnPropFertilize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropLimeColumn {
                get {
                    return this.columnPropLime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropAerationColumn {
                get {
                    return this.columnPropAeration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpringServicesColumn {
                get {
                    return this.columnSpringServices;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SummerServicesColumn {
                get {
                    return this.columnSummerServices;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FallServicesColumn {
                get {
                    return this.columnFallServices;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WinterServicesColumn {
                get {
                    return this.columnWinterServices;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupTypeColumn {
                get {
                    return this.columnGroupType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNumberColumn {
                get {
                    return this.columnAccountNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BusinessNameColumn {
                get {
                    return this.columnBusinessName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LetterDataTableRow this[int index] {
                get {
                    return ((LetterDataTableRow)(this.Rows[index]));
                }
            }
            
            public event LetterDataTableRowChangeEventHandler LetterDataTableRowChanging;
            
            public event LetterDataTableRowChangeEventHandler LetterDataTableRowChanged;
            
            public event LetterDataTableRowChangeEventHandler LetterDataTableRowDeleting;
            
            public event LetterDataTableRowChangeEventHandler LetterDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLetterDataTableRow(LetterDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LetterDataTableRow AddLetterDataTableRow(
                        string LastName, 
                        string FirstName, 
                        string Address, 
                        string City, 
                        string State, 
                        string Zip, 
                        decimal PropMow, 
                        decimal PropFourStep, 
                        decimal PropSeed, 
                        decimal PropFertilize, 
                        decimal PropLime, 
                        decimal PropAeration, 
                        string SpringServices, 
                        string SummerServices, 
                        string FallServices, 
                        string WinterServices, 
                        string GroupType, 
                        decimal Cost, 
                        string AccountNumber, 
                        string BusinessName, 
                        bool Active) {
                LetterDataTableRow rowLetterDataTableRow = ((LetterDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LastName,
                        FirstName,
                        Address,
                        City,
                        State,
                        Zip,
                        PropMow,
                        PropFourStep,
                        PropSeed,
                        PropFertilize,
                        PropLime,
                        PropAeration,
                        SpringServices,
                        SummerServices,
                        FallServices,
                        WinterServices,
                        GroupType,
                        Cost,
                        AccountNumber,
                        BusinessName,
                        Active};
                rowLetterDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLetterDataTableRow);
                return rowLetterDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LetterDataTableDataTable cln = ((LetterDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LetterDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnPropMow = base.Columns["PropMow"];
                this.columnPropFourStep = base.Columns["PropFourStep"];
                this.columnPropSeed = base.Columns["PropSeed"];
                this.columnPropFertilize = base.Columns["PropFertilize"];
                this.columnPropLime = base.Columns["PropLime"];
                this.columnPropAeration = base.Columns["PropAeration"];
                this.columnSpringServices = base.Columns["SpringServices"];
                this.columnSummerServices = base.Columns["SummerServices"];
                this.columnFallServices = base.Columns["FallServices"];
                this.columnWinterServices = base.Columns["WinterServices"];
                this.columnGroupType = base.Columns["GroupType"];
                this.columnCost = base.Columns["Cost"];
                this.columnAccountNumber = base.Columns["AccountNumber"];
                this.columnBusinessName = base.Columns["BusinessName"];
                this.columnActive = base.Columns["Active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnPropMow = new global::System.Data.DataColumn("PropMow", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropMow);
                this.columnPropFourStep = new global::System.Data.DataColumn("PropFourStep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropFourStep);
                this.columnPropSeed = new global::System.Data.DataColumn("PropSeed", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropSeed);
                this.columnPropFertilize = new global::System.Data.DataColumn("PropFertilize", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropFertilize);
                this.columnPropLime = new global::System.Data.DataColumn("PropLime", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropLime);
                this.columnPropAeration = new global::System.Data.DataColumn("PropAeration", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropAeration);
                this.columnSpringServices = new global::System.Data.DataColumn("SpringServices", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpringServices);
                this.columnSummerServices = new global::System.Data.DataColumn("SummerServices", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSummerServices);
                this.columnFallServices = new global::System.Data.DataColumn("FallServices", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFallServices);
                this.columnWinterServices = new global::System.Data.DataColumn("WinterServices", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWinterServices);
                this.columnGroupType = new global::System.Data.DataColumn("GroupType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupType);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnAccountNumber = new global::System.Data.DataColumn("AccountNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountNumber);
                this.columnBusinessName = new global::System.Data.DataColumn("BusinessName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessName);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnLastName.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnSpringServices.MaxLength = 200;
                this.columnSummerServices.MaxLength = 200;
                this.columnFallServices.MaxLength = 200;
                this.columnWinterServices.MaxLength = 200;
                this.columnGroupType.MaxLength = 50;
                this.columnAccountNumber.MaxLength = 50;
                this.columnBusinessName.MaxLength = 100;
                this.columnActive.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LetterDataTableRow NewLetterDataTableRow() {
                return ((LetterDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LetterDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LetterDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LetterDataTableRowChanged != null)) {
                    this.LetterDataTableRowChanged(this, new LetterDataTableRowChangeEvent(((LetterDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LetterDataTableRowChanging != null)) {
                    this.LetterDataTableRowChanging(this, new LetterDataTableRowChangeEvent(((LetterDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LetterDataTableRowDeleted != null)) {
                    this.LetterDataTableRowDeleted(this, new LetterDataTableRowChangeEvent(((LetterDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LetterDataTableRowDeleting != null)) {
                    this.LetterDataTableRowDeleting(this, new LetterDataTableRowChangeEvent(((LetterDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLetterDataTableRow(LetterDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LetterDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerNewletterDataTable : global::System.Data.TypedTableBase<CustomerNewletterRow> {
            
            private global::System.Data.DataColumn columnCustomerID;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnPhone1;
            
            private global::System.Data.DataColumn columnPhone2;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnBusinessName;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnGroupType;
            
            private global::System.Data.DataColumn columnAccountNumber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewletterDataTable() {
                this.TableName = "CustomerNewletter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerNewletterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerNewletterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone1Column {
                get {
                    return this.columnPhone1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone2Column {
                get {
                    return this.columnPhone2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BusinessNameColumn {
                get {
                    return this.columnBusinessName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupTypeColumn {
                get {
                    return this.columnGroupType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNumberColumn {
                get {
                    return this.columnAccountNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewletterRow this[int index] {
                get {
                    return ((CustomerNewletterRow)(this.Rows[index]));
                }
            }
            
            public event CustomerNewletterRowChangeEventHandler CustomerNewletterRowChanging;
            
            public event CustomerNewletterRowChangeEventHandler CustomerNewletterRowChanged;
            
            public event CustomerNewletterRowChangeEventHandler CustomerNewletterRowDeleting;
            
            public event CustomerNewletterRowChangeEventHandler CustomerNewletterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerNewletterRow(CustomerNewletterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewletterRow AddCustomerNewletterRow(string LastName, string FirstName, string Address, string City, string State, string Zip, string Phone1, string Phone2, bool Active, string BusinessName, string Email, string GroupType, string AccountNumber) {
                CustomerNewletterRow rowCustomerNewletterRow = ((CustomerNewletterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LastName,
                        FirstName,
                        Address,
                        City,
                        State,
                        Zip,
                        Phone1,
                        Phone2,
                        Active,
                        BusinessName,
                        Email,
                        GroupType,
                        AccountNumber};
                rowCustomerNewletterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomerNewletterRow);
                return rowCustomerNewletterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewletterRow FindByCustomerID(int CustomerID) {
                return ((CustomerNewletterRow)(this.Rows.Find(new object[] {
                            CustomerID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomerNewletterDataTable cln = ((CustomerNewletterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomerNewletterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerID = base.Columns["CustomerID"];
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnPhone1 = base.Columns["Phone1"];
                this.columnPhone2 = base.Columns["Phone2"];
                this.columnActive = base.Columns["Active"];
                this.columnBusinessName = base.Columns["BusinessName"];
                this.columnEmail = base.Columns["Email"];
                this.columnGroupType = base.Columns["GroupType"];
                this.columnAccountNumber = base.Columns["AccountNumber"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerID = new global::System.Data.DataColumn("CustomerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerID);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnPhone1 = new global::System.Data.DataColumn("Phone1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone1);
                this.columnPhone2 = new global::System.Data.DataColumn("Phone2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone2);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnBusinessName = new global::System.Data.DataColumn("BusinessName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessName);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnGroupType = new global::System.Data.DataColumn("GroupType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupType);
                this.columnAccountNumber = new global::System.Data.DataColumn("AccountNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountNumber);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCustomerID}, true));
                this.columnCustomerID.AutoIncrement = true;
                this.columnCustomerID.AutoIncrementSeed = -1;
                this.columnCustomerID.AutoIncrementStep = -1;
                this.columnCustomerID.AllowDBNull = false;
                this.columnCustomerID.ReadOnly = true;
                this.columnCustomerID.Unique = true;
                this.columnLastName.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnPhone1.MaxLength = 50;
                this.columnPhone2.MaxLength = 50;
                this.columnActive.AllowDBNull = false;
                this.columnBusinessName.MaxLength = 100;
                this.columnEmail.MaxLength = 50;
                this.columnGroupType.MaxLength = 50;
                this.columnAccountNumber.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewletterRow NewCustomerNewletterRow() {
                return ((CustomerNewletterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomerNewletterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomerNewletterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerNewletterRowChanged != null)) {
                    this.CustomerNewletterRowChanged(this, new CustomerNewletterRowChangeEvent(((CustomerNewletterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerNewletterRowChanging != null)) {
                    this.CustomerNewletterRowChanging(this, new CustomerNewletterRowChangeEvent(((CustomerNewletterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerNewletterRowDeleted != null)) {
                    this.CustomerNewletterRowDeleted(this, new CustomerNewletterRowChangeEvent(((CustomerNewletterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerNewletterRowDeleting != null)) {
                    this.CustomerNewletterRowDeleting(this, new CustomerNewletterRowChangeEvent(((CustomerNewletterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerNewletterRow(CustomerNewletterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerNewletterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserProfileDataTable : global::System.Data.TypedTableBase<UserProfileRow> {
            
            private global::System.Data.DataColumn columnProfileID;
            
            private global::System.Data.DataColumn columnTemplatePath;
            
            private global::System.Data.DataColumn columnEnableSound;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnImportPath;
            
            private global::System.Data.DataColumn columnQBInvoiceDate;
            
            private global::System.Data.DataColumn columnQBIntegration;
            
            private global::System.Data.DataColumn columnQBAccount;
            
            private global::System.Data.DataColumn columnReportURL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserProfileDataTable() {
                this.TableName = "UserProfile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserProfileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserProfileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProfileIDColumn {
                get {
                    return this.columnProfileID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplatePathColumn {
                get {
                    return this.columnTemplatePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnableSoundColumn {
                get {
                    return this.columnEnableSound;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportPathColumn {
                get {
                    return this.columnImportPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBInvoiceDateColumn {
                get {
                    return this.columnQBInvoiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBIntegrationColumn {
                get {
                    return this.columnQBIntegration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBAccountColumn {
                get {
                    return this.columnQBAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportURLColumn {
                get {
                    return this.columnReportURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserProfileRow this[int index] {
                get {
                    return ((UserProfileRow)(this.Rows[index]));
                }
            }
            
            public event UserProfileRowChangeEventHandler UserProfileRowChanging;
            
            public event UserProfileRowChangeEventHandler UserProfileRowChanged;
            
            public event UserProfileRowChangeEventHandler UserProfileRowDeleting;
            
            public event UserProfileRowChangeEventHandler UserProfileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserProfileRow(UserProfileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserProfileRow AddUserProfileRow(string TemplatePath, bool EnableSound, string Password, string ImportPath, System.DateTime QBInvoiceDate, bool QBIntegration, string QBAccount, string ReportURL) {
                UserProfileRow rowUserProfileRow = ((UserProfileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TemplatePath,
                        EnableSound,
                        Password,
                        ImportPath,
                        QBInvoiceDate,
                        QBIntegration,
                        QBAccount,
                        ReportURL};
                rowUserProfileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserProfileRow);
                return rowUserProfileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserProfileRow FindByProfileID(int ProfileID) {
                return ((UserProfileRow)(this.Rows.Find(new object[] {
                            ProfileID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserProfileDataTable cln = ((UserProfileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserProfileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProfileID = base.Columns["ProfileID"];
                this.columnTemplatePath = base.Columns["TemplatePath"];
                this.columnEnableSound = base.Columns["EnableSound"];
                this.columnPassword = base.Columns["Password"];
                this.columnImportPath = base.Columns["ImportPath"];
                this.columnQBInvoiceDate = base.Columns["QBInvoiceDate"];
                this.columnQBIntegration = base.Columns["QBIntegration"];
                this.columnQBAccount = base.Columns["QBAccount"];
                this.columnReportURL = base.Columns["ReportURL"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProfileID = new global::System.Data.DataColumn("ProfileID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProfileID);
                this.columnTemplatePath = new global::System.Data.DataColumn("TemplatePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplatePath);
                this.columnEnableSound = new global::System.Data.DataColumn("EnableSound", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnableSound);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnImportPath = new global::System.Data.DataColumn("ImportPath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportPath);
                this.columnQBInvoiceDate = new global::System.Data.DataColumn("QBInvoiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBInvoiceDate);
                this.columnQBIntegration = new global::System.Data.DataColumn("QBIntegration", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBIntegration);
                this.columnQBAccount = new global::System.Data.DataColumn("QBAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBAccount);
                this.columnReportURL = new global::System.Data.DataColumn("ReportURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportURL);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProfileID}, true));
                this.columnProfileID.AutoIncrement = true;
                this.columnProfileID.AutoIncrementSeed = -1;
                this.columnProfileID.AutoIncrementStep = -1;
                this.columnProfileID.AllowDBNull = false;
                this.columnProfileID.ReadOnly = true;
                this.columnProfileID.Unique = true;
                this.columnTemplatePath.MaxLength = 500;
                this.columnPassword.MaxLength = 50;
                this.columnImportPath.MaxLength = 500;
                this.columnQBAccount.MaxLength = 100;
                this.columnReportURL.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserProfileRow NewUserProfileRow() {
                return ((UserProfileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserProfileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserProfileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserProfileRowChanged != null)) {
                    this.UserProfileRowChanged(this, new UserProfileRowChangeEvent(((UserProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserProfileRowChanging != null)) {
                    this.UserProfileRowChanging(this, new UserProfileRowChangeEvent(((UserProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserProfileRowDeleted != null)) {
                    this.UserProfileRowDeleted(this, new UserProfileRowChangeEvent(((UserProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserProfileRowDeleting != null)) {
                    this.UserProfileRowDeleting(this, new UserProfileRowChangeEvent(((UserProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserProfileRow(UserProfileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserProfileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerNewLettersDataTable : global::System.Data.TypedTableBase<CustomerNewLettersRow> {
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnQBInvoiceID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewLettersDataTable() {
                this.TableName = "CustomerNewLetters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerNewLettersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerNewLettersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QBInvoiceIDColumn {
                get {
                    return this.columnQBInvoiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewLettersRow this[int index] {
                get {
                    return ((CustomerNewLettersRow)(this.Rows[index]));
                }
            }
            
            public event CustomerNewLettersRowChangeEventHandler CustomerNewLettersRowChanging;
            
            public event CustomerNewLettersRowChangeEventHandler CustomerNewLettersRowChanged;
            
            public event CustomerNewLettersRowChangeEventHandler CustomerNewLettersRowDeleting;
            
            public event CustomerNewLettersRowChangeEventHandler CustomerNewLettersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerNewLettersRow(CustomerNewLettersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewLettersRow AddCustomerNewLettersRow(string LastName, string FirstName, string Address, string City, string State, string Zip, string QBInvoiceID) {
                CustomerNewLettersRow rowCustomerNewLettersRow = ((CustomerNewLettersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LastName,
                        FirstName,
                        Address,
                        City,
                        State,
                        Zip,
                        QBInvoiceID};
                rowCustomerNewLettersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomerNewLettersRow);
                return rowCustomerNewLettersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomerNewLettersDataTable cln = ((CustomerNewLettersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomerNewLettersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnQBInvoiceID = base.Columns["QBInvoiceID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnQBInvoiceID = new global::System.Data.DataColumn("QBInvoiceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQBInvoiceID);
                this.columnLastName.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnQBInvoiceID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewLettersRow NewCustomerNewLettersRow() {
                return ((CustomerNewLettersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomerNewLettersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomerNewLettersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerNewLettersRowChanged != null)) {
                    this.CustomerNewLettersRowChanged(this, new CustomerNewLettersRowChangeEvent(((CustomerNewLettersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerNewLettersRowChanging != null)) {
                    this.CustomerNewLettersRowChanging(this, new CustomerNewLettersRowChangeEvent(((CustomerNewLettersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerNewLettersRowDeleted != null)) {
                    this.CustomerNewLettersRowDeleted(this, new CustomerNewLettersRowChangeEvent(((CustomerNewLettersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerNewLettersRowDeleting != null)) {
                    this.CustomerNewLettersRowDeleting(this, new CustomerNewLettersRowChangeEvent(((CustomerNewLettersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerNewLettersRow(CustomerNewLettersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerNewLettersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BonusDataTable : global::System.Data.TypedTableBase<BonusRow> {
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnBonus;
            
            private global::System.Data.DataColumn columnQualityBonus;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnContractor;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnEmployeeBonusID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonusDataTable() {
                this.TableName = "Bonus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BonusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BonusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BonusColumn {
                get {
                    return this.columnBonus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityBonusColumn {
                get {
                    return this.columnQualityBonus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContractorColumn {
                get {
                    return this.columnContractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeBonusIDColumn {
                get {
                    return this.columnEmployeeBonusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonusRow this[int index] {
                get {
                    return ((BonusRow)(this.Rows[index]));
                }
            }
            
            public event BonusRowChangeEventHandler BonusRowChanging;
            
            public event BonusRowChangeEventHandler BonusRowChanged;
            
            public event BonusRowChangeEventHandler BonusRowDeleting;
            
            public event BonusRowChangeEventHandler BonusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBonusRow(BonusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonusRow AddBonusRow(string FirstName, string LastName, decimal Bonus, decimal QualityBonus, int Year, bool Active, bool Contractor, int EmployeeID) {
                BonusRow rowBonusRow = ((BonusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FirstName,
                        LastName,
                        Bonus,
                        QualityBonus,
                        Year,
                        Active,
                        Contractor,
                        EmployeeID,
                        null};
                rowBonusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBonusRow);
                return rowBonusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonusRow FindByEmployeeID(int EmployeeID) {
                return ((BonusRow)(this.Rows.Find(new object[] {
                            EmployeeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BonusDataTable cln = ((BonusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BonusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnBonus = base.Columns["Bonus"];
                this.columnQualityBonus = base.Columns["QualityBonus"];
                this.columnYear = base.Columns["Year"];
                this.columnActive = base.Columns["Active"];
                this.columnContractor = base.Columns["Contractor"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnEmployeeBonusID = base.Columns["EmployeeBonusID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnBonus = new global::System.Data.DataColumn("Bonus", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBonus);
                this.columnQualityBonus = new global::System.Data.DataColumn("QualityBonus", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualityBonus);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnContractor = new global::System.Data.DataColumn("Contractor", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractor);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnEmployeeBonusID = new global::System.Data.DataColumn("EmployeeBonusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeBonusID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmployeeID}, true));
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
                this.columnActive.AllowDBNull = false;
                this.columnContractor.AllowDBNull = false;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnEmployeeID.Unique = true;
                this.columnEmployeeBonusID.AutoIncrement = true;
                this.columnEmployeeBonusID.AutoIncrementSeed = -1;
                this.columnEmployeeBonusID.AutoIncrementStep = -1;
                this.columnEmployeeBonusID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonusRow NewBonusRow() {
                return ((BonusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BonusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BonusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BonusRowChanged != null)) {
                    this.BonusRowChanged(this, new BonusRowChangeEvent(((BonusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BonusRowChanging != null)) {
                    this.BonusRowChanging(this, new BonusRowChangeEvent(((BonusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BonusRowDeleted != null)) {
                    this.BonusRowDeleted(this, new BonusRowChangeEvent(((BonusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BonusRowDeleting != null)) {
                    this.BonusRowDeleting(this, new BonusRowChangeEvent(((BonusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBonusRow(BonusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BonusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeBonusDataTable : global::System.Data.TypedTableBase<EmployeeBonusRow> {
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnBonus;
            
            private global::System.Data.DataColumn columnQualityBonus;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnEmployeeBonusID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeBonusDataTable() {
                this.TableName = "EmployeeBonus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeBonusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeBonusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BonusColumn {
                get {
                    return this.columnBonus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityBonusColumn {
                get {
                    return this.columnQualityBonus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeBonusIDColumn {
                get {
                    return this.columnEmployeeBonusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeBonusRow this[int index] {
                get {
                    return ((EmployeeBonusRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeBonusRowChangeEventHandler EmployeeBonusRowChanging;
            
            public event EmployeeBonusRowChangeEventHandler EmployeeBonusRowChanged;
            
            public event EmployeeBonusRowChangeEventHandler EmployeeBonusRowDeleting;
            
            public event EmployeeBonusRowChangeEventHandler EmployeeBonusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeBonusRow(EmployeeBonusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeBonusRow AddEmployeeBonusRow(EmployeeRow parentEmployeeRowByFK_EmployeeBonus_Employee, decimal Bonus, decimal QualityBonus, int Year) {
                EmployeeBonusRow rowEmployeeBonusRow = ((EmployeeBonusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Bonus,
                        QualityBonus,
                        Year,
                        null};
                if ((parentEmployeeRowByFK_EmployeeBonus_Employee != null)) {
                    columnValuesArray[0] = parentEmployeeRowByFK_EmployeeBonus_Employee[0];
                }
                rowEmployeeBonusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployeeBonusRow);
                return rowEmployeeBonusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeBonusRow FindByEmployeeBonusID(int EmployeeBonusID) {
                return ((EmployeeBonusRow)(this.Rows.Find(new object[] {
                            EmployeeBonusID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmployeeBonusDataTable cln = ((EmployeeBonusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmployeeBonusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnBonus = base.Columns["Bonus"];
                this.columnQualityBonus = base.Columns["QualityBonus"];
                this.columnYear = base.Columns["Year"];
                this.columnEmployeeBonusID = base.Columns["EmployeeBonusID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnBonus = new global::System.Data.DataColumn("Bonus", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBonus);
                this.columnQualityBonus = new global::System.Data.DataColumn("QualityBonus", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualityBonus);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnEmployeeBonusID = new global::System.Data.DataColumn("EmployeeBonusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeBonusID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmployeeBonusID}, true));
                this.columnEmployeeID.AllowDBNull = false;
                this.columnEmployeeBonusID.AutoIncrement = true;
                this.columnEmployeeBonusID.AutoIncrementSeed = -1;
                this.columnEmployeeBonusID.AutoIncrementStep = -1;
                this.columnEmployeeBonusID.AllowDBNull = false;
                this.columnEmployeeBonusID.ReadOnly = true;
                this.columnEmployeeBonusID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeBonusRow NewEmployeeBonusRow() {
                return ((EmployeeBonusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmployeeBonusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmployeeBonusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeBonusRowChanged != null)) {
                    this.EmployeeBonusRowChanged(this, new EmployeeBonusRowChangeEvent(((EmployeeBonusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeBonusRowChanging != null)) {
                    this.EmployeeBonusRowChanging(this, new EmployeeBonusRowChangeEvent(((EmployeeBonusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeBonusRowDeleted != null)) {
                    this.EmployeeBonusRowDeleted(this, new EmployeeBonusRowChangeEvent(((EmployeeBonusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeBonusRowDeleting != null)) {
                    this.EmployeeBonusRowDeleting(this, new EmployeeBonusRowChangeEvent(((EmployeeBonusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeBonusRow(EmployeeBonusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MMSDataSet ds = new MMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeBonusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerRow : global::System.Data.DataRow {
            
            private CustomerDataTable tableCustomer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomer = ((CustomerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerID {
                get {
                    return ((int)(this[this.tableCustomer.CustomerIDColumn]));
                }
                set {
                    this[this.tableCustomer.CustomerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone1 {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.Phone1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone1\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Phone1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone2 {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.Phone2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone2\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Phone2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Modified {
                get {
                    try {
                        return ((byte[])(this[this.tableCustomer.ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool BusinessType {
                get {
                    try {
                        return ((bool)(this[this.tableCustomer.BusinessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BusinessType\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.BusinessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Newsletter {
                get {
                    try {
                        return ((bool)(this[this.tableCustomer.NewsletterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Newsletter\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.NewsletterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableCustomer.ActiveColumn]));
                }
                set {
                    this[this.tableCustomer.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GroupType {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.GroupTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupType\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.GroupTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountNumber {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.AccountNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountNumber\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.AccountNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BusinessName {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.BusinessNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BusinessName\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.BusinessNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableCustomer.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableCustomer.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableCustomer.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableCustomer.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableCustomer.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableCustomer.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableCustomer.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableCustomer.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableCustomer.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableCustomer.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableCustomer.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableCustomer.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhone1Null() {
                return this.IsNull(this.tableCustomer.Phone1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhone1Null() {
                this[this.tableCustomer.Phone1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhone2Null() {
                return this.IsNull(this.tableCustomer.Phone2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhone2Null() {
                this[this.tableCustomer.Phone2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableCustomer.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableCustomer.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedNull() {
                return this.IsNull(this.tableCustomer.ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedNull() {
                this[this.tableCustomer.ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessTypeNull() {
                return this.IsNull(this.tableCustomer.BusinessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessTypeNull() {
                this[this.tableCustomer.BusinessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableCustomer.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableCustomer.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewsletterNull() {
                return this.IsNull(this.tableCustomer.NewsletterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewsletterNull() {
                this[this.tableCustomer.NewsletterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupTypeNull() {
                return this.IsNull(this.tableCustomer.GroupTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupTypeNull() {
                this[this.tableCustomer.GroupTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNumberNull() {
                return this.IsNull(this.tableCustomer.AccountNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNumberNull() {
                this[this.tableCustomer.AccountNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessNameNull() {
                return this.IsNull(this.tableCustomer.BusinessNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessNameNull() {
                this[this.tableCustomer.BusinessNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow[] GetPropertyRows() {
                if ((this.Table.ChildRelations["FK_Property_Customer"] == null)) {
                    return new PropertyRow[0];
                }
                else {
                    return ((PropertyRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Property_Customer"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PropertyRow : global::System.Data.DataRow {
            
            private PropertyDataTable tableProperty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PropertyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProperty = ((PropertyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PropertyID {
                get {
                    return ((int)(this[this.tableProperty.PropertyIDColumn]));
                }
                set {
                    this[this.tableProperty.PropertyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerID {
                get {
                    return ((int)(this[this.tableProperty.CustomerIDColumn]));
                }
                set {
                    this[this.tableProperty.CustomerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableProperty.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperty.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableProperty.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'Property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperty.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableProperty.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'Property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperty.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableProperty.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'Property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperty.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableProperty.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'Property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperty.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableProperty.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'Property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperty.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subdivision {
                get {
                    try {
                        return ((string)(this[this.tableProperty.SubdivisionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subdivision\' in table \'Property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperty.SubdivisionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableProperty.ActiveColumn]));
                }
                set {
                    this[this.tableProperty.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountNumber {
                get {
                    try {
                        return ((string)(this[this.tableProperty.AccountNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountNumber\' in table \'Property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperty.AccountNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GroupType {
                get {
                    try {
                        return ((string)(this[this.tableProperty.GroupTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupType\' in table \'Property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperty.GroupTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GutterRegion {
                get {
                    try {
                        return ((string)(this[this.tableProperty.GutterRegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GutterRegion\' in table \'Property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperty.GutterRegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow CustomerRow {
                get {
                    return ((CustomerRow)(this.GetParentRow(this.Table.ParentRelations["FK_Property_Customer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Property_Customer"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewletterRow CustomerNewletterRow {
                get {
                    return ((CustomerNewletterRow)(this.GetParentRow(this.Table.ParentRelations["FK_Property_Customer2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Property_Customer2"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableProperty.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableProperty.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableProperty.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableProperty.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableProperty.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableProperty.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableProperty.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableProperty.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableProperty.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableProperty.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tableProperty.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tableProperty.PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubdivisionNull() {
                return this.IsNull(this.tableProperty.SubdivisionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubdivisionNull() {
                this[this.tableProperty.SubdivisionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNumberNull() {
                return this.IsNull(this.tableProperty.AccountNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNumberNull() {
                this[this.tableProperty.AccountNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupTypeNull() {
                return this.IsNull(this.tableProperty.GroupTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupTypeNull() {
                this[this.tableProperty.GroupTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGutterRegionNull() {
                return this.IsNull(this.tableProperty.GutterRegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGutterRegionNull() {
                this[this.tableProperty.GutterRegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRow[] GetServiceRows() {
                if ((this.Table.ChildRelations["FK_Service_Property"] == null)) {
                    return new ServiceRow[0];
                }
                else {
                    return ((ServiceRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Service_Property"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerJobRow[] GetCustomerJobRows() {
                if ((this.Table.ChildRelations["FK_CustomerJob_Property"] == null)) {
                    return new CustomerJobRow[0];
                }
                else {
                    return ((CustomerJobRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CustomerJob_Property"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyJobsRow[] GetCustPropertyJobsRows() {
                if ((this.Table.ChildRelations["FK_CustomerJob_Property1"] == null)) {
                    return new CustPropertyJobsRow[0];
                }
                else {
                    return ((CustPropertyJobsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CustomerJob_Property1"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeRow : global::System.Data.DataRow {
            
            private EmployeeDataTable tableEmployee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployee = ((EmployeeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableEmployee.EmployeeIDColumn]));
                }
                set {
                    this[this.tableEmployee.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableEmployee.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'Employee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableEmployee.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'Employee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableEmployee.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'Employee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableEmployee.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'Employee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableEmployee.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'Employee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableEmployee.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'Employee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone1 {
                get {
                    try {
                        return ((string)(this[this.tableEmployee.Phone1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone1\' in table \'Employee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee.Phone1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone2 {
                get {
                    try {
                        return ((string)(this[this.tableEmployee.Phone2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone2\' in table \'Employee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee.Phone2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableEmployee.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'Employee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Contractor {
                get {
                    return ((bool)(this[this.tableEmployee.ContractorColumn]));
                }
                set {
                    this[this.tableEmployee.ContractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableEmployee.ActiveColumn]));
                }
                set {
                    this[this.tableEmployee.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableEmployee.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableEmployee.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableEmployee.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableEmployee.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableEmployee.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableEmployee.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableEmployee.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableEmployee.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableEmployee.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableEmployee.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableEmployee.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableEmployee.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhone1Null() {
                return this.IsNull(this.tableEmployee.Phone1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhone1Null() {
                this[this.tableEmployee.Phone1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhone2Null() {
                return this.IsNull(this.tableEmployee.Phone2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhone2Null() {
                this[this.tableEmployee.Phone2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableEmployee.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableEmployee.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewRow[] GetCrewRows() {
                if ((this.Table.ChildRelations["FK_Crew_Employee"] == null)) {
                    return new CrewRow[0];
                }
                else {
                    return ((CrewRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Crew_Employee"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewNameRow[] GetCrewNameRows() {
                if ((this.Table.ChildRelations["FK_Crew_Employee1"] == null)) {
                    return new CrewNameRow[0];
                }
                else {
                    return ((CrewNameRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Crew_Employee1"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeBonusRow[] GetEmployeeBonusRows() {
                if ((this.Table.ChildRelations["FK_EmployeeBonus_Employee"] == null)) {
                    return new EmployeeBonusRow[0];
                }
                else {
                    return ((EmployeeBonusRow[])(base.GetChildRows(this.Table.ChildRelations["FK_EmployeeBonus_Employee"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerJobRow : global::System.Data.DataRow {
            
            private CustomerJobDataTable tableCustomerJob;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerJobRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomerJob = ((CustomerJobDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCustomerJob.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Repeat {
                get {
                    try {
                        return ((bool)(this[this.tableCustomerJob.RepeatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Repeat\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.RepeatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Frequency {
                get {
                    try {
                        return ((int)(this[this.tableCustomerJob.FrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frequency\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IntervalType {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.IntervalTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IntervalType\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.IntervalTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cost {
                get {
                    try {
                        return ((decimal)(this[this.tableCustomerJob.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostContractor {
                get {
                    try {
                        return ((decimal)(this[this.tableCustomerJob.CostContractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostContractor\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.CostContractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostFourStep {
                get {
                    try {
                        return ((decimal)(this[this.tableCustomerJob.CostFourStepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostFourStep\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.CostFourStepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Instructions {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.InstructionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Instructions\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.InstructionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PropertyID {
                get {
                    return ((int)(this[this.tableCustomerJob.PropertyIDColumn]));
                }
                set {
                    this[this.tableCustomerJob.PropertyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ManHours {
                get {
                    try {
                        return ((float)(this[this.tableCustomerJob.ManHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManHours\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.ManHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Compliments {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.ComplimentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Compliments\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.ComplimentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Complaints {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.ComplaintsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Complaints\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.ComplaintsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostB {
                get {
                    try {
                        return ((decimal)(this[this.tableCustomerJob.CostBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostB\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.CostBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostC {
                get {
                    try {
                        return ((decimal)(this[this.tableCustomerJob.CostCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostC\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.CostCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CrewKey {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.CrewKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CrewKey\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.CrewKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SelectPrint {
                get {
                    try {
                        return ((bool)(this[this.tableCustomerJob.SelectPrintColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SelectPrint\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.SelectPrintColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaterialCost {
                get {
                    try {
                        return ((decimal)(this[this.tableCustomerJob.MaterialCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialCost\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.MaterialCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Revenue {
                get {
                    try {
                        return ((decimal)(this[this.tableCustomerJob.RevenueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Revenue\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.RevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBInvoiceID {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.QBInvoiceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBInvoiceID\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.QBInvoiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBItemID {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.QBItemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBItemID\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.QBItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBItemIDB {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.QBItemIDBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBItemIDB\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.QBItemIDBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBItemIDC {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.QBItemIDCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBItemIDC\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.QBItemIDCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepJob {
                get {
                    try {
                        return ((bool)(this[this.tableCustomerJob.FourStepJobColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepJob\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.FourStepJobColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CustomerJobID {
                get {
                    return ((long)(this[this.tableCustomerJob.CustomerJobIDColumn]));
                }
                set {
                    this[this.tableCustomerJob.CustomerJobIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FourStepMat {
                get {
                    try {
                        return ((float)(this[this.tableCustomerJob.FourStepMatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepMat\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.FourStepMatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBDescription {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.QBDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBDescription\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.QBDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepJob2 {
                get {
                    try {
                        return ((bool)(this[this.tableCustomerJob.FourStepJob2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepJob2\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.FourStepJob2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepJob3 {
                get {
                    try {
                        return ((bool)(this[this.tableCustomerJob.FourStepJob3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepJob3\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.FourStepJob3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepJob4 {
                get {
                    try {
                        return ((bool)(this[this.tableCustomerJob.FourStepJob4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepJob4\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.FourStepJob4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepJob1 {
                get {
                    try {
                        return ((bool)(this[this.tableCustomerJob.FourStepJob1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepJob1\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.FourStepJob1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBDescriptionA {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.QBDescriptionAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBDescriptionA\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.QBDescriptionAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostD {
                get {
                    try {
                        return ((decimal)(this[this.tableCustomerJob.CostDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostD\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.CostDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBItemIDD {
                get {
                    try {
                        return ((string)(this[this.tableCustomerJob.QBItemIDDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBItemIDD\' in table \'CustomerJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerJob.QBItemIDDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow PropertyRow {
                get {
                    return ((PropertyRow)(this.GetParentRow(this.Table.ParentRelations["FK_CustomerJob_Property"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CustomerJob_Property"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableCustomerJob.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableCustomerJob.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableCustomerJob.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableCustomerJob.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepeatNull() {
                return this.IsNull(this.tableCustomerJob.RepeatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepeatNull() {
                this[this.tableCustomerJob.RepeatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrequencyNull() {
                return this.IsNull(this.tableCustomerJob.FrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrequencyNull() {
                this[this.tableCustomerJob.FrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIntervalTypeNull() {
                return this.IsNull(this.tableCustomerJob.IntervalTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIntervalTypeNull() {
                this[this.tableCustomerJob.IntervalTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tableCustomerJob.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tableCustomerJob.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostContractorNull() {
                return this.IsNull(this.tableCustomerJob.CostContractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostContractorNull() {
                this[this.tableCustomerJob.CostContractorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostFourStepNull() {
                return this.IsNull(this.tableCustomerJob.CostFourStepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostFourStepNull() {
                this[this.tableCustomerJob.CostFourStepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstructionsNull() {
                return this.IsNull(this.tableCustomerJob.InstructionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstructionsNull() {
                this[this.tableCustomerJob.InstructionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableCustomerJob.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableCustomerJob.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManHoursNull() {
                return this.IsNull(this.tableCustomerJob.ManHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManHoursNull() {
                this[this.tableCustomerJob.ManHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComplimentsNull() {
                return this.IsNull(this.tableCustomerJob.ComplimentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComplimentsNull() {
                this[this.tableCustomerJob.ComplimentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComplaintsNull() {
                return this.IsNull(this.tableCustomerJob.ComplaintsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComplaintsNull() {
                this[this.tableCustomerJob.ComplaintsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostBNull() {
                return this.IsNull(this.tableCustomerJob.CostBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostBNull() {
                this[this.tableCustomerJob.CostBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCNull() {
                return this.IsNull(this.tableCustomerJob.CostCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCNull() {
                this[this.tableCustomerJob.CostCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCrewKeyNull() {
                return this.IsNull(this.tableCustomerJob.CrewKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCrewKeyNull() {
                this[this.tableCustomerJob.CrewKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectPrintNull() {
                return this.IsNull(this.tableCustomerJob.SelectPrintColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectPrintNull() {
                this[this.tableCustomerJob.SelectPrintColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialCostNull() {
                return this.IsNull(this.tableCustomerJob.MaterialCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialCostNull() {
                this[this.tableCustomerJob.MaterialCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRevenueNull() {
                return this.IsNull(this.tableCustomerJob.RevenueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRevenueNull() {
                this[this.tableCustomerJob.RevenueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBInvoiceIDNull() {
                return this.IsNull(this.tableCustomerJob.QBInvoiceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBInvoiceIDNull() {
                this[this.tableCustomerJob.QBInvoiceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBItemIDNull() {
                return this.IsNull(this.tableCustomerJob.QBItemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBItemIDNull() {
                this[this.tableCustomerJob.QBItemIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBItemIDBNull() {
                return this.IsNull(this.tableCustomerJob.QBItemIDBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBItemIDBNull() {
                this[this.tableCustomerJob.QBItemIDBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBItemIDCNull() {
                return this.IsNull(this.tableCustomerJob.QBItemIDCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBItemIDCNull() {
                this[this.tableCustomerJob.QBItemIDCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepJobNull() {
                return this.IsNull(this.tableCustomerJob.FourStepJobColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepJobNull() {
                this[this.tableCustomerJob.FourStepJobColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepMatNull() {
                return this.IsNull(this.tableCustomerJob.FourStepMatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepMatNull() {
                this[this.tableCustomerJob.FourStepMatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBDescriptionNull() {
                return this.IsNull(this.tableCustomerJob.QBDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBDescriptionNull() {
                this[this.tableCustomerJob.QBDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepJob2Null() {
                return this.IsNull(this.tableCustomerJob.FourStepJob2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepJob2Null() {
                this[this.tableCustomerJob.FourStepJob2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepJob3Null() {
                return this.IsNull(this.tableCustomerJob.FourStepJob3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepJob3Null() {
                this[this.tableCustomerJob.FourStepJob3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepJob4Null() {
                return this.IsNull(this.tableCustomerJob.FourStepJob4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepJob4Null() {
                this[this.tableCustomerJob.FourStepJob4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepJob1Null() {
                return this.IsNull(this.tableCustomerJob.FourStepJob1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepJob1Null() {
                this[this.tableCustomerJob.FourStepJob1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBDescriptionANull() {
                return this.IsNull(this.tableCustomerJob.QBDescriptionAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBDescriptionANull() {
                this[this.tableCustomerJob.QBDescriptionAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostDNull() {
                return this.IsNull(this.tableCustomerJob.CostDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostDNull() {
                this[this.tableCustomerJob.CostDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBItemIDDNull() {
                return this.IsNull(this.tableCustomerJob.QBItemIDDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBItemIDDNull() {
                this[this.tableCustomerJob.QBItemIDDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServiceRow : global::System.Data.DataRow {
            
            private ServiceDataTable tableService;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServiceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableService = ((ServiceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableService.ServiceIDColumn]));
                }
                set {
                    this[this.tableService.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableService.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SummerServices {
                get {
                    try {
                        return ((string)(this[this.tableService.SummerServicesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SummerServices\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.SummerServicesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FallServices {
                get {
                    try {
                        return ((string)(this[this.tableService.FallServicesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FallServices\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FallServicesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WinterServices {
                get {
                    try {
                        return ((string)(this[this.tableService.WinterServicesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WinterServices\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.WinterServicesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropMow {
                get {
                    try {
                        return ((decimal)(this[this.tableService.PropMowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropMow\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.PropMowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropFourStep {
                get {
                    try {
                        return ((decimal)(this[this.tableService.PropFourStepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropFourStep\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.PropFourStepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropSeed {
                get {
                    try {
                        return ((decimal)(this[this.tableService.PropSeedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropSeed\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.PropSeedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropFertilize {
                get {
                    try {
                        return ((decimal)(this[this.tableService.PropFertilizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropFertilize\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.PropFertilizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropLime {
                get {
                    try {
                        return ((decimal)(this[this.tableService.PropLimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropLime\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.PropLimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropAeration {
                get {
                    try {
                        return ((decimal)(this[this.tableService.PropAerationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropAeration\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.PropAerationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PropertyID {
                get {
                    try {
                        return ((int)(this[this.tableService.PropertyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropertyID\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.PropertyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FourStepMat {
                get {
                    try {
                        return ((int)(this[this.tableService.FourStepMatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepMat\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepMatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FourStepDate1 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableService.FourStepDate1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepDate1\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepDate1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FourStepDate2 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableService.FourStepDate2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepDate2\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepDate2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FourStepDate3 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableService.FourStepDate3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepDate3\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepDate3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FourStepDate4 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableService.FourStepDate4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepDate4\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepDate4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cost {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FourStepCost {
                get {
                    try {
                        return ((decimal)(this[this.tableService.FourStepCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepCost\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContractorCost {
                get {
                    try {
                        return ((decimal)(this[this.tableService.ContractorCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContractorCost\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.ContractorCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeafInstruct {
                get {
                    try {
                        return ((string)(this[this.tableService.LeafInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeafInstruct\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.LeafInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpecInstruct {
                get {
                    try {
                        return ((string)(this[this.tableService.SpecInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpecInstruct\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.SpecInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FourStepInstruct {
                get {
                    try {
                        return ((string)(this[this.tableService.FourStepInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepInstruct\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GutterInstruct {
                get {
                    try {
                        return ((string)(this[this.tableService.GutterInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GutterInstruct\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.GutterInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpringServices {
                get {
                    try {
                        return ((string)(this[this.tableService.SpringServicesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpringServices\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.SpringServicesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MowType {
                get {
                    try {
                        return ((bool)(this[this.tableService.MowTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MowType\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.MowTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepType {
                get {
                    try {
                        return ((bool)(this[this.tableService.FourStepTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepType\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LeafType {
                get {
                    try {
                        return ((bool)(this[this.tableService.LeafTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeafType\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.LeafTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GutterType {
                get {
                    try {
                        return ((bool)(this[this.tableService.GutterTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GutterType\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.GutterTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OtherType {
                get {
                    try {
                        return ((bool)(this[this.tableService.OtherTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherType\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.OtherTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frequency {
                get {
                    try {
                        return ((string)(this[this.tableService.FrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frequency\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FourStepMat1 {
                get {
                    try {
                        return ((float)(this[this.tableService.FourStepMat1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepMat1\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepMat1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostB {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CostBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostB\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CostBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostC {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CostCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostC\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CostCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaterialCost {
                get {
                    try {
                        return ((decimal)(this[this.tableService.MaterialCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialCost\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.MaterialCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ApplicationType {
                get {
                    try {
                        return ((bool)(this[this.tableService.ApplicationTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApplicationType\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.ApplicationTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PruningType {
                get {
                    try {
                        return ((bool)(this[this.tableService.PruningTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PruningType\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.PruningTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MulchingType {
                get {
                    try {
                        return ((bool)(this[this.tableService.MulchingTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MulchingType\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.MulchingTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostApp {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CostAppColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostApp\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CostAppColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostPruning {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CostPruningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostPruning\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CostPruningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostMulching {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CostMulchingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostMulching\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CostMulchingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostOther {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CostOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostOther\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CostOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCostB {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CCostBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCostB\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CCostBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCostC {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CCostCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCostC\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CCostCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCostApp {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CCostAppColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCostApp\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CCostAppColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCostPruning {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CCostPruningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCostPruning\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CCostPruningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCostMulching {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CCostMulchingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCostMulching\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CCostMulchingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCostOther {
                get {
                    try {
                        return ((decimal)(this[this.tableService.CCostOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCostOther\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.CCostOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AppInstruct {
                get {
                    try {
                        return ((string)(this[this.tableService.AppInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppInstruct\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.AppInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PruneInstruct {
                get {
                    try {
                        return ((string)(this[this.tableService.PruneInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PruneInstruct\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.PruneInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MulchInstruct {
                get {
                    try {
                        return ((string)(this[this.tableService.MulchInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MulchInstruct\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.MulchInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherInstruct {
                get {
                    try {
                        return ((string)(this[this.tableService.OtherInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherInstruct\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.OtherInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MulchingType2 {
                get {
                    try {
                        return ((bool)(this[this.tableService.MulchingType2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MulchingType2\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.MulchingType2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableService.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepType1 {
                get {
                    try {
                        return ((bool)(this[this.tableService.FourStepType1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepType1\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepType1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepType2 {
                get {
                    try {
                        return ((bool)(this[this.tableService.FourStepType2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepType2\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepType2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepType3 {
                get {
                    try {
                        return ((bool)(this[this.tableService.FourStepType3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepType3\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepType3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepType4 {
                get {
                    try {
                        return ((bool)(this[this.tableService.FourStepType4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepType4\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.FourStepType4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCost {
                get {
                    try {
                        return ((int)(this[this.tableService.YCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCost\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.YCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCostB {
                get {
                    try {
                        return ((int)(this[this.tableService.YCostBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCostB\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.YCostBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCostC {
                get {
                    try {
                        return ((int)(this[this.tableService.YCostCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCostC\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.YCostCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCostApp {
                get {
                    try {
                        return ((int)(this[this.tableService.YCostAppColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCostApp\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.YCostAppColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCostPruning {
                get {
                    try {
                        return ((int)(this[this.tableService.YCostPruningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCostPruning\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.YCostPruningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCostMulching {
                get {
                    try {
                        return ((int)(this[this.tableService.YCostMulchingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCostMulching\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.YCostMulchingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCostOther {
                get {
                    try {
                        return ((int)(this[this.tableService.YCostOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCostOther\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.YCostOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCost4Step {
                get {
                    try {
                        return ((int)(this[this.tableService.YCost4StepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCost4Step\' in table \'Service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableService.YCost4StepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow PropertyRow {
                get {
                    return ((PropertyRow)(this.GetParentRow(this.Table.ParentRelations["FK_Service_Property"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Service_Property"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableService.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableService.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSummerServicesNull() {
                return this.IsNull(this.tableService.SummerServicesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSummerServicesNull() {
                this[this.tableService.SummerServicesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFallServicesNull() {
                return this.IsNull(this.tableService.FallServicesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFallServicesNull() {
                this[this.tableService.FallServicesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWinterServicesNull() {
                return this.IsNull(this.tableService.WinterServicesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWinterServicesNull() {
                this[this.tableService.WinterServicesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropMowNull() {
                return this.IsNull(this.tableService.PropMowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropMowNull() {
                this[this.tableService.PropMowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropFourStepNull() {
                return this.IsNull(this.tableService.PropFourStepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropFourStepNull() {
                this[this.tableService.PropFourStepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropSeedNull() {
                return this.IsNull(this.tableService.PropSeedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropSeedNull() {
                this[this.tableService.PropSeedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropFertilizeNull() {
                return this.IsNull(this.tableService.PropFertilizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropFertilizeNull() {
                this[this.tableService.PropFertilizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropLimeNull() {
                return this.IsNull(this.tableService.PropLimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropLimeNull() {
                this[this.tableService.PropLimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropAerationNull() {
                return this.IsNull(this.tableService.PropAerationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropAerationNull() {
                this[this.tableService.PropAerationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropertyIDNull() {
                return this.IsNull(this.tableService.PropertyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropertyIDNull() {
                this[this.tableService.PropertyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepMatNull() {
                return this.IsNull(this.tableService.FourStepMatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepMatNull() {
                this[this.tableService.FourStepMatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepDate1Null() {
                return this.IsNull(this.tableService.FourStepDate1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepDate1Null() {
                this[this.tableService.FourStepDate1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepDate2Null() {
                return this.IsNull(this.tableService.FourStepDate2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepDate2Null() {
                this[this.tableService.FourStepDate2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepDate3Null() {
                return this.IsNull(this.tableService.FourStepDate3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepDate3Null() {
                this[this.tableService.FourStepDate3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepDate4Null() {
                return this.IsNull(this.tableService.FourStepDate4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepDate4Null() {
                this[this.tableService.FourStepDate4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tableService.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tableService.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepCostNull() {
                return this.IsNull(this.tableService.FourStepCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepCostNull() {
                this[this.tableService.FourStepCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractorCostNull() {
                return this.IsNull(this.tableService.ContractorCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractorCostNull() {
                this[this.tableService.ContractorCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeafInstructNull() {
                return this.IsNull(this.tableService.LeafInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeafInstructNull() {
                this[this.tableService.LeafInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecInstructNull() {
                return this.IsNull(this.tableService.SpecInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecInstructNull() {
                this[this.tableService.SpecInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepInstructNull() {
                return this.IsNull(this.tableService.FourStepInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepInstructNull() {
                this[this.tableService.FourStepInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGutterInstructNull() {
                return this.IsNull(this.tableService.GutterInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGutterInstructNull() {
                this[this.tableService.GutterInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpringServicesNull() {
                return this.IsNull(this.tableService.SpringServicesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpringServicesNull() {
                this[this.tableService.SpringServicesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMowTypeNull() {
                return this.IsNull(this.tableService.MowTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMowTypeNull() {
                this[this.tableService.MowTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepTypeNull() {
                return this.IsNull(this.tableService.FourStepTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepTypeNull() {
                this[this.tableService.FourStepTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeafTypeNull() {
                return this.IsNull(this.tableService.LeafTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeafTypeNull() {
                this[this.tableService.LeafTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGutterTypeNull() {
                return this.IsNull(this.tableService.GutterTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGutterTypeNull() {
                this[this.tableService.GutterTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherTypeNull() {
                return this.IsNull(this.tableService.OtherTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherTypeNull() {
                this[this.tableService.OtherTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrequencyNull() {
                return this.IsNull(this.tableService.FrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrequencyNull() {
                this[this.tableService.FrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepMat1Null() {
                return this.IsNull(this.tableService.FourStepMat1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepMat1Null() {
                this[this.tableService.FourStepMat1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostBNull() {
                return this.IsNull(this.tableService.CostBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostBNull() {
                this[this.tableService.CostBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCNull() {
                return this.IsNull(this.tableService.CostCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCNull() {
                this[this.tableService.CostCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialCostNull() {
                return this.IsNull(this.tableService.MaterialCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialCostNull() {
                this[this.tableService.MaterialCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplicationTypeNull() {
                return this.IsNull(this.tableService.ApplicationTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplicationTypeNull() {
                this[this.tableService.ApplicationTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPruningTypeNull() {
                return this.IsNull(this.tableService.PruningTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPruningTypeNull() {
                this[this.tableService.PruningTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMulchingTypeNull() {
                return this.IsNull(this.tableService.MulchingTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMulchingTypeNull() {
                this[this.tableService.MulchingTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostAppNull() {
                return this.IsNull(this.tableService.CostAppColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostAppNull() {
                this[this.tableService.CostAppColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostPruningNull() {
                return this.IsNull(this.tableService.CostPruningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostPruningNull() {
                this[this.tableService.CostPruningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostMulchingNull() {
                return this.IsNull(this.tableService.CostMulchingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostMulchingNull() {
                this[this.tableService.CostMulchingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostOtherNull() {
                return this.IsNull(this.tableService.CostOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostOtherNull() {
                this[this.tableService.CostOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCostBNull() {
                return this.IsNull(this.tableService.CCostBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCostBNull() {
                this[this.tableService.CCostBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCostCNull() {
                return this.IsNull(this.tableService.CCostCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCostCNull() {
                this[this.tableService.CCostCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCostAppNull() {
                return this.IsNull(this.tableService.CCostAppColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCostAppNull() {
                this[this.tableService.CCostAppColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCostPruningNull() {
                return this.IsNull(this.tableService.CCostPruningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCostPruningNull() {
                this[this.tableService.CCostPruningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCostMulchingNull() {
                return this.IsNull(this.tableService.CCostMulchingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCostMulchingNull() {
                this[this.tableService.CCostMulchingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCostOtherNull() {
                return this.IsNull(this.tableService.CCostOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCostOtherNull() {
                this[this.tableService.CCostOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppInstructNull() {
                return this.IsNull(this.tableService.AppInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppInstructNull() {
                this[this.tableService.AppInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPruneInstructNull() {
                return this.IsNull(this.tableService.PruneInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPruneInstructNull() {
                this[this.tableService.PruneInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMulchInstructNull() {
                return this.IsNull(this.tableService.MulchInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMulchInstructNull() {
                this[this.tableService.MulchInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherInstructNull() {
                return this.IsNull(this.tableService.OtherInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherInstructNull() {
                this[this.tableService.OtherInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMulchingType2Null() {
                return this.IsNull(this.tableService.MulchingType2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMulchingType2Null() {
                this[this.tableService.MulchingType2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableService.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableService.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepType1Null() {
                return this.IsNull(this.tableService.FourStepType1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepType1Null() {
                this[this.tableService.FourStepType1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepType2Null() {
                return this.IsNull(this.tableService.FourStepType2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepType2Null() {
                this[this.tableService.FourStepType2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepType3Null() {
                return this.IsNull(this.tableService.FourStepType3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepType3Null() {
                this[this.tableService.FourStepType3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepType4Null() {
                return this.IsNull(this.tableService.FourStepType4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepType4Null() {
                this[this.tableService.FourStepType4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostNull() {
                return this.IsNull(this.tableService.YCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostNull() {
                this[this.tableService.YCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostBNull() {
                return this.IsNull(this.tableService.YCostBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostBNull() {
                this[this.tableService.YCostBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostCNull() {
                return this.IsNull(this.tableService.YCostCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostCNull() {
                this[this.tableService.YCostCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostAppNull() {
                return this.IsNull(this.tableService.YCostAppColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostAppNull() {
                this[this.tableService.YCostAppColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostPruningNull() {
                return this.IsNull(this.tableService.YCostPruningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostPruningNull() {
                this[this.tableService.YCostPruningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostMulchingNull() {
                return this.IsNull(this.tableService.YCostMulchingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostMulchingNull() {
                this[this.tableService.YCostMulchingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostOtherNull() {
                return this.IsNull(this.tableService.YCostOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostOtherNull() {
                this[this.tableService.YCostOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCost4StepNull() {
                return this.IsNull(this.tableService.YCost4StepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCost4StepNull() {
                this[this.tableService.YCost4StepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteRow[] GetRouteRows() {
                if ((this.Table.ChildRelations["FK_Route_Service1"] == null)) {
                    return new RouteRow[0];
                }
                else {
                    return ((RouteRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Route_Service1"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RouteRow : global::System.Data.DataRow {
            
            private RouteDataTable tableRoute;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RouteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRoute = ((RouteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RouteID {
                get {
                    return ((int)(this[this.tableRoute.RouteIDColumn]));
                }
                set {
                    this[this.tableRoute.RouteIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RouteOrder {
                get {
                    try {
                        return ((long)(this[this.tableRoute.RouteOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RouteOrder\' in table \'Route\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoute.RouteOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RouteName {
                get {
                    if (this.IsRouteNameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableRoute.RouteNameColumn]));
                    }
                }
                set {
                    this[this.tableRoute.RouteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    if (this.IsNotesNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableRoute.NotesColumn]));
                    }
                }
                set {
                    this[this.tableRoute.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PropertyID {
                get {
                    return ((int)(this[this.tableRoute.PropertyIDColumn]));
                }
                set {
                    this[this.tableRoute.PropertyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRow ServiceRow {
                get {
                    return ((ServiceRow)(this.GetParentRow(this.Table.ParentRelations["FK_Route_Service1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Route_Service1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRouteOrderNull() {
                return this.IsNull(this.tableRoute.RouteOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRouteOrderNull() {
                this[this.tableRoute.RouteOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRouteNameNull() {
                return this.IsNull(this.tableRoute.RouteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRouteNameNull() {
                this[this.tableRoute.RouteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableRoute.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableRoute.NotesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustPropertyRow : global::System.Data.DataRow {
            
            private CustPropertyDataTable tableCustProperty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustPropertyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustProperty = ((CustPropertyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    return ((string)(this[this.tableCustProperty.LastNameColumn]));
                }
                set {
                    this[this.tableCustProperty.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableCustProperty.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'CustProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustProperty.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableCustProperty.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'CustProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustProperty.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableCustProperty.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'CustProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustProperty.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableCustProperty.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'CustProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustProperty.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableCustProperty.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'CustProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustProperty.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableCustProperty.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'CustProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustProperty.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subdivision {
                get {
                    try {
                        return ((string)(this[this.tableCustProperty.SubdivisionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subdivision\' in table \'CustProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustProperty.SubdivisionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PropertyID {
                get {
                    return ((int)(this[this.tableCustProperty.PropertyIDColumn]));
                }
                set {
                    this[this.tableCustProperty.PropertyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableCustProperty.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableCustProperty.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableCustProperty.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableCustProperty.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableCustProperty.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableCustProperty.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableCustProperty.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableCustProperty.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableCustProperty.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableCustProperty.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableCustProperty.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableCustProperty.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubdivisionNull() {
                return this.IsNull(this.tableCustProperty.SubdivisionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubdivisionNull() {
                this[this.tableCustProperty.SubdivisionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CrewRow : global::System.Data.DataRow {
            
            private CrewDataTable tableCrew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CrewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCrew = ((CrewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeId {
                get {
                    try {
                        return ((int)(this[this.tableCrew.EmployeeIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeId\' in table \'Crew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrew.EmployeeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerJobID {
                get {
                    try {
                        return ((int)(this[this.tableCrew.CustomerJobIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerJobID\' in table \'Crew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrew.CustomerJobIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow EmployeeRow {
                get {
                    return ((EmployeeRow)(this.GetParentRow(this.Table.ParentRelations["FK_Crew_Employee"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Crew_Employee"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonusRow BonusRow {
                get {
                    return ((BonusRow)(this.GetParentRow(this.Table.ParentRelations["FK_Crew_Employee2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Crew_Employee2"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeIdNull() {
                return this.IsNull(this.tableCrew.EmployeeIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeIdNull() {
                this[this.tableCrew.EmployeeIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerJobIDNull() {
                return this.IsNull(this.tableCrew.CustomerJobIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerJobIDNull() {
                this[this.tableCrew.CustomerJobIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VendorRow : global::System.Data.DataRow {
            
            private VendorDataTable tableVendor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VendorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVendor = ((VendorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VendorID {
                get {
                    return ((int)(this[this.tableVendor.VendorIDColumn]));
                }
                set {
                    this[this.tableVendor.VendorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorName {
                get {
                    try {
                        return ((string)(this[this.tableVendor.VendorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VendorName\' in table \'Vendor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.VendorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableVendor.ContactNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContactName\' in table \'Vendor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.ContactNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableVendor.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'Vendor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableVendor.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'Vendor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableVendor.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'Vendor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableVendor.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'Vendor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneNumber {
                get {
                    try {
                        return ((string)(this[this.tableVendor.PhoneNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhoneNumber\' in table \'Vendor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.PhoneNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FaxNumber {
                get {
                    try {
                        return ((string)(this[this.tableVendor.FaxNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FaxNumber\' in table \'Vendor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.FaxNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableVendor.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'Vendor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Website {
                get {
                    try {
                        return ((string)(this[this.tableVendor.WebsiteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Website\' in table \'Vendor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.WebsiteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableVendor.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'Vendor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableVendor.ActiveColumn]));
                }
                set {
                    this[this.tableVendor.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorNameNull() {
                return this.IsNull(this.tableVendor.VendorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorNameNull() {
                this[this.tableVendor.VendorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactNameNull() {
                return this.IsNull(this.tableVendor.ContactNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactNameNull() {
                this[this.tableVendor.ContactNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableVendor.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableVendor.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableVendor.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableVendor.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableVendor.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableVendor.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableVendor.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableVendor.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNumberNull() {
                return this.IsNull(this.tableVendor.PhoneNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNumberNull() {
                this[this.tableVendor.PhoneNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFaxNumberNull() {
                return this.IsNull(this.tableVendor.FaxNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFaxNumberNull() {
                this[this.tableVendor.FaxNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableVendor.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableVendor.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWebsiteNull() {
                return this.IsNull(this.tableVendor.WebsiteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWebsiteNull() {
                this[this.tableVendor.WebsiteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableVendor.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableVendor.NotesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PropServiceRow : global::System.Data.DataRow {
            
            private PropServiceDataTable tablePropService;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PropServiceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePropService = ((PropServiceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tablePropService.ServiceIDColumn]));
                }
                set {
                    this[this.tablePropService.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PropertyID {
                get {
                    try {
                        return ((int)(this[this.tablePropService.PropertyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropertyID\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.PropertyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePropService.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MowType {
                get {
                    try {
                        return ((bool)(this[this.tablePropService.MowTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MowType\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.MowTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepType {
                get {
                    try {
                        return ((bool)(this[this.tablePropService.FourStepTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepType\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FourStepTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LeafType {
                get {
                    try {
                        return ((bool)(this[this.tablePropService.LeafTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeafType\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.LeafTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GutterType {
                get {
                    try {
                        return ((bool)(this[this.tablePropService.GutterTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GutterType\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.GutterTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OtherType {
                get {
                    try {
                        return ((bool)(this[this.tablePropService.OtherTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherType\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.OtherTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frequency {
                get {
                    try {
                        return ((string)(this[this.tablePropService.FrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frequency\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpringServices {
                get {
                    try {
                        return ((string)(this[this.tablePropService.SpringServicesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpringServices\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.SpringServicesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SummerServices {
                get {
                    try {
                        return ((string)(this[this.tablePropService.SummerServicesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SummerServices\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.SummerServicesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FallServices {
                get {
                    try {
                        return ((string)(this[this.tablePropService.FallServicesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FallServices\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FallServicesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WinterServices {
                get {
                    try {
                        return ((string)(this[this.tablePropService.WinterServicesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WinterServices\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.WinterServicesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FourStepMat {
                get {
                    try {
                        return ((float)(this[this.tablePropService.FourStepMatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepMat\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FourStepMatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FourStepDate1 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePropService.FourStepDate1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepDate1\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FourStepDate1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FourStepDate2 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePropService.FourStepDate2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepDate2\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FourStepDate2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FourStepDate3 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePropService.FourStepDate3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepDate3\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FourStepDate3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FourStepDate4 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePropService.FourStepDate4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepDate4\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FourStepDate4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropMow {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.PropMowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropMow\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.PropMowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropFourStep {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.PropFourStepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropFourStep\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.PropFourStepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropSeed {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.PropSeedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropSeed\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.PropSeedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropFertilize {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.PropFertilizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropFertilize\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.PropFertilizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropLime {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.PropLimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropLime\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.PropLimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropAeration {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.PropAerationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropAeration\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.PropAerationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cost {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FourStepCost {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.FourStepCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepCost\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FourStepCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContractorCost {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.ContractorCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContractorCost\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.ContractorCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeafInstruct {
                get {
                    try {
                        return ((string)(this[this.tablePropService.LeafInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeafInstruct\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.LeafInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpecInstruct {
                get {
                    try {
                        return ((string)(this[this.tablePropService.SpecInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpecInstruct\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.SpecInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FourStepInstruct {
                get {
                    try {
                        return ((string)(this[this.tablePropService.FourStepInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepInstruct\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FourStepInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GutterInstruct {
                get {
                    try {
                        return ((string)(this[this.tablePropService.GutterInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GutterInstruct\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.GutterInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tablePropService.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tablePropService.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tablePropService.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tablePropService.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tablePropService.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tablePropService.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tablePropService.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tablePropService.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subdivision {
                get {
                    try {
                        return ((string)(this[this.tablePropService.SubdivisionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subdivision\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.SubdivisionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GroupType {
                get {
                    try {
                        return ((string)(this[this.tablePropService.GroupTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupType\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.GroupTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostB {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CostBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostB\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CostBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostC {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CostCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostC\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CostCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaterialCost {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.MaterialCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialCost\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.MaterialCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ApplicationType {
                get {
                    try {
                        return ((bool)(this[this.tablePropService.ApplicationTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApplicationType\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.ApplicationTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PruningType {
                get {
                    try {
                        return ((bool)(this[this.tablePropService.PruningTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PruningType\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.PruningTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MulchingType {
                get {
                    try {
                        return ((bool)(this[this.tablePropService.MulchingTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MulchingType\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.MulchingTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostApp {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CostAppColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostApp\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CostAppColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostPruning {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CostPruningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostPruning\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CostPruningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostMulching {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CostMulchingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostMulching\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CostMulchingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostOther {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CostOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostOther\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CostOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCostB {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CCostBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCostB\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CCostBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCostC {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CCostCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCostC\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CCostCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCostApp {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CCostAppColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCostApp\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CCostAppColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCostPruning {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CCostPruningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCostPruning\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CCostPruningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCostMulching {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CCostMulchingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCostMulching\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CCostMulchingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCostOther {
                get {
                    try {
                        return ((decimal)(this[this.tablePropService.CCostOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCostOther\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.CCostOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AppInstruct {
                get {
                    try {
                        return ((string)(this[this.tablePropService.AppInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppInstruct\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.AppInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PruneInstruct {
                get {
                    try {
                        return ((string)(this[this.tablePropService.PruneInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PruneInstruct\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.PruneInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MulchInstruct {
                get {
                    try {
                        return ((string)(this[this.tablePropService.MulchInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MulchInstruct\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.MulchInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherInstruct {
                get {
                    try {
                        return ((string)(this[this.tablePropService.OtherInstructColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherInstruct\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.OtherInstructColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tablePropService.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GutterRegion {
                get {
                    try {
                        return ((string)(this[this.tablePropService.GutterRegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GutterRegion\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.GutterRegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepType1 {
                get {
                    try {
                        return ((bool)(this[this.tablePropService.FourStepType1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepType1\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FourStepType1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepType2 {
                get {
                    try {
                        return ((bool)(this[this.tablePropService.FourStepType2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepType2\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FourStepType2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepType3 {
                get {
                    try {
                        return ((bool)(this[this.tablePropService.FourStepType3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepType3\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FourStepType3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepType4 {
                get {
                    try {
                        return ((bool)(this[this.tablePropService.FourStepType4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepType4\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.FourStepType4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCost {
                get {
                    try {
                        return ((int)(this[this.tablePropService.YCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCost\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.YCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCostB {
                get {
                    try {
                        return ((int)(this[this.tablePropService.YCostBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCostB\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.YCostBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCostC {
                get {
                    try {
                        return ((int)(this[this.tablePropService.YCostCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCostC\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.YCostCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCostApp {
                get {
                    try {
                        return ((int)(this[this.tablePropService.YCostAppColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCostApp\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.YCostAppColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCostPruning {
                get {
                    try {
                        return ((int)(this[this.tablePropService.YCostPruningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCostPruning\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.YCostPruningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCostMulching {
                get {
                    try {
                        return ((int)(this[this.tablePropService.YCostMulchingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCostMulching\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.YCostMulchingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCostOther {
                get {
                    try {
                        return ((int)(this[this.tablePropService.YCostOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCostOther\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.YCostOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCost4Step {
                get {
                    try {
                        return ((int)(this[this.tablePropService.YCost4StepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCost4Step\' in table \'PropService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropService.YCost4StepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropertyIDNull() {
                return this.IsNull(this.tablePropService.PropertyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropertyIDNull() {
                this[this.tablePropService.PropertyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePropService.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePropService.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMowTypeNull() {
                return this.IsNull(this.tablePropService.MowTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMowTypeNull() {
                this[this.tablePropService.MowTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepTypeNull() {
                return this.IsNull(this.tablePropService.FourStepTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepTypeNull() {
                this[this.tablePropService.FourStepTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeafTypeNull() {
                return this.IsNull(this.tablePropService.LeafTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeafTypeNull() {
                this[this.tablePropService.LeafTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGutterTypeNull() {
                return this.IsNull(this.tablePropService.GutterTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGutterTypeNull() {
                this[this.tablePropService.GutterTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherTypeNull() {
                return this.IsNull(this.tablePropService.OtherTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherTypeNull() {
                this[this.tablePropService.OtherTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrequencyNull() {
                return this.IsNull(this.tablePropService.FrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrequencyNull() {
                this[this.tablePropService.FrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpringServicesNull() {
                return this.IsNull(this.tablePropService.SpringServicesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpringServicesNull() {
                this[this.tablePropService.SpringServicesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSummerServicesNull() {
                return this.IsNull(this.tablePropService.SummerServicesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSummerServicesNull() {
                this[this.tablePropService.SummerServicesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFallServicesNull() {
                return this.IsNull(this.tablePropService.FallServicesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFallServicesNull() {
                this[this.tablePropService.FallServicesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWinterServicesNull() {
                return this.IsNull(this.tablePropService.WinterServicesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWinterServicesNull() {
                this[this.tablePropService.WinterServicesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepMatNull() {
                return this.IsNull(this.tablePropService.FourStepMatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepMatNull() {
                this[this.tablePropService.FourStepMatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepDate1Null() {
                return this.IsNull(this.tablePropService.FourStepDate1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepDate1Null() {
                this[this.tablePropService.FourStepDate1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepDate2Null() {
                return this.IsNull(this.tablePropService.FourStepDate2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepDate2Null() {
                this[this.tablePropService.FourStepDate2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepDate3Null() {
                return this.IsNull(this.tablePropService.FourStepDate3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepDate3Null() {
                this[this.tablePropService.FourStepDate3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepDate4Null() {
                return this.IsNull(this.tablePropService.FourStepDate4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepDate4Null() {
                this[this.tablePropService.FourStepDate4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropMowNull() {
                return this.IsNull(this.tablePropService.PropMowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropMowNull() {
                this[this.tablePropService.PropMowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropFourStepNull() {
                return this.IsNull(this.tablePropService.PropFourStepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropFourStepNull() {
                this[this.tablePropService.PropFourStepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropSeedNull() {
                return this.IsNull(this.tablePropService.PropSeedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropSeedNull() {
                this[this.tablePropService.PropSeedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropFertilizeNull() {
                return this.IsNull(this.tablePropService.PropFertilizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropFertilizeNull() {
                this[this.tablePropService.PropFertilizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropLimeNull() {
                return this.IsNull(this.tablePropService.PropLimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropLimeNull() {
                this[this.tablePropService.PropLimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropAerationNull() {
                return this.IsNull(this.tablePropService.PropAerationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropAerationNull() {
                this[this.tablePropService.PropAerationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tablePropService.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tablePropService.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepCostNull() {
                return this.IsNull(this.tablePropService.FourStepCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepCostNull() {
                this[this.tablePropService.FourStepCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractorCostNull() {
                return this.IsNull(this.tablePropService.ContractorCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractorCostNull() {
                this[this.tablePropService.ContractorCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeafInstructNull() {
                return this.IsNull(this.tablePropService.LeafInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeafInstructNull() {
                this[this.tablePropService.LeafInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecInstructNull() {
                return this.IsNull(this.tablePropService.SpecInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecInstructNull() {
                this[this.tablePropService.SpecInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepInstructNull() {
                return this.IsNull(this.tablePropService.FourStepInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepInstructNull() {
                this[this.tablePropService.FourStepInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGutterInstructNull() {
                return this.IsNull(this.tablePropService.GutterInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGutterInstructNull() {
                this[this.tablePropService.GutterInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tablePropService.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tablePropService.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tablePropService.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tablePropService.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablePropService.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tablePropService.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tablePropService.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tablePropService.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tablePropService.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tablePropService.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tablePropService.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tablePropService.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tablePropService.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tablePropService.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tablePropService.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tablePropService.PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubdivisionNull() {
                return this.IsNull(this.tablePropService.SubdivisionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubdivisionNull() {
                this[this.tablePropService.SubdivisionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupTypeNull() {
                return this.IsNull(this.tablePropService.GroupTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupTypeNull() {
                this[this.tablePropService.GroupTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostBNull() {
                return this.IsNull(this.tablePropService.CostBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostBNull() {
                this[this.tablePropService.CostBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCNull() {
                return this.IsNull(this.tablePropService.CostCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCNull() {
                this[this.tablePropService.CostCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialCostNull() {
                return this.IsNull(this.tablePropService.MaterialCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialCostNull() {
                this[this.tablePropService.MaterialCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplicationTypeNull() {
                return this.IsNull(this.tablePropService.ApplicationTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplicationTypeNull() {
                this[this.tablePropService.ApplicationTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPruningTypeNull() {
                return this.IsNull(this.tablePropService.PruningTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPruningTypeNull() {
                this[this.tablePropService.PruningTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMulchingTypeNull() {
                return this.IsNull(this.tablePropService.MulchingTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMulchingTypeNull() {
                this[this.tablePropService.MulchingTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostAppNull() {
                return this.IsNull(this.tablePropService.CostAppColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostAppNull() {
                this[this.tablePropService.CostAppColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostPruningNull() {
                return this.IsNull(this.tablePropService.CostPruningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostPruningNull() {
                this[this.tablePropService.CostPruningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostMulchingNull() {
                return this.IsNull(this.tablePropService.CostMulchingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostMulchingNull() {
                this[this.tablePropService.CostMulchingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostOtherNull() {
                return this.IsNull(this.tablePropService.CostOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostOtherNull() {
                this[this.tablePropService.CostOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCostBNull() {
                return this.IsNull(this.tablePropService.CCostBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCostBNull() {
                this[this.tablePropService.CCostBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCostCNull() {
                return this.IsNull(this.tablePropService.CCostCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCostCNull() {
                this[this.tablePropService.CCostCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCostAppNull() {
                return this.IsNull(this.tablePropService.CCostAppColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCostAppNull() {
                this[this.tablePropService.CCostAppColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCostPruningNull() {
                return this.IsNull(this.tablePropService.CCostPruningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCostPruningNull() {
                this[this.tablePropService.CCostPruningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCostMulchingNull() {
                return this.IsNull(this.tablePropService.CCostMulchingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCostMulchingNull() {
                this[this.tablePropService.CCostMulchingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCostOtherNull() {
                return this.IsNull(this.tablePropService.CCostOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCostOtherNull() {
                this[this.tablePropService.CCostOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppInstructNull() {
                return this.IsNull(this.tablePropService.AppInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppInstructNull() {
                this[this.tablePropService.AppInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPruneInstructNull() {
                return this.IsNull(this.tablePropService.PruneInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPruneInstructNull() {
                this[this.tablePropService.PruneInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMulchInstructNull() {
                return this.IsNull(this.tablePropService.MulchInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMulchInstructNull() {
                this[this.tablePropService.MulchInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherInstructNull() {
                return this.IsNull(this.tablePropService.OtherInstructColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherInstructNull() {
                this[this.tablePropService.OtherInstructColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tablePropService.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tablePropService.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGutterRegionNull() {
                return this.IsNull(this.tablePropService.GutterRegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGutterRegionNull() {
                this[this.tablePropService.GutterRegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepType1Null() {
                return this.IsNull(this.tablePropService.FourStepType1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepType1Null() {
                this[this.tablePropService.FourStepType1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepType2Null() {
                return this.IsNull(this.tablePropService.FourStepType2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepType2Null() {
                this[this.tablePropService.FourStepType2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepType3Null() {
                return this.IsNull(this.tablePropService.FourStepType3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepType3Null() {
                this[this.tablePropService.FourStepType3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepType4Null() {
                return this.IsNull(this.tablePropService.FourStepType4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepType4Null() {
                this[this.tablePropService.FourStepType4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostNull() {
                return this.IsNull(this.tablePropService.YCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostNull() {
                this[this.tablePropService.YCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostBNull() {
                return this.IsNull(this.tablePropService.YCostBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostBNull() {
                this[this.tablePropService.YCostBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostCNull() {
                return this.IsNull(this.tablePropService.YCostCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostCNull() {
                this[this.tablePropService.YCostCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostAppNull() {
                return this.IsNull(this.tablePropService.YCostAppColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostAppNull() {
                this[this.tablePropService.YCostAppColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostPruningNull() {
                return this.IsNull(this.tablePropService.YCostPruningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostPruningNull() {
                this[this.tablePropService.YCostPruningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostMulchingNull() {
                return this.IsNull(this.tablePropService.YCostMulchingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostMulchingNull() {
                this[this.tablePropService.YCostMulchingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCostOtherNull() {
                return this.IsNull(this.tablePropService.YCostOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCostOtherNull() {
                this[this.tablePropService.YCostOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCost4StepNull() {
                return this.IsNull(this.tablePropService.YCost4StepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCost4StepNull() {
                this[this.tablePropService.YCost4StepColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustPropertyJobsRow : global::System.Data.DataRow {
            
            private CustPropertyJobsDataTable tableCustPropertyJobs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustPropertyJobsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustPropertyJobs = ((CustPropertyJobsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerJobID {
                get {
                    return ((int)(this[this.tableCustPropertyJobs.CustomerJobIDColumn]));
                }
                set {
                    this[this.tableCustPropertyJobs.CustomerJobIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PropertyID {
                get {
                    return ((int)(this[this.tableCustPropertyJobs.PropertyIDColumn]));
                }
                set {
                    this[this.tableCustPropertyJobs.PropertyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCustPropertyJobs.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Repeat {
                get {
                    try {
                        return ((bool)(this[this.tableCustPropertyJobs.RepeatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Repeat\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.RepeatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Frequency {
                get {
                    try {
                        return ((int)(this[this.tableCustPropertyJobs.FrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frequency\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IntervalType {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.IntervalTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IntervalType\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.IntervalTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cost {
                get {
                    try {
                        return ((decimal)(this[this.tableCustPropertyJobs.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostContractor {
                get {
                    try {
                        return ((decimal)(this[this.tableCustPropertyJobs.CostContractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostContractor\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.CostContractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostFourStep {
                get {
                    try {
                        return ((decimal)(this[this.tableCustPropertyJobs.CostFourStepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostFourStep\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.CostFourStepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Instructions {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.InstructionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Instructions\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.InstructionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ManHours {
                get {
                    try {
                        return ((float)(this[this.tableCustPropertyJobs.ManHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManHours\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.ManHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Compliments {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.ComplimentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Compliments\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.ComplimentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Complaints {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.ComplaintsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Complaints\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.ComplaintsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerID {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.CustomerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerID\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.CustomerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subdivision {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.SubdivisionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subdivision\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.SubdivisionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableCustPropertyJobs.ActiveColumn]));
                }
                set {
                    this[this.tableCustPropertyJobs.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountNumber {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.AccountNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountNumber\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.AccountNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostB {
                get {
                    try {
                        return ((decimal)(this[this.tableCustPropertyJobs.CostBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostB\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.CostBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostC {
                get {
                    try {
                        return ((decimal)(this[this.tableCustPropertyJobs.CostCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostC\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.CostCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CrewKey {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.CrewKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CrewKey\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.CrewKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SelectPrint {
                get {
                    try {
                        return ((bool)(this[this.tableCustPropertyJobs.SelectPrintColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SelectPrint\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.SelectPrintColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaterialCost {
                get {
                    try {
                        return ((decimal)(this[this.tableCustPropertyJobs.MaterialCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialCost\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.MaterialCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Revenue {
                get {
                    try {
                        return ((decimal)(this[this.tableCustPropertyJobs.RevenueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Revenue\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.RevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBInvoiceID {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.QBInvoiceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBInvoiceID\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.QBInvoiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBItemID {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.QBItemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBItemID\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.QBItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBItemIDB {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.QBItemIDBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBItemIDB\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.QBItemIDBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBItemIDC {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.QBItemIDCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBItemIDC\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.QBItemIDCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepJob {
                get {
                    try {
                        return ((bool)(this[this.tableCustPropertyJobs.FourStepJobColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepJob\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.FourStepJobColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FourStepMat {
                get {
                    try {
                        return ((float)(this[this.tableCustPropertyJobs.FourStepMatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepMat\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.FourStepMatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GutterRegion {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.GutterRegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GutterRegion\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.GutterRegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepJob1 {
                get {
                    try {
                        return ((bool)(this[this.tableCustPropertyJobs.FourStepJob1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepJob1\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.FourStepJob1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepJob2 {
                get {
                    try {
                        return ((bool)(this[this.tableCustPropertyJobs.FourStepJob2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepJob2\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.FourStepJob2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepJob3 {
                get {
                    try {
                        return ((bool)(this[this.tableCustPropertyJobs.FourStepJob3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepJob3\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.FourStepJob3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepJob4 {
                get {
                    try {
                        return ((bool)(this[this.tableCustPropertyJobs.FourStepJob4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepJob4\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.FourStepJob4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostD {
                get {
                    try {
                        return ((decimal)(this[this.tableCustPropertyJobs.CostDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostD\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.CostDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBItemIDD {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.QBItemIDDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBItemIDD\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.QBItemIDDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Expr1 {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.Expr1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Expr1\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.Expr1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBDescription {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.QBDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBDescription\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.QBDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBDescriptionA {
                get {
                    try {
                        return ((string)(this[this.tableCustPropertyJobs.QBDescriptionAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBDescriptionA\' in table \'CustPropertyJobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustPropertyJobs.QBDescriptionAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow PropertyRow {
                get {
                    return ((PropertyRow)(this.GetParentRow(this.Table.ParentRelations["FK_CustomerJob_Property1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CustomerJob_Property1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableCustPropertyJobs.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableCustPropertyJobs.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableCustPropertyJobs.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableCustPropertyJobs.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepeatNull() {
                return this.IsNull(this.tableCustPropertyJobs.RepeatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepeatNull() {
                this[this.tableCustPropertyJobs.RepeatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrequencyNull() {
                return this.IsNull(this.tableCustPropertyJobs.FrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrequencyNull() {
                this[this.tableCustPropertyJobs.FrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIntervalTypeNull() {
                return this.IsNull(this.tableCustPropertyJobs.IntervalTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIntervalTypeNull() {
                this[this.tableCustPropertyJobs.IntervalTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tableCustPropertyJobs.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tableCustPropertyJobs.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostContractorNull() {
                return this.IsNull(this.tableCustPropertyJobs.CostContractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostContractorNull() {
                this[this.tableCustPropertyJobs.CostContractorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostFourStepNull() {
                return this.IsNull(this.tableCustPropertyJobs.CostFourStepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostFourStepNull() {
                this[this.tableCustPropertyJobs.CostFourStepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstructionsNull() {
                return this.IsNull(this.tableCustPropertyJobs.InstructionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstructionsNull() {
                this[this.tableCustPropertyJobs.InstructionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableCustPropertyJobs.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableCustPropertyJobs.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManHoursNull() {
                return this.IsNull(this.tableCustPropertyJobs.ManHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManHoursNull() {
                this[this.tableCustPropertyJobs.ManHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComplimentsNull() {
                return this.IsNull(this.tableCustPropertyJobs.ComplimentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComplimentsNull() {
                this[this.tableCustPropertyJobs.ComplimentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComplaintsNull() {
                return this.IsNull(this.tableCustPropertyJobs.ComplaintsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComplaintsNull() {
                this[this.tableCustPropertyJobs.ComplaintsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIDNull() {
                return this.IsNull(this.tableCustPropertyJobs.CustomerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIDNull() {
                this[this.tableCustPropertyJobs.CustomerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableCustPropertyJobs.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableCustPropertyJobs.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableCustPropertyJobs.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableCustPropertyJobs.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableCustPropertyJobs.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableCustPropertyJobs.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableCustPropertyJobs.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableCustPropertyJobs.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableCustPropertyJobs.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableCustPropertyJobs.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tableCustPropertyJobs.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tableCustPropertyJobs.PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubdivisionNull() {
                return this.IsNull(this.tableCustPropertyJobs.SubdivisionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubdivisionNull() {
                this[this.tableCustPropertyJobs.SubdivisionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableCustPropertyJobs.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableCustPropertyJobs.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableCustPropertyJobs.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableCustPropertyJobs.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNumberNull() {
                return this.IsNull(this.tableCustPropertyJobs.AccountNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNumberNull() {
                this[this.tableCustPropertyJobs.AccountNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostBNull() {
                return this.IsNull(this.tableCustPropertyJobs.CostBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostBNull() {
                this[this.tableCustPropertyJobs.CostBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCNull() {
                return this.IsNull(this.tableCustPropertyJobs.CostCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCNull() {
                this[this.tableCustPropertyJobs.CostCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCrewKeyNull() {
                return this.IsNull(this.tableCustPropertyJobs.CrewKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCrewKeyNull() {
                this[this.tableCustPropertyJobs.CrewKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectPrintNull() {
                return this.IsNull(this.tableCustPropertyJobs.SelectPrintColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectPrintNull() {
                this[this.tableCustPropertyJobs.SelectPrintColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialCostNull() {
                return this.IsNull(this.tableCustPropertyJobs.MaterialCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialCostNull() {
                this[this.tableCustPropertyJobs.MaterialCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRevenueNull() {
                return this.IsNull(this.tableCustPropertyJobs.RevenueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRevenueNull() {
                this[this.tableCustPropertyJobs.RevenueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBInvoiceIDNull() {
                return this.IsNull(this.tableCustPropertyJobs.QBInvoiceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBInvoiceIDNull() {
                this[this.tableCustPropertyJobs.QBInvoiceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBItemIDNull() {
                return this.IsNull(this.tableCustPropertyJobs.QBItemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBItemIDNull() {
                this[this.tableCustPropertyJobs.QBItemIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBItemIDBNull() {
                return this.IsNull(this.tableCustPropertyJobs.QBItemIDBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBItemIDBNull() {
                this[this.tableCustPropertyJobs.QBItemIDBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBItemIDCNull() {
                return this.IsNull(this.tableCustPropertyJobs.QBItemIDCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBItemIDCNull() {
                this[this.tableCustPropertyJobs.QBItemIDCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepJobNull() {
                return this.IsNull(this.tableCustPropertyJobs.FourStepJobColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepJobNull() {
                this[this.tableCustPropertyJobs.FourStepJobColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepMatNull() {
                return this.IsNull(this.tableCustPropertyJobs.FourStepMatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepMatNull() {
                this[this.tableCustPropertyJobs.FourStepMatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGutterRegionNull() {
                return this.IsNull(this.tableCustPropertyJobs.GutterRegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGutterRegionNull() {
                this[this.tableCustPropertyJobs.GutterRegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableCustPropertyJobs.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableCustPropertyJobs.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepJob1Null() {
                return this.IsNull(this.tableCustPropertyJobs.FourStepJob1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepJob1Null() {
                this[this.tableCustPropertyJobs.FourStepJob1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepJob2Null() {
                return this.IsNull(this.tableCustPropertyJobs.FourStepJob2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepJob2Null() {
                this[this.tableCustPropertyJobs.FourStepJob2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepJob3Null() {
                return this.IsNull(this.tableCustPropertyJobs.FourStepJob3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepJob3Null() {
                this[this.tableCustPropertyJobs.FourStepJob3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepJob4Null() {
                return this.IsNull(this.tableCustPropertyJobs.FourStepJob4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepJob4Null() {
                this[this.tableCustPropertyJobs.FourStepJob4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostDNull() {
                return this.IsNull(this.tableCustPropertyJobs.CostDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostDNull() {
                this[this.tableCustPropertyJobs.CostDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBItemIDDNull() {
                return this.IsNull(this.tableCustPropertyJobs.QBItemIDDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBItemIDDNull() {
                this[this.tableCustPropertyJobs.QBItemIDDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpr1Null() {
                return this.IsNull(this.tableCustPropertyJobs.Expr1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpr1Null() {
                this[this.tableCustPropertyJobs.Expr1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBDescriptionNull() {
                return this.IsNull(this.tableCustPropertyJobs.QBDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBDescriptionNull() {
                this[this.tableCustPropertyJobs.QBDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBDescriptionANull() {
                return this.IsNull(this.tableCustPropertyJobs.QBDescriptionAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBDescriptionANull() {
                this[this.tableCustPropertyJobs.QBDescriptionAColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CrewNameRow : global::System.Data.DataRow {
            
            private CrewNameDataTable tableCrewName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CrewNameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCrewName = ((CrewNameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableCrewName.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'CrewName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrewName.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableCrewName.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'CrewName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrewName.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerJobID {
                get {
                    try {
                        return ((int)(this[this.tableCrewName.CustomerJobIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerJobID\' in table \'CrewName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrewName.CustomerJobIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeId {
                get {
                    try {
                        return ((int)(this[this.tableCrewName.EmployeeIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeId\' in table \'CrewName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrewName.EmployeeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow EmployeeRow {
                get {
                    return ((EmployeeRow)(this.GetParentRow(this.Table.ParentRelations["FK_Crew_Employee1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Crew_Employee1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableCrewName.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableCrewName.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableCrewName.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableCrewName.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerJobIDNull() {
                return this.IsNull(this.tableCrewName.CustomerJobIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerJobIDNull() {
                this[this.tableCrewName.CustomerJobIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeIdNull() {
                return this.IsNull(this.tableCrewName.EmployeeIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeIdNull() {
                this[this.tableCrewName.EmployeeIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RouteListRow : global::System.Data.DataRow {
            
            private RouteListDataTable tableRouteList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RouteListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRouteList = ((RouteListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RouteNameID {
                get {
                    return ((int)(this[this.tableRouteList.RouteNameIDColumn]));
                }
                set {
                    this[this.tableRouteList.RouteNameIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RouteName {
                get {
                    try {
                        return ((string)(this[this.tableRouteList.RouteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RouteName\' in table \'RouteList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteList.RouteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRouteNameNull() {
                return this.IsNull(this.tableRouteList.RouteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRouteNameNull() {
                this[this.tableRouteList.RouteNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerTypeListRow : global::System.Data.DataRow {
            
            private CustomerTypeListDataTable tableCustomerTypeList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerTypeListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomerTypeList = ((CustomerTypeListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerTypeID {
                get {
                    return ((int)(this[this.tableCustomerTypeList.CustomerTypeIDColumn]));
                }
                set {
                    this[this.tableCustomerTypeList.CustomerTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerType {
                get {
                    return ((string)(this[this.tableCustomerTypeList.CustomerTypeColumn]));
                }
                set {
                    this[this.tableCustomerTypeList.CustomerTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JobStatusListRow : global::System.Data.DataRow {
            
            private JobStatusListDataTable tableJobStatusList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobStatusListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJobStatusList = ((JobStatusListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobStatusID {
                get {
                    return ((int)(this[this.tableJobStatusList.JobStatusIDColumn]));
                }
                set {
                    this[this.tableJobStatusList.JobStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobStatus {
                get {
                    return ((string)(this[this.tableJobStatusList.JobStatusColumn]));
                }
                set {
                    this[this.tableJobStatusList.JobStatusColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RouteViewRow : global::System.Data.DataRow {
            
            private RouteViewDataTable tableRouteView;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RouteViewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRouteView = ((RouteViewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableRouteView.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableRouteView.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableRouteView.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableRouteView.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableRouteView.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableRouteView.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableRouteView.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subdivision {
                get {
                    try {
                        return ((string)(this[this.tableRouteView.SubdivisionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subdivision\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.SubdivisionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RouteID {
                get {
                    return ((int)(this[this.tableRouteView.RouteIDColumn]));
                }
                set {
                    this[this.tableRouteView.RouteIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RouteName {
                get {
                    try {
                        return ((string)(this[this.tableRouteView.RouteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RouteName\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.RouteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RouteOrder {
                get {
                    try {
                        return ((int)(this[this.tableRouteView.RouteOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RouteOrder\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.RouteOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableRouteView.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PropertyID {
                get {
                    return ((int)(this[this.tableRouteView.PropertyIDColumn]));
                }
                set {
                    this[this.tableRouteView.PropertyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FourStepType {
                get {
                    try {
                        return ((bool)(this[this.tableRouteView.FourStepTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FourStepType\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.FourStepTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableRouteView.ActiveColumn]));
                }
                set {
                    this[this.tableRouteView.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GroupType {
                get {
                    try {
                        return ((string)(this[this.tableRouteView.GroupTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupType\' in table \'RouteView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRouteView.GroupTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableRouteView.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableRouteView.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableRouteView.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableRouteView.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableRouteView.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableRouteView.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableRouteView.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableRouteView.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableRouteView.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableRouteView.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableRouteView.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableRouteView.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableRouteView.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableRouteView.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubdivisionNull() {
                return this.IsNull(this.tableRouteView.SubdivisionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubdivisionNull() {
                this[this.tableRouteView.SubdivisionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRouteNameNull() {
                return this.IsNull(this.tableRouteView.RouteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRouteNameNull() {
                this[this.tableRouteView.RouteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRouteOrderNull() {
                return this.IsNull(this.tableRouteView.RouteOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRouteOrderNull() {
                this[this.tableRouteView.RouteOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableRouteView.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableRouteView.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourStepTypeNull() {
                return this.IsNull(this.tableRouteView.FourStepTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourStepTypeNull() {
                this[this.tableRouteView.FourStepTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupTypeNull() {
                return this.IsNull(this.tableRouteView.GroupTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupTypeNull() {
                this[this.tableRouteView.GroupTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LetterDataTableRow : global::System.Data.DataRow {
            
            private LetterDataTableDataTable tableLetterDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LetterDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLetterDataTable = ((LetterDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropMow {
                get {
                    try {
                        return ((decimal)(this[this.tableLetterDataTable.PropMowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropMow\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.PropMowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropFourStep {
                get {
                    try {
                        return ((decimal)(this[this.tableLetterDataTable.PropFourStepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropFourStep\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.PropFourStepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropSeed {
                get {
                    try {
                        return ((decimal)(this[this.tableLetterDataTable.PropSeedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropSeed\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.PropSeedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropFertilize {
                get {
                    try {
                        return ((decimal)(this[this.tableLetterDataTable.PropFertilizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropFertilize\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.PropFertilizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropLime {
                get {
                    try {
                        return ((decimal)(this[this.tableLetterDataTable.PropLimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropLime\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.PropLimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropAeration {
                get {
                    try {
                        return ((decimal)(this[this.tableLetterDataTable.PropAerationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropAeration\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.PropAerationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpringServices {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.SpringServicesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpringServices\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.SpringServicesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SummerServices {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.SummerServicesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SummerServices\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.SummerServicesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FallServices {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.FallServicesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FallServices\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.FallServicesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WinterServices {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.WinterServicesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WinterServices\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.WinterServicesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GroupType {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.GroupTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupType\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.GroupTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cost {
                get {
                    try {
                        return ((decimal)(this[this.tableLetterDataTable.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountNumber {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.AccountNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountNumber\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.AccountNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BusinessName {
                get {
                    try {
                        return ((string)(this[this.tableLetterDataTable.BusinessNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BusinessName\' in table \'LetterDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLetterDataTable.BusinessNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableLetterDataTable.ActiveColumn]));
                }
                set {
                    this[this.tableLetterDataTable.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableLetterDataTable.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableLetterDataTable.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableLetterDataTable.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableLetterDataTable.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableLetterDataTable.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableLetterDataTable.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableLetterDataTable.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableLetterDataTable.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableLetterDataTable.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableLetterDataTable.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableLetterDataTable.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableLetterDataTable.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropMowNull() {
                return this.IsNull(this.tableLetterDataTable.PropMowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropMowNull() {
                this[this.tableLetterDataTable.PropMowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropFourStepNull() {
                return this.IsNull(this.tableLetterDataTable.PropFourStepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropFourStepNull() {
                this[this.tableLetterDataTable.PropFourStepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropSeedNull() {
                return this.IsNull(this.tableLetterDataTable.PropSeedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropSeedNull() {
                this[this.tableLetterDataTable.PropSeedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropFertilizeNull() {
                return this.IsNull(this.tableLetterDataTable.PropFertilizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropFertilizeNull() {
                this[this.tableLetterDataTable.PropFertilizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropLimeNull() {
                return this.IsNull(this.tableLetterDataTable.PropLimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropLimeNull() {
                this[this.tableLetterDataTable.PropLimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropAerationNull() {
                return this.IsNull(this.tableLetterDataTable.PropAerationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropAerationNull() {
                this[this.tableLetterDataTable.PropAerationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpringServicesNull() {
                return this.IsNull(this.tableLetterDataTable.SpringServicesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpringServicesNull() {
                this[this.tableLetterDataTable.SpringServicesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSummerServicesNull() {
                return this.IsNull(this.tableLetterDataTable.SummerServicesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSummerServicesNull() {
                this[this.tableLetterDataTable.SummerServicesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFallServicesNull() {
                return this.IsNull(this.tableLetterDataTable.FallServicesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFallServicesNull() {
                this[this.tableLetterDataTable.FallServicesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWinterServicesNull() {
                return this.IsNull(this.tableLetterDataTable.WinterServicesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWinterServicesNull() {
                this[this.tableLetterDataTable.WinterServicesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupTypeNull() {
                return this.IsNull(this.tableLetterDataTable.GroupTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupTypeNull() {
                this[this.tableLetterDataTable.GroupTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tableLetterDataTable.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tableLetterDataTable.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNumberNull() {
                return this.IsNull(this.tableLetterDataTable.AccountNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNumberNull() {
                this[this.tableLetterDataTable.AccountNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessNameNull() {
                return this.IsNull(this.tableLetterDataTable.BusinessNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessNameNull() {
                this[this.tableLetterDataTable.BusinessNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerNewletterRow : global::System.Data.DataRow {
            
            private CustomerNewletterDataTable tableCustomerNewletter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerNewletterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomerNewletter = ((CustomerNewletterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerID {
                get {
                    return ((int)(this[this.tableCustomerNewletter.CustomerIDColumn]));
                }
                set {
                    this[this.tableCustomerNewletter.CustomerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewletter.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'CustomerNewletter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewletter.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewletter.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'CustomerNewletter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewletter.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewletter.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'CustomerNewletter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewletter.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewletter.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'CustomerNewletter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewletter.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewletter.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'CustomerNewletter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewletter.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewletter.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'CustomerNewletter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewletter.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone1 {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewletter.Phone1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone1\' in table \'CustomerNewletter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewletter.Phone1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone2 {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewletter.Phone2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone2\' in table \'CustomerNewletter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewletter.Phone2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableCustomerNewletter.ActiveColumn]));
                }
                set {
                    this[this.tableCustomerNewletter.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BusinessName {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewletter.BusinessNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BusinessName\' in table \'CustomerNewletter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewletter.BusinessNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewletter.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'CustomerNewletter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewletter.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GroupType {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewletter.GroupTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupType\' in table \'CustomerNewletter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewletter.GroupTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountNumber {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewletter.AccountNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountNumber\' in table \'CustomerNewletter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewletter.AccountNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableCustomerNewletter.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableCustomerNewletter.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableCustomerNewletter.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableCustomerNewletter.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableCustomerNewletter.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableCustomerNewletter.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableCustomerNewletter.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableCustomerNewletter.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableCustomerNewletter.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableCustomerNewletter.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableCustomerNewletter.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableCustomerNewletter.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhone1Null() {
                return this.IsNull(this.tableCustomerNewletter.Phone1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhone1Null() {
                this[this.tableCustomerNewletter.Phone1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhone2Null() {
                return this.IsNull(this.tableCustomerNewletter.Phone2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhone2Null() {
                this[this.tableCustomerNewletter.Phone2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessNameNull() {
                return this.IsNull(this.tableCustomerNewletter.BusinessNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessNameNull() {
                this[this.tableCustomerNewletter.BusinessNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableCustomerNewletter.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableCustomerNewletter.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupTypeNull() {
                return this.IsNull(this.tableCustomerNewletter.GroupTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupTypeNull() {
                this[this.tableCustomerNewletter.GroupTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNumberNull() {
                return this.IsNull(this.tableCustomerNewletter.AccountNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNumberNull() {
                this[this.tableCustomerNewletter.AccountNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow[] GetPropertyRows() {
                if ((this.Table.ChildRelations["FK_Property_Customer2"] == null)) {
                    return new PropertyRow[0];
                }
                else {
                    return ((PropertyRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Property_Customer2"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserProfileRow : global::System.Data.DataRow {
            
            private UserProfileDataTable tableUserProfile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserProfileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserProfile = ((UserProfileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProfileID {
                get {
                    return ((int)(this[this.tableUserProfile.ProfileIDColumn]));
                }
                set {
                    this[this.tableUserProfile.ProfileIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TemplatePath {
                get {
                    try {
                        return ((string)(this[this.tableUserProfile.TemplatePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplatePath\' in table \'UserProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserProfile.TemplatePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EnableSound {
                get {
                    try {
                        return ((bool)(this[this.tableUserProfile.EnableSoundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EnableSound\' in table \'UserProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserProfile.EnableSoundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableUserProfile.PasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Password\' in table \'UserProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserProfile.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImportPath {
                get {
                    try {
                        return ((string)(this[this.tableUserProfile.ImportPathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportPath\' in table \'UserProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserProfile.ImportPathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime QBInvoiceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUserProfile.QBInvoiceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBInvoiceDate\' in table \'UserProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserProfile.QBInvoiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool QBIntegration {
                get {
                    try {
                        return ((bool)(this[this.tableUserProfile.QBIntegrationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBIntegration\' in table \'UserProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserProfile.QBIntegrationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBAccount {
                get {
                    try {
                        return ((string)(this[this.tableUserProfile.QBAccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBAccount\' in table \'UserProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserProfile.QBAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportURL {
                get {
                    try {
                        return ((string)(this[this.tableUserProfile.ReportURLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportURL\' in table \'UserProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserProfile.ReportURLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplatePathNull() {
                return this.IsNull(this.tableUserProfile.TemplatePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplatePathNull() {
                this[this.tableUserProfile.TemplatePathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnableSoundNull() {
                return this.IsNull(this.tableUserProfile.EnableSoundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnableSoundNull() {
                this[this.tableUserProfile.EnableSoundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableUserProfile.PasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableUserProfile.PasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportPathNull() {
                return this.IsNull(this.tableUserProfile.ImportPathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportPathNull() {
                this[this.tableUserProfile.ImportPathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBInvoiceDateNull() {
                return this.IsNull(this.tableUserProfile.QBInvoiceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBInvoiceDateNull() {
                this[this.tableUserProfile.QBInvoiceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBIntegrationNull() {
                return this.IsNull(this.tableUserProfile.QBIntegrationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBIntegrationNull() {
                this[this.tableUserProfile.QBIntegrationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBAccountNull() {
                return this.IsNull(this.tableUserProfile.QBAccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBAccountNull() {
                this[this.tableUserProfile.QBAccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportURLNull() {
                return this.IsNull(this.tableUserProfile.ReportURLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportURLNull() {
                this[this.tableUserProfile.ReportURLColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerNewLettersRow : global::System.Data.DataRow {
            
            private CustomerNewLettersDataTable tableCustomerNewLetters;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerNewLettersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomerNewLetters = ((CustomerNewLettersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewLetters.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'CustomerNewLetters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewLetters.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewLetters.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'CustomerNewLetters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewLetters.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewLetters.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'CustomerNewLetters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewLetters.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewLetters.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'CustomerNewLetters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewLetters.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewLetters.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'CustomerNewLetters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewLetters.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewLetters.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'CustomerNewLetters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewLetters.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QBInvoiceID {
                get {
                    try {
                        return ((string)(this[this.tableCustomerNewLetters.QBInvoiceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QBInvoiceID\' in table \'CustomerNewLetters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerNewLetters.QBInvoiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableCustomerNewLetters.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableCustomerNewLetters.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableCustomerNewLetters.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableCustomerNewLetters.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableCustomerNewLetters.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableCustomerNewLetters.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableCustomerNewLetters.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableCustomerNewLetters.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableCustomerNewLetters.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableCustomerNewLetters.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableCustomerNewLetters.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableCustomerNewLetters.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQBInvoiceIDNull() {
                return this.IsNull(this.tableCustomerNewLetters.QBInvoiceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQBInvoiceIDNull() {
                this[this.tableCustomerNewLetters.QBInvoiceIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BonusRow : global::System.Data.DataRow {
            
            private BonusDataTable tableBonus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BonusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBonus = ((BonusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableBonus.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'Bonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBonus.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableBonus.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'Bonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBonus.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Bonus {
                get {
                    try {
                        return ((decimal)(this[this.tableBonus.BonusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bonus\' in table \'Bonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBonus.BonusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QualityBonus {
                get {
                    try {
                        return ((decimal)(this[this.tableBonus.QualityBonusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualityBonus\' in table \'Bonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBonus.QualityBonusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    try {
                        return ((int)(this[this.tableBonus.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'Bonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBonus.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableBonus.ActiveColumn]));
                }
                set {
                    this[this.tableBonus.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Contractor {
                get {
                    return ((bool)(this[this.tableBonus.ContractorColumn]));
                }
                set {
                    this[this.tableBonus.ContractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableBonus.EmployeeIDColumn]));
                }
                set {
                    this[this.tableBonus.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeBonusID {
                get {
                    try {
                        return ((int)(this[this.tableBonus.EmployeeBonusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeBonusID\' in table \'Bonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBonus.EmployeeBonusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableBonus.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableBonus.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableBonus.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableBonus.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBonusNull() {
                return this.IsNull(this.tableBonus.BonusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBonusNull() {
                this[this.tableBonus.BonusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualityBonusNull() {
                return this.IsNull(this.tableBonus.QualityBonusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualityBonusNull() {
                this[this.tableBonus.QualityBonusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableBonus.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableBonus.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeBonusIDNull() {
                return this.IsNull(this.tableBonus.EmployeeBonusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeBonusIDNull() {
                this[this.tableBonus.EmployeeBonusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewRow[] GetCrewRows() {
                if ((this.Table.ChildRelations["FK_Crew_Employee2"] == null)) {
                    return new CrewRow[0];
                }
                else {
                    return ((CrewRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Crew_Employee2"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeBonusRow[] GetEmployeeBonusRows() {
                if ((this.Table.ChildRelations["FK_EmployeeBonus_EmployeeBonus"] == null)) {
                    return new EmployeeBonusRow[0];
                }
                else {
                    return ((EmployeeBonusRow[])(base.GetChildRows(this.Table.ChildRelations["FK_EmployeeBonus_EmployeeBonus"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeBonusRow : global::System.Data.DataRow {
            
            private EmployeeBonusDataTable tableEmployeeBonus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeBonusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeeBonus = ((EmployeeBonusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableEmployeeBonus.EmployeeIDColumn]));
                }
                set {
                    this[this.tableEmployeeBonus.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Bonus {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeBonus.BonusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bonus\' in table \'EmployeeBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeBonus.BonusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QualityBonus {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeBonus.QualityBonusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualityBonus\' in table \'EmployeeBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeBonus.QualityBonusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    try {
                        return ((int)(this[this.tableEmployeeBonus.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'EmployeeBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeBonus.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeBonusID {
                get {
                    return ((int)(this[this.tableEmployeeBonus.EmployeeBonusIDColumn]));
                }
                set {
                    this[this.tableEmployeeBonus.EmployeeBonusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow EmployeeRow {
                get {
                    return ((EmployeeRow)(this.GetParentRow(this.Table.ParentRelations["FK_EmployeeBonus_Employee"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EmployeeBonus_Employee"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonusRow BonusRow {
                get {
                    return ((BonusRow)(this.GetParentRow(this.Table.ParentRelations["FK_EmployeeBonus_EmployeeBonus"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EmployeeBonus_EmployeeBonus"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBonusNull() {
                return this.IsNull(this.tableEmployeeBonus.BonusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBonusNull() {
                this[this.tableEmployeeBonus.BonusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualityBonusNull() {
                return this.IsNull(this.tableEmployeeBonus.QualityBonusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualityBonusNull() {
                this[this.tableEmployeeBonus.QualityBonusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableEmployeeBonus.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableEmployeeBonus.YearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerRowChangeEvent : global::System.EventArgs {
            
            private CustomerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRowChangeEvent(CustomerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PropertyRowChangeEvent : global::System.EventArgs {
            
            private PropertyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRowChangeEvent(PropertyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeRowChangeEvent : global::System.EventArgs {
            
            private EmployeeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRowChangeEvent(EmployeeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerJobRowChangeEvent : global::System.EventArgs {
            
            private CustomerJobRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerJobRowChangeEvent(CustomerJobRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerJobRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServiceRowChangeEvent : global::System.EventArgs {
            
            private ServiceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRowChangeEvent(ServiceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RouteRowChangeEvent : global::System.EventArgs {
            
            private RouteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteRowChangeEvent(RouteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustPropertyRowChangeEvent : global::System.EventArgs {
            
            private CustPropertyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyRowChangeEvent(CustPropertyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CrewRowChangeEvent : global::System.EventArgs {
            
            private CrewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewRowChangeEvent(CrewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VendorRowChangeEvent : global::System.EventArgs {
            
            private VendorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorRowChangeEvent(VendorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PropServiceRowChangeEvent : global::System.EventArgs {
            
            private PropServiceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropServiceRowChangeEvent(PropServiceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropServiceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustPropertyJobsRowChangeEvent : global::System.EventArgs {
            
            private CustPropertyJobsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyJobsRowChangeEvent(CustPropertyJobsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustPropertyJobsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CrewNameRowChangeEvent : global::System.EventArgs {
            
            private CrewNameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewNameRowChangeEvent(CrewNameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrewNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RouteListRowChangeEvent : global::System.EventArgs {
            
            private RouteListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteListRowChangeEvent(RouteListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerTypeListRowChangeEvent : global::System.EventArgs {
            
            private CustomerTypeListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerTypeListRowChangeEvent(CustomerTypeListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerTypeListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JobStatusListRowChangeEvent : global::System.EventArgs {
            
            private JobStatusListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusListRowChangeEvent(JobStatusListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RouteViewRowChangeEvent : global::System.EventArgs {
            
            private RouteViewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteViewRowChangeEvent(RouteViewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RouteViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LetterDataTableRowChangeEvent : global::System.EventArgs {
            
            private LetterDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LetterDataTableRowChangeEvent(LetterDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LetterDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerNewletterRowChangeEvent : global::System.EventArgs {
            
            private CustomerNewletterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewletterRowChangeEvent(CustomerNewletterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewletterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserProfileRowChangeEvent : global::System.EventArgs {
            
            private UserProfileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserProfileRowChangeEvent(UserProfileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserProfileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerNewLettersRowChangeEvent : global::System.EventArgs {
            
            private CustomerNewLettersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewLettersRowChangeEvent(CustomerNewLettersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerNewLettersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BonusRowChangeEvent : global::System.EventArgs {
            
            private BonusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonusRowChangeEvent(BonusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeBonusRowChangeEvent : global::System.EventArgs {
            
            private EmployeeBonusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeBonusRowChangeEvent(EmployeeBonusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeBonusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace System.Windows.Forms.MMS.Data.MMSDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CustomerTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustomerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Customer";
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("Phone1", "Phone1");
            tableMapping.ColumnMappings.Add("Phone2", "Phone2");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("Modified", "Modified");
            tableMapping.ColumnMappings.Add("BusinessType", "BusinessType");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("Newsletter", "Newsletter");
            tableMapping.ColumnMappings.Add("Active", "Active");
            tableMapping.ColumnMappings.Add("GroupType", "GroupType");
            tableMapping.ColumnMappings.Add("AccountNumber", "AccountNumber");
            tableMapping.ColumnMappings.Add("BusinessName", "BusinessName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Customer] WHERE (([CustomerID] = @Original_CustomerID) AND ([Modifie" +
                "d] = @Original_Modified))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Modified", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Modified", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Customer] ([LastName], [FirstName], [Address], [City], [State], [Zip], [Phone1], [Phone2], [Email], [BusinessType], [Newsletter], [Type], [Active], [GroupType], [AccountNumber], [BusinessName]) VALUES (@LastName, @FirstName, @Address, @City, @State, @Zip, @Phone1, @Phone2, @Email, @BusinessType, @Newsletter, @Type, @Active, @GroupType, @AccountNumber, @BusinessName);
SELECT CustomerID, LastName, FirstName, Address, City, State, Zip, Phone1, Phone2, Email, Modified, BusinessType, Newsletter, Type, Active, GroupType, AccountNumber, BusinessName FROM Customer WHERE (CustomerID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BusinessType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BusinessType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Newsletter", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Newsletter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GroupType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccountNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BusinessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BusinessName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Customer] SET [LastName] = @LastName, [FirstName] = @FirstName, [Address] = @Address, [City] = @City, [State] = @State, [Zip] = @Zip, [Phone1] = @Phone1, [Phone2] = @Phone2, [Email] = @Email, [BusinessType] = @BusinessType, [Newsletter] = @Newsletter, [Type] = @Type, [Active] = @Active, [GroupType] = @GroupType, [AccountNumber] = @AccountNumber, [BusinessName] = @BusinessName WHERE (([CustomerID] = @Original_CustomerID) AND ([Modified] = @Original_Modified));
SELECT CustomerID, LastName, FirstName, Address, City, State, Zip, Phone1, Phone2, Email, Modified, BusinessType, Newsletter, Type, Active, GroupType, AccountNumber, BusinessName FROM Customer WHERE (CustomerID = @CustomerID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BusinessType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BusinessType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Newsletter", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Newsletter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GroupType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccountNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BusinessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BusinessName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Modified", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Modified", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        CustomerID, LastName, FirstName, Address, City, State, Zip, Phone1," +
                " Phone2, Email, Modified, BusinessType, Newsletter, Type, Active, GroupType, \r\n " +
                "                        AccountNumber, BusinessName\r\nFROM            Customer";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"UPDATE       Customer
SET                GroupType = @GroupType
WHERE        (CustomerID = @CustomerID);   
SELECT CustomerID, LastName, FirstName, Address, City, State, Zip, Phone1, Phone2, Email, Modified, BusinessType, Newsletter, Type, Active, GroupType FROM Customer WHERE (CustomerID = @CustomerID)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GroupType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.CustomerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.CustomerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.CustomerDataTable dataTable = new MMSDataSet.CustomerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.CustomerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Customer");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CustomerID, byte[] Original_Modified) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CustomerID));
            if ((Original_Modified == null)) {
                throw new global::System.ArgumentNullException("Original_Modified");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_Modified));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string LastName, 
                    string FirstName, 
                    string Address, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Phone1, 
                    string Phone2, 
                    string Email, 
                    global::System.Nullable<bool> BusinessType, 
                    global::System.Nullable<bool> Newsletter, 
                    string Type, 
                    bool Active, 
                    string GroupType, 
                    string AccountNumber, 
                    string BusinessName) {
            if ((LastName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(LastName));
            }
            if ((FirstName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FirstName));
            }
            if ((Address == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(City));
            }
            if ((State == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(State));
            }
            if ((Zip == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Zip));
            }
            if ((Phone1 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Phone1));
            }
            if ((Phone2 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Phone2));
            }
            if ((Email == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Email));
            }
            if ((BusinessType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(BusinessType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Newsletter.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(Newsletter.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Type == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Type));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(Active));
            if ((GroupType == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(GroupType));
            }
            if ((AccountNumber == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(AccountNumber));
            }
            if ((BusinessName == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(BusinessName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string LastName, 
                    string FirstName, 
                    string Address, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Phone1, 
                    string Phone2, 
                    string Email, 
                    global::System.Nullable<bool> BusinessType, 
                    global::System.Nullable<bool> Newsletter, 
                    string Type, 
                    bool Active, 
                    string GroupType, 
                    string AccountNumber, 
                    string BusinessName, 
                    int Original_CustomerID, 
                    byte[] Original_Modified, 
                    int CustomerID) {
            if ((LastName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(LastName));
            }
            if ((FirstName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FirstName));
            }
            if ((Address == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(City));
            }
            if ((State == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(State));
            }
            if ((Zip == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Zip));
            }
            if ((Phone1 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Phone1));
            }
            if ((Phone2 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Phone2));
            }
            if ((Email == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Email));
            }
            if ((BusinessType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(BusinessType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Newsletter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Newsletter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Type == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Type));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(Active));
            if ((GroupType == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(GroupType));
            }
            if ((AccountNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(AccountNumber));
            }
            if ((BusinessName == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(BusinessName));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_CustomerID));
            if ((Original_Modified == null)) {
                throw new global::System.ArgumentNullException("Original_Modified");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((byte[])(Original_Modified));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(CustomerID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string LastName, 
                    string FirstName, 
                    string Address, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Phone1, 
                    string Phone2, 
                    string Email, 
                    global::System.Nullable<bool> BusinessType, 
                    global::System.Nullable<bool> Newsletter, 
                    string Type, 
                    bool Active, 
                    string GroupType, 
                    string AccountNumber, 
                    string BusinessName, 
                    int Original_CustomerID, 
                    byte[] Original_Modified) {
            return this.Update(LastName, FirstName, Address, City, State, Zip, Phone1, Phone2, Email, BusinessType, Newsletter, Type, Active, GroupType, AccountNumber, BusinessName, Original_CustomerID, Original_Modified, Original_CustomerID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateGroupType(string GroupType, int CustomerID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((GroupType == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(GroupType));
            }
            command.Parameters[1].Value = ((int)(CustomerID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PropertyTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PropertyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Property";
            tableMapping.ColumnMappings.Add("PropertyID", "PropertyID");
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("Phone", "Phone");
            tableMapping.ColumnMappings.Add("Subdivision", "Subdivision");
            tableMapping.ColumnMappings.Add("Active", "Active");
            tableMapping.ColumnMappings.Add("AccountNumber", "AccountNumber");
            tableMapping.ColumnMappings.Add("GroupType", "GroupType");
            tableMapping.ColumnMappings.Add("GutterRegion", "GutterRegion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Property] WHERE (([PropertyID] = @Original_PropertyID) AND ([CustomerID] = @Original_CustomerID) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Address] = @Original_Address)) AND ((@IsNull_City = 1 AND [City] IS NULL) OR ([City] = @Original_City)) AND ((@IsNull_State = 1 AND [State] IS NULL) OR ([State] = @Original_State)) AND ((@IsNull_Zip = 1 AND [Zip] IS NULL) OR ([Zip] = @Original_Zip)) AND ((@IsNull_Phone = 1 AND [Phone] IS NULL) OR ([Phone] = @Original_Phone)) AND ((@IsNull_Subdivision = 1 AND [Subdivision] IS NULL) OR ([Subdivision] = @Original_Subdivision)) AND ([Active] = @Original_Active) AND ((@IsNull_AccountNumber = 1 AND [AccountNumber] IS NULL) OR ([AccountNumber] = @Original_AccountNumber)) AND ((@IsNull_GroupType = 1 AND [GroupType] IS NULL) OR ([GroupType] = @Original_GroupType)) AND ((@IsNull_GutterRegion = 1 AND [GutterRegion] IS NULL) OR ([GutterRegion] = @Original_GutterRegion)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PropertyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Address", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_City", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_State", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Zip", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Phone", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Subdivision", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Subdivision", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Subdivision", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Subdivision", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AccountNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccountNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GroupType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GroupType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GutterRegion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GutterRegion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GutterRegion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GutterRegion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Property] ([CustomerID], [Description], [Address], [City], [State], [Zip], [Phone], [Subdivision], [Active], [AccountNumber], [GroupType], [GutterRegion]) VALUES (@CustomerID, @Description, @Address, @City, @State, @Zip, @Phone, @Subdivision, @Active, @AccountNumber, @GroupType, @GutterRegion);
SELECT PropertyID, CustomerID, Description, Address, City, State, Zip, Phone, Subdivision, Active, AccountNumber, GroupType, GutterRegion FROM Property WHERE (PropertyID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Subdivision", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Subdivision", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccountNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GroupType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GutterRegion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GutterRegion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Property] SET [CustomerID] = @CustomerID, [Description] = @Description, [" +
                "Address] = @Address, [City] = @City, [State] = @State, [Zip] = @Zip, [Phone] = @" +
                "Phone, [Subdivision] = @Subdivision, [Active] = @Active, [AccountNumber] = @Acco" +
                "untNumber, [GroupType] = @GroupType, [GutterRegion] = @GutterRegion WHERE (([Pro" +
                "pertyID] = @Original_PropertyID) AND ([CustomerID] = @Original_CustomerID) AND (" +
                "(@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Origina" +
                "l_Description)) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Address] =" +
                " @Original_Address)) AND ((@IsNull_City = 1 AND [City] IS NULL) OR ([City] = @Or" +
                "iginal_City)) AND ((@IsNull_State = 1 AND [State] IS NULL) OR ([State] = @Origin" +
                "al_State)) AND ((@IsNull_Zip = 1 AND [Zip] IS NULL) OR ([Zip] = @Original_Zip)) " +
                "AND ((@IsNull_Phone = 1 AND [Phone] IS NULL) OR ([Phone] = @Original_Phone)) AND" +
                " ((@IsNull_Subdivision = 1 AND [Subdivision] IS NULL) OR ([Subdivision] = @Origi" +
                "nal_Subdivision)) AND ([Active] = @Original_Active) AND ((@IsNull_AccountNumber " +
                "= 1 AND [AccountNumber] IS NULL) OR ([AccountNumber] = @Original_AccountNumber))" +
                " AND ((@IsNull_GroupType = 1 AND [GroupType] IS NULL) OR ([GroupType] = @Origina" +
                "l_GroupType)) AND ((@IsNull_GutterRegion = 1 AND [GutterRegion] IS NULL) OR ([Gu" +
                "tterRegion] = @Original_GutterRegion)));\r\nSELECT PropertyID, CustomerID, Descrip" +
                "tion, Address, City, State, Zip, Phone, Subdivision, Active, AccountNumber, Grou" +
                "pType, GutterRegion FROM Property WHERE (PropertyID = @PropertyID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Subdivision", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Subdivision", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccountNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GroupType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GutterRegion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GutterRegion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PropertyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Address", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_City", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_State", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Zip", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Phone", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Subdivision", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Subdivision", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Subdivision", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Subdivision", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AccountNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccountNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GroupType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GroupType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GutterRegion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GutterRegion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GutterRegion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GutterRegion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     PropertyID, CustomerID, Description, Address, City, State, Zip, Phone," +
                " Subdivision, Active, AccountNumber, GroupType, GutterRegion\r\nFROM         Prope" +
                "rty";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"INSERT INTO Property
                      (CustomerID, Description, Address, City, State, Zip, Phone, Subdivision, Active, AccountNumber, GroupType, GutterRegion)
VALUES     (@CustomerID,@Description,@Address,@City,@State,@Zip,@Phone,@Subdivision,@Active,@AccountNumber,@GroupType,@GutterRegion); 
SELECT PropertyID, CustomerID, Description, Address, City, State, Zip, Phone, Subdivision, Active, AccountNumber, GroupType, GutterRegion FROM Property WHERE (PropertyID = SCOPE_IDENTITY())";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Zip", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Phone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Subdivision", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Subdivision", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Active", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccountNumber", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GroupType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GutterRegion", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GutterRegion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "UPDATE Property\r\nSET          GroupType = @GroupType\r\nWHERE  (PropertyID = @propI" +
                "D); ";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GroupType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@propID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.PropertyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.PropertyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.PropertyDataTable dataTable = new MMSDataSet.PropertyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.PropertyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Property");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_PropertyID, int Original_CustomerID, string Original_Description, string Original_Address, string Original_City, string Original_State, string Original_Zip, string Original_Phone, string Original_Subdivision, bool Original_Active, string Original_AccountNumber, string Original_GroupType, string Original_GutterRegion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_PropertyID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_CustomerID));
            if ((Original_Description == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Description));
            }
            if ((Original_Address == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Address));
            }
            if ((Original_City == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_City));
            }
            if ((Original_State == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_State));
            }
            if ((Original_Zip == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_Zip));
            }
            if ((Original_Phone == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_Phone));
            }
            if ((Original_Subdivision == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_Subdivision));
            }
            this.Adapter.DeleteCommand.Parameters[16].Value = ((bool)(Original_Active));
            if ((Original_AccountNumber == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_AccountNumber));
            }
            if ((Original_GroupType == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_GroupType));
            }
            if ((Original_GutterRegion == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_GutterRegion));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CustomerID, string Description, string Address, string City, string State, string Zip, string Phone, string Subdivision, bool Active, string AccountNumber, string GroupType, string GutterRegion) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CustomerID));
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Description));
            }
            if ((Address == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(City));
            }
            if ((State == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(State));
            }
            if ((Zip == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Zip));
            }
            if ((Phone == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Phone));
            }
            if ((Subdivision == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Subdivision));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(Active));
            if ((AccountNumber == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(AccountNumber));
            }
            if ((GroupType == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(GroupType));
            }
            if ((GutterRegion == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(GutterRegion));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CustomerID, 
                    string Description, 
                    string Address, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Phone, 
                    string Subdivision, 
                    bool Active, 
                    string AccountNumber, 
                    string GroupType, 
                    string GutterRegion, 
                    int Original_PropertyID, 
                    int Original_CustomerID, 
                    string Original_Description, 
                    string Original_Address, 
                    string Original_City, 
                    string Original_State, 
                    string Original_Zip, 
                    string Original_Phone, 
                    string Original_Subdivision, 
                    bool Original_Active, 
                    string Original_AccountNumber, 
                    string Original_GroupType, 
                    string Original_GutterRegion, 
                    int PropertyID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CustomerID));
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Description));
            }
            if ((Address == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(City));
            }
            if ((State == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(State));
            }
            if ((Zip == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Zip));
            }
            if ((Phone == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Phone));
            }
            if ((Subdivision == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Subdivision));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Active));
            if ((AccountNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(AccountNumber));
            }
            if ((GroupType == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(GroupType));
            }
            if ((GutterRegion == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(GutterRegion));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_PropertyID));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_CustomerID));
            if ((Original_Description == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Description));
            }
            if ((Original_Address == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_Address));
            }
            if ((Original_City == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_City));
            }
            if ((Original_State == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_State));
            }
            if ((Original_Zip == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_Zip));
            }
            if ((Original_Phone == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_Phone));
            }
            if ((Original_Subdivision == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_Subdivision));
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((bool)(Original_Active));
            if ((Original_AccountNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_AccountNumber));
            }
            if ((Original_GroupType == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_GroupType));
            }
            if ((Original_GutterRegion == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_GutterRegion));
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(PropertyID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CustomerID, 
                    string Description, 
                    string Address, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Phone, 
                    string Subdivision, 
                    bool Active, 
                    string AccountNumber, 
                    string GroupType, 
                    string GutterRegion, 
                    int Original_PropertyID, 
                    int Original_CustomerID, 
                    string Original_Description, 
                    string Original_Address, 
                    string Original_City, 
                    string Original_State, 
                    string Original_Zip, 
                    string Original_Phone, 
                    string Original_Subdivision, 
                    bool Original_Active, 
                    string Original_AccountNumber, 
                    string Original_GroupType, 
                    string Original_GutterRegion) {
            return this.Update(CustomerID, Description, Address, City, State, Zip, Phone, Subdivision, Active, AccountNumber, GroupType, GutterRegion, Original_PropertyID, Original_CustomerID, Original_Description, Original_Address, Original_City, Original_State, Original_Zip, Original_Phone, Original_Subdivision, Original_Active, Original_AccountNumber, Original_GroupType, Original_GutterRegion, Original_PropertyID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(int CustomerID, string Description, string Address, string City, string State, string Zip, string Phone, string Subdivision, bool Active, string AccountNumber, string GroupType, string GutterRegion) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(CustomerID));
            if ((Description == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(Description));
            }
            if ((Address == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(Address));
            }
            if ((City == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(City));
            }
            if ((State == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(State));
            }
            if ((Zip == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(Zip));
            }
            if ((Phone == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(Phone));
            }
            if ((Subdivision == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(Subdivision));
            }
            command.Parameters[8].Value = ((bool)(Active));
            if ((AccountNumber == null)) {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(AccountNumber));
            }
            if ((GroupType == null)) {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(GroupType));
            }
            if ((GutterRegion == null)) {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[11].Value = ((string)(GutterRegion));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateGroupType(string GroupType, int propID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((GroupType == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(GroupType));
            }
            command.Parameters[1].Value = ((int)(propID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EmployeeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmployeeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Employee";
            tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("Phone1", "Phone1");
            tableMapping.ColumnMappings.Add("Phone2", "Phone2");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("Contractor", "Contractor");
            tableMapping.ColumnMappings.Add("Active", "Active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Employee] WHERE (([EmployeeID] = @Original_EmployeeID) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Address] = @Original_Address)) AND ((@IsNull_City = 1 AND [City] IS NULL) OR ([City] = @Original_City)) AND ((@IsNull_FirstName = 1 AND [FirstName] IS NULL) OR ([FirstName] = @Original_FirstName)) AND ((@IsNull_LastName = 1 AND [LastName] IS NULL) OR ([LastName] = @Original_LastName)) AND ((@IsNull_Notes = 1 AND [Notes] IS NULL) OR ([Notes] = @Original_Notes)) AND ((@IsNull_Phone1 = 1 AND [Phone1] IS NULL) OR ([Phone1] = @Original_Phone1)) AND ((@IsNull_Phone2 = 1 AND [Phone2] IS NULL) OR ([Phone2] = @Original_Phone2)) AND ((@IsNull_State = 1 AND [State] IS NULL) OR ([State] = @Original_State)) AND ((@IsNull_Zip = 1 AND [Zip] IS NULL) OR ([Zip] = @Original_Zip)) AND ([Contractor] = @Original_Contractor) AND ([Active] = @Original_Active))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Address", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_City", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LastName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Notes", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Notes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Phone1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Phone2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_State", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Zip", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Contractor", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Contractor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Employee] ([Address], [City], [FirstName], [LastName], [Notes], [Phone1], [Phone2], [State], [Zip], [Contractor], [Active]) VALUES (@Address, @City, @FirstName, @LastName, @Notes, @Phone1, @Phone2, @State, @Zip, @Contractor, @Active);
SELECT EmployeeID, Address, City, FirstName, LastName, Notes, Phone1, Phone2, State, Zip, Contractor, Active FROM Employee WHERE (EmployeeID = SCOPE_IDENTITY()) ORDER BY FirstName";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Contractor", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Contractor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Employee] SET [Address] = @Address, [City] = @City, [FirstName] = @FirstName, [LastName] = @LastName, [Notes] = @Notes, [Phone1] = @Phone1, [Phone2] = @Phone2, [State] = @State, [Zip] = @Zip, [Contractor] = @Contractor, [Active] = @Active WHERE (([EmployeeID] = @Original_EmployeeID) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Address] = @Original_Address)) AND ((@IsNull_City = 1 AND [City] IS NULL) OR ([City] = @Original_City)) AND ((@IsNull_FirstName = 1 AND [FirstName] IS NULL) OR ([FirstName] = @Original_FirstName)) AND ((@IsNull_LastName = 1 AND [LastName] IS NULL) OR ([LastName] = @Original_LastName)) AND ((@IsNull_Notes = 1 AND [Notes] IS NULL) OR ([Notes] = @Original_Notes)) AND ((@IsNull_Phone1 = 1 AND [Phone1] IS NULL) OR ([Phone1] = @Original_Phone1)) AND ((@IsNull_Phone2 = 1 AND [Phone2] IS NULL) OR ([Phone2] = @Original_Phone2)) AND ((@IsNull_State = 1 AND [State] IS NULL) OR ([State] = @Original_State)) AND ((@IsNull_Zip = 1 AND [Zip] IS NULL) OR ([Zip] = @Original_Zip)) AND ([Contractor] = @Original_Contractor) AND ([Active] = @Original_Active));
SELECT EmployeeID, Address, City, FirstName, LastName, Notes, Phone1, Phone2, State, Zip, Contractor, Active FROM Employee WHERE (EmployeeID = @EmployeeID) ORDER BY FirstName";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Contractor", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Contractor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Address", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_City", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LastName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Notes", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Notes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Phone1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Phone2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_State", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Zip", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Contractor", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Contractor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        EmployeeID, Address, City, FirstName, LastName, Notes, Phone1, Phon" +
                "e2, State, Zip, Contractor, Active\r\nFROM            Employee\r\nORDER BY FirstName" +
                "";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[1].CommandText = "SELECT Active, Address, City, Contractor, EmployeeID, FirstName, LastName, Notes," +
                " Phone1, Phone2, State, Zip FROM Employee WHERE (Active = @active)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@active", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.EmployeeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.EmployeeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.EmployeeDataTable dataTable = new MMSDataSet.EmployeeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(MMSDataSet.EmployeeDataTable dataTable, bool active) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((bool)(active));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.EmployeeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Employee");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_EmployeeID, string Original_Address, string Original_City, string Original_FirstName, string Original_LastName, string Original_Notes, string Original_Phone1, string Original_Phone2, string Original_State, string Original_Zip, bool Original_Contractor, bool Original_Active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_EmployeeID));
            if ((Original_Address == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Address));
            }
            if ((Original_City == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_City));
            }
            if ((Original_FirstName == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_FirstName));
            }
            if ((Original_LastName == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_LastName));
            }
            if ((Original_Notes == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Notes));
            }
            if ((Original_Phone1 == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Phone1));
            }
            if ((Original_Phone2 == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_Phone2));
            }
            if ((Original_State == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_State));
            }
            if ((Original_Zip == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Zip));
            }
            this.Adapter.DeleteCommand.Parameters[19].Value = ((bool)(Original_Contractor));
            this.Adapter.DeleteCommand.Parameters[20].Value = ((bool)(Original_Active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Address, string City, string FirstName, string LastName, string Notes, string Phone1, string Phone2, string State, string Zip, bool Contractor, bool Active) {
            if ((Address == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(City));
            }
            if ((FirstName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(FirstName));
            }
            if ((LastName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LastName));
            }
            if ((Notes == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Notes));
            }
            if ((Phone1 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Phone1));
            }
            if ((Phone2 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Phone2));
            }
            if ((State == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(State));
            }
            if ((Zip == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Zip));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(Contractor));
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(Active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Address, 
                    string City, 
                    string FirstName, 
                    string LastName, 
                    string Notes, 
                    string Phone1, 
                    string Phone2, 
                    string State, 
                    string Zip, 
                    bool Contractor, 
                    bool Active, 
                    int Original_EmployeeID, 
                    string Original_Address, 
                    string Original_City, 
                    string Original_FirstName, 
                    string Original_LastName, 
                    string Original_Notes, 
                    string Original_Phone1, 
                    string Original_Phone2, 
                    string Original_State, 
                    string Original_Zip, 
                    bool Original_Contractor, 
                    bool Original_Active, 
                    int EmployeeID) {
            if ((Address == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(City));
            }
            if ((FirstName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(FirstName));
            }
            if ((LastName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LastName));
            }
            if ((Notes == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Notes));
            }
            if ((Phone1 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Phone1));
            }
            if ((Phone2 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Phone2));
            }
            if ((State == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(State));
            }
            if ((Zip == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Zip));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Contractor));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Active));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_EmployeeID));
            if ((Original_Address == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Address));
            }
            if ((Original_City == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_City));
            }
            if ((Original_FirstName == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_FirstName));
            }
            if ((Original_LastName == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_LastName));
            }
            if ((Original_Notes == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_Notes));
            }
            if ((Original_Phone1 == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_Phone1));
            }
            if ((Original_Phone2 == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_Phone2));
            }
            if ((Original_State == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_State));
            }
            if ((Original_Zip == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_Zip));
            }
            this.Adapter.UpdateCommand.Parameters[30].Value = ((bool)(Original_Contractor));
            this.Adapter.UpdateCommand.Parameters[31].Value = ((bool)(Original_Active));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(EmployeeID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Address, 
                    string City, 
                    string FirstName, 
                    string LastName, 
                    string Notes, 
                    string Phone1, 
                    string Phone2, 
                    string State, 
                    string Zip, 
                    bool Contractor, 
                    bool Active, 
                    int Original_EmployeeID, 
                    string Original_Address, 
                    string Original_City, 
                    string Original_FirstName, 
                    string Original_LastName, 
                    string Original_Notes, 
                    string Original_Phone1, 
                    string Original_Phone2, 
                    string Original_State, 
                    string Original_Zip, 
                    bool Original_Contractor, 
                    bool Original_Active) {
            return this.Update(Address, City, FirstName, LastName, Notes, Phone1, Phone2, State, Zip, Contractor, Active, Original_EmployeeID, Original_Address, Original_City, Original_FirstName, Original_LastName, Original_Notes, Original_Phone1, Original_Phone2, Original_State, Original_Zip, Original_Contractor, Original_Active, Original_EmployeeID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CustomerJobTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustomerJobTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CustomerJob";
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("Repeat", "Repeat");
            tableMapping.ColumnMappings.Add("Frequency", "Frequency");
            tableMapping.ColumnMappings.Add("IntervalType", "IntervalType");
            tableMapping.ColumnMappings.Add("Cost", "Cost");
            tableMapping.ColumnMappings.Add("CostContractor", "CostContractor");
            tableMapping.ColumnMappings.Add("CostFourStep", "CostFourStep");
            tableMapping.ColumnMappings.Add("Instructions", "Instructions");
            tableMapping.ColumnMappings.Add("PropertyID", "PropertyID");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("ManHours", "ManHours");
            tableMapping.ColumnMappings.Add("Compliments", "Compliments");
            tableMapping.ColumnMappings.Add("Complaints", "Complaints");
            tableMapping.ColumnMappings.Add("CostB", "CostB");
            tableMapping.ColumnMappings.Add("CostC", "CostC");
            tableMapping.ColumnMappings.Add("CrewKey", "CrewKey");
            tableMapping.ColumnMappings.Add("SelectPrint", "SelectPrint");
            tableMapping.ColumnMappings.Add("MaterialCost", "MaterialCost");
            tableMapping.ColumnMappings.Add("Revenue", "Revenue");
            tableMapping.ColumnMappings.Add("QBInvoiceID", "QBInvoiceID");
            tableMapping.ColumnMappings.Add("QBItemID", "QBItemID");
            tableMapping.ColumnMappings.Add("QBItemIDB", "QBItemIDB");
            tableMapping.ColumnMappings.Add("QBItemIDC", "QBItemIDC");
            tableMapping.ColumnMappings.Add("FourStepJob", "FourStepJob");
            tableMapping.ColumnMappings.Add("CustomerJobID", "CustomerJobID");
            tableMapping.ColumnMappings.Add("FourStepMat", "FourStepMat");
            tableMapping.ColumnMappings.Add("QBDescription", "QBDescription");
            tableMapping.ColumnMappings.Add("FourStepJob2", "FourStepJob2");
            tableMapping.ColumnMappings.Add("FourStepJob3", "FourStepJob3");
            tableMapping.ColumnMappings.Add("FourStepJob4", "FourStepJob4");
            tableMapping.ColumnMappings.Add("FourStepJob1", "FourStepJob1");
            tableMapping.ColumnMappings.Add("QBDescriptionA", "QBDescriptionA");
            tableMapping.ColumnMappings.Add("CostD", "CostD");
            tableMapping.ColumnMappings.Add("QBItemIDD", "QBItemIDD");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [CustomerJob] WHERE (([CustomerJobID] = @Original_CustomerJobID) AND " +
                "((@IsNull_Date = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)) AND ((@IsNu" +
                "ll_Type = 1 AND [Type] IS NULL) OR ([Type] = @Original_Type)) AND ((@IsNull_Repe" +
                "at = 1 AND [Repeat] IS NULL) OR ([Repeat] = @Original_Repeat)) AND ((@IsNull_Fre" +
                "quency = 1 AND [Frequency] IS NULL) OR ([Frequency] = @Original_Frequency)) AND " +
                "((@IsNull_IntervalType = 1 AND [IntervalType] IS NULL) OR ([IntervalType] = @Ori" +
                "ginal_IntervalType)) AND ((@IsNull_Cost = 1 AND [Cost] IS NULL) OR ([Cost] = @Or" +
                "iginal_Cost)) AND ((@IsNull_CostContractor = 1 AND [CostContractor] IS NULL) OR " +
                "([CostContractor] = @Original_CostContractor)) AND ((@IsNull_CostFourStep = 1 AN" +
                "D [CostFourStep] IS NULL) OR ([CostFourStep] = @Original_CostFourStep)) AND ((@I" +
                "sNull_Instructions = 1 AND [Instructions] IS NULL) OR ([Instructions] = @Origina" +
                "l_Instructions)) AND ([PropertyID] = @Original_PropertyID) AND ((@IsNull_Status " +
                "= 1 AND [Status] IS NULL) OR ([Status] = @Original_Status)) AND ((@IsNull_ManHou" +
                "rs = 1 AND [ManHours] IS NULL) OR ([ManHours] = @Original_ManHours)) AND ((@IsNu" +
                "ll_Complaints = 1 AND [Complaints] IS NULL) OR ([Complaints] = @Original_Complai" +
                "nts)) AND ((@IsNull_Compliments = 1 AND [Compliments] IS NULL) OR ([Compliments]" +
                " = @Original_Compliments)) AND ((@IsNull_CostB = 1 AND [CostB] IS NULL) OR ([Cos" +
                "tB] = @Original_CostB)) AND ((@IsNull_CostC = 1 AND [CostC] IS NULL) OR ([CostC]" +
                " = @Original_CostC)) AND ((@IsNull_CrewKey = 1 AND [CrewKey] IS NULL) OR ([CrewK" +
                "ey] = @Original_CrewKey)) AND ((@IsNull_SelectPrint = 1 AND [SelectPrint] IS NUL" +
                "L) OR ([SelectPrint] = @Original_SelectPrint)) AND ((@IsNull_MaterialCost = 1 AN" +
                "D [MaterialCost] IS NULL) OR ([MaterialCost] = @Original_MaterialCost)) AND ((@I" +
                "sNull_Revenue = 1 AND [Revenue] IS NULL) OR ([Revenue] = @Original_Revenue)) AND" +
                " ((@IsNull_QBInvoiceID = 1 AND [QBInvoiceID] IS NULL) OR ([QBInvoiceID] = @Origi" +
                "nal_QBInvoiceID)) AND ((@IsNull_QBItemID = 1 AND [QBItemID] IS NULL) OR ([QBItem" +
                "ID] = @Original_QBItemID)) AND ((@IsNull_QBItemIDB = 1 AND [QBItemIDB] IS NULL) " +
                "OR ([QBItemIDB] = @Original_QBItemIDB)) AND ((@IsNull_QBItemIDC = 1 AND [QBItemI" +
                "DC] IS NULL) OR ([QBItemIDC] = @Original_QBItemIDC)) AND ((@IsNull_FourStepJob =" +
                " 1 AND [FourStepJob] IS NULL) OR ([FourStepJob] = @Original_FourStepJob)) AND ((" +
                "@IsNull_FourStepMat = 1 AND [FourStepMat] IS NULL) OR ([FourStepMat] = @Original" +
                "_FourStepMat)) AND ((@IsNull_QBDescription = 1 AND [QBDescription] IS NULL) OR (" +
                "[QBDescription] = @Original_QBDescription)) AND ((@IsNull_FourStepJob1 = 1 AND [" +
                "FourStepJob1] IS NULL) OR ([FourStepJob1] = @Original_FourStepJob1)) AND ((@IsNu" +
                "ll_FourStepJob2 = 1 AND [FourStepJob2] IS NULL) OR ([FourStepJob2] = @Original_F" +
                "ourStepJob2)) AND ((@IsNull_FourStepJob3 = 1 AND [FourStepJob3] IS NULL) OR ([Fo" +
                "urStepJob3] = @Original_FourStepJob3)) AND ((@IsNull_FourStepJob4 = 1 AND [FourS" +
                "tepJob4] IS NULL) OR ([FourStepJob4] = @Original_FourStepJob4)) AND ((@IsNull_QB" +
                "DescriptionA = 1 AND [QBDescriptionA] IS NULL) OR ([QBDescriptionA] = @Original_" +
                "QBDescriptionA)) AND ((@IsNull_CostD = 1 AND [CostD] IS NULL) OR ([CostD] = @Ori" +
                "ginal_CostD)) AND ((@IsNull_QBItemIDD = 1 AND [QBItemIDD] IS NULL) OR ([QBItemID" +
                "D] = @Original_QBItemIDD)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerJobID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Repeat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Repeat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Repeat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Repeat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Frequency", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Frequency", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IntervalType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IntervalType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IntervalType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IntervalType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Cost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Cost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostContractor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostContractor", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostFourStep", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostFourStep", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Instructions", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Instructions", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PropertyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ManHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ManHours", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Complaints", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Complaints", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Compliments", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Compliments", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostB", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostC", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CrewKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CrewKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SelectPrint", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelectPrint", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MaterialCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MaterialCost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Revenue", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Revenue", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBInvoiceID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBInvoiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemIDB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemIDB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemIDC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemIDC", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepMat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepMat", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBDescription", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob1", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob2", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob3", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob4", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBDescriptionA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBDescriptionA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostD", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemIDD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemIDD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [CustomerJob] ([Date], [Type], [Repeat], [Frequency], [IntervalType], [Cost], [CostContractor], [CostFourStep], [Instructions], [PropertyID], [Status], [ManHours], [Complaints], [Compliments], [CostB], [CostC], [CrewKey], [SelectPrint], [MaterialCost], [Revenue], [QBInvoiceID], [QBItemID], [QBItemIDB], [QBItemIDC], [FourStepJob], [FourStepMat], [QBDescription], [FourStepJob1], [FourStepJob2], [FourStepJob3], [FourStepJob4], [QBDescriptionA], [CostD], [QBItemIDD]) VALUES (@Date, @Type, @Repeat, @Frequency, @IntervalType, @Cost, @CostContractor, @CostFourStep, @Instructions, @PropertyID, @Status, @ManHours, @Complaints, @Compliments, @CostB, @CostC, @CrewKey, @SelectPrint, @MaterialCost, @Revenue, @QBInvoiceID, @QBItemID, @QBItemIDB, @QBItemIDC, @FourStepJob, @FourStepMat, @QBDescription, @FourStepJob1, @FourStepJob2, @FourStepJob3, @FourStepJob4, @QBDescriptionA, @CostD, @QBItemIDD);
SELECT CustomerJobID, Date, Type, Repeat, Frequency, IntervalType, Cost, CostContractor, CostFourStep, Instructions, PropertyID, Status, ManHours, Complaints, Compliments, CostB, CostC, CrewKey, SelectPrint, MaterialCost, Revenue, QBInvoiceID, QBItemID, QBItemIDB, QBItemIDC, FourStepJob, FourStepMat, QBDescription, FourStepJob1, FourStepJob2, FourStepJob3, FourStepJob4, QBDescriptionA, CostD, QBItemIDD FROM CustomerJob WHERE (CustomerJobID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Repeat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Repeat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Frequency", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IntervalType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IntervalType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostContractor", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostFourStep", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Instructions", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ManHours", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Complaints", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Compliments", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostB", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostC", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CrewKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectPrint", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaterialCost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Revenue", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBInvoiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemIDB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemIDC", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepMat", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob1", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob2", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob3", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob4", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBDescriptionA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostD", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemIDD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [CustomerJob] SET [Date] = @Date, [Type] = @Type, [Repeat] = @Repeat, [Fre" +
                "quency] = @Frequency, [IntervalType] = @IntervalType, [Cost] = @Cost, [CostContr" +
                "actor] = @CostContractor, [CostFourStep] = @CostFourStep, [Instructions] = @Inst" +
                "ructions, [PropertyID] = @PropertyID, [Status] = @Status, [ManHours] = @ManHours" +
                ", [Complaints] = @Complaints, [Compliments] = @Compliments, [CostB] = @CostB, [C" +
                "ostC] = @CostC, [CrewKey] = @CrewKey, [SelectPrint] = @SelectPrint, [MaterialCos" +
                "t] = @MaterialCost, [Revenue] = @Revenue, [QBInvoiceID] = @QBInvoiceID, [QBItemI" +
                "D] = @QBItemID, [QBItemIDB] = @QBItemIDB, [QBItemIDC] = @QBItemIDC, [FourStepJob" +
                "] = @FourStepJob, [FourStepMat] = @FourStepMat, [QBDescription] = @QBDescription" +
                ", [FourStepJob1] = @FourStepJob1, [FourStepJob2] = @FourStepJob2, [FourStepJob3]" +
                " = @FourStepJob3, [FourStepJob4] = @FourStepJob4, [QBDescriptionA] = @QBDescript" +
                "ionA, [CostD] = @CostD, [QBItemIDD] = @QBItemIDD WHERE (([CustomerJobID] = @Orig" +
                "inal_CustomerJobID) AND ((@IsNull_Date = 1 AND [Date] IS NULL) OR ([Date] = @Ori" +
                "ginal_Date)) AND ((@IsNull_Type = 1 AND [Type] IS NULL) OR ([Type] = @Original_T" +
                "ype)) AND ((@IsNull_Repeat = 1 AND [Repeat] IS NULL) OR ([Repeat] = @Original_Re" +
                "peat)) AND ((@IsNull_Frequency = 1 AND [Frequency] IS NULL) OR ([Frequency] = @O" +
                "riginal_Frequency)) AND ((@IsNull_IntervalType = 1 AND [IntervalType] IS NULL) O" +
                "R ([IntervalType] = @Original_IntervalType)) AND ((@IsNull_Cost = 1 AND [Cost] I" +
                "S NULL) OR ([Cost] = @Original_Cost)) AND ((@IsNull_CostContractor = 1 AND [Cost" +
                "Contractor] IS NULL) OR ([CostContractor] = @Original_CostContractor)) AND ((@Is" +
                "Null_CostFourStep = 1 AND [CostFourStep] IS NULL) OR ([CostFourStep] = @Original" +
                "_CostFourStep)) AND ((@IsNull_Instructions = 1 AND [Instructions] IS NULL) OR ([" +
                "Instructions] = @Original_Instructions)) AND ([PropertyID] = @Original_PropertyI" +
                "D) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ([Status] = @Original_Statu" +
                "s)) AND ((@IsNull_ManHours = 1 AND [ManHours] IS NULL) OR ([ManHours] = @Origina" +
                "l_ManHours)) AND ((@IsNull_Complaints = 1 AND [Complaints] IS NULL) OR ([Complai" +
                "nts] = @Original_Complaints)) AND ((@IsNull_Compliments = 1 AND [Compliments] IS" +
                " NULL) OR ([Compliments] = @Original_Compliments)) AND ((@IsNull_CostB = 1 AND [" +
                "CostB] IS NULL) OR ([CostB] = @Original_CostB)) AND ((@IsNull_CostC = 1 AND [Cos" +
                "tC] IS NULL) OR ([CostC] = @Original_CostC)) AND ((@IsNull_CrewKey = 1 AND [Crew" +
                "Key] IS NULL) OR ([CrewKey] = @Original_CrewKey)) AND ((@IsNull_SelectPrint = 1 " +
                "AND [SelectPrint] IS NULL) OR ([SelectPrint] = @Original_SelectPrint)) AND ((@Is" +
                "Null_MaterialCost = 1 AND [MaterialCost] IS NULL) OR ([MaterialCost] = @Original" +
                "_MaterialCost)) AND ((@IsNull_Revenue = 1 AND [Revenue] IS NULL) OR ([Revenue] =" +
                " @Original_Revenue)) AND ((@IsNull_QBInvoiceID = 1 AND [QBInvoiceID] IS NULL) OR" +
                " ([QBInvoiceID] = @Original_QBInvoiceID)) AND ((@IsNull_QBItemID = 1 AND [QBItem" +
                "ID] IS NULL) OR ([QBItemID] = @Original_QBItemID)) AND ((@IsNull_QBItemIDB = 1 A" +
                "ND [QBItemIDB] IS NULL) OR ([QBItemIDB] = @Original_QBItemIDB)) AND ((@IsNull_QB" +
                "ItemIDC = 1 AND [QBItemIDC] IS NULL) OR ([QBItemIDC] = @Original_QBItemIDC)) AND" +
                " ((@IsNull_FourStepJob = 1 AND [FourStepJob] IS NULL) OR ([FourStepJob] = @Origi" +
                "nal_FourStepJob)) AND ((@IsNull_FourStepMat = 1 AND [FourStepMat] IS NULL) OR ([" +
                "FourStepMat] = @Original_FourStepMat)) AND ((@IsNull_QBDescription = 1 AND [QBDe" +
                "scription] IS NULL) OR ([QBDescription] = @Original_QBDescription)) AND ((@IsNul" +
                "l_FourStepJob1 = 1 AND [FourStepJob1] IS NULL) OR ([FourStepJob1] = @Original_Fo" +
                "urStepJob1)) AND ((@IsNull_FourStepJob2 = 1 AND [FourStepJob2] IS NULL) OR ([Fou" +
                "rStepJob2] = @Original_FourStepJob2)) AND ((@IsNull_FourStepJob3 = 1 AND [FourSt" +
                "epJob3] IS NULL) OR ([FourStepJob3] = @Original_FourStepJob3)) AND ((@IsNull_Fou" +
                "rStepJob4 = 1 AND [FourStepJob4] IS NULL) OR ([FourStepJob4] = @Original_FourSte" +
                "pJob4)) AND ((@IsNull_QBDescriptionA = 1 AND [QBDescriptionA] IS NULL) OR ([QBDe" +
                "scriptionA] = @Original_QBDescriptionA)) AND ((@IsNull_CostD = 1 AND [CostD] IS " +
                "NULL) OR ([CostD] = @Original_CostD)) AND ((@IsNull_QBItemIDD = 1 AND [QBItemIDD" +
                "] IS NULL) OR ([QBItemIDD] = @Original_QBItemIDD)));\r\nSELECT CustomerJobID, Date" +
                ", Type, Repeat, Frequency, IntervalType, Cost, CostContractor, CostFourStep, Ins" +
                "tructions, PropertyID, Status, ManHours, Complaints, Compliments, CostB, CostC, " +
                "CrewKey, SelectPrint, MaterialCost, Revenue, QBInvoiceID, QBItemID, QBItemIDB, Q" +
                "BItemIDC, FourStepJob, FourStepMat, QBDescription, FourStepJob1, FourStepJob2, F" +
                "ourStepJob3, FourStepJob4, QBDescriptionA, CostD, QBItemIDD FROM CustomerJob WHE" +
                "RE (CustomerJobID = @CustomerJobID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Repeat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Repeat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Frequency", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IntervalType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IntervalType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostContractor", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostFourStep", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Instructions", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ManHours", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Complaints", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Compliments", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostB", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostC", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CrewKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectPrint", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaterialCost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Revenue", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBInvoiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemIDB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemIDC", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepMat", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob1", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob2", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob3", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob4", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBDescriptionA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostD", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemIDD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerJobID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Repeat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Repeat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Repeat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Repeat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Frequency", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Frequency", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IntervalType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IntervalType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IntervalType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IntervalType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Cost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Cost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostContractor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostContractor", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostFourStep", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostFourStep", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Instructions", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Instructions", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PropertyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ManHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ManHours", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Complaints", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Complaints", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Compliments", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Compliments", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostB", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostC", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CrewKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CrewKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SelectPrint", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelectPrint", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MaterialCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MaterialCost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Revenue", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Revenue", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBInvoiceID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBInvoiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemIDB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemIDB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemIDC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemIDC", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepMat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepMat", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBDescription", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob1", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob2", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob3", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob4", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBDescriptionA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBDescriptionA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostD", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemIDD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemIDD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerJobID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[15];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT CustomerJobID, Date, Type, Repeat, Frequency, IntervalType, Cost, CostContractor, CostFourStep, Instructions, PropertyID, Status, ManHours, Complaints, Compliments, CostB, CostC, CrewKey, SelectPrint, 
                  MaterialCost, Revenue, QBInvoiceID, QBItemID, QBItemIDB, QBItemIDC, FourStepJob, FourStepMat, QBDescription, FourStepJob1, FourStepJob2, FourStepJob3, FourStepJob4, QBDescriptionA, CostD, 
                  QBItemIDD
FROM     CustomerJob";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT Complaints, Compliments, Cost, CostB, CostC, CostContractor, CostD, CostFourStep, CrewKey, CustomerJobID, Date, FourStepJob, FourStepJob1, FourStepJob2, FourStepJob3, FourStepJob4, FourStepMat, Frequency, Instructions, IntervalType, ManHours, MaterialCost, PropertyID, QBDescription, QBDescriptionA, QBInvoiceID, QBItemID, QBItemIDB, QBItemIDC, QBItemIDD, Repeat, Revenue, SelectPrint, Status, Type FROM CustomerJob WHERE (CustomerJobID = @CustJobID)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustJobID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[2].CommandText = @"INSERT INTO CustomerJob
                         (Date, Type, Cost, CostContractor, CostFourStep, Instructions, PropertyID, Status, CostB, CostC, CostD, Revenue, FourStepJob, MaterialCost, FourStepMat, Notes, FourStepJob1, FourStepJob2, FourStepJob3, 
                         FourStepJob4)
VALUES        (@Date,@Type,@Cost,@CostContractor,@CostFourStep,@Instructions,@PropertyID,@Status,@CostB,@CostC,@CostD,@Revenue,@FourStepJob,@MaterialCost,@FourStepMat,@Notes,@FourStepJob1,@FourStepJob2,@FourStepJob3,@FourStepJob4);                

SELECT CustomerJobID, Date, Type, Repeat, Frequency, IntervalType, Cost, CostContractor, CostFourStep, Instructions, PropertyID, Status, ManHours, Complaints, Compliments FROM CustomerJob WHERE (CustomerJobID = SCOPE_IDENTITY())";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostContractor", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostFourStep", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Instructions", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostB", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostC", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostD", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Revenue", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaterialCost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepMat", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob1", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob2", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob3", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob4", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[3].CommandText = @"SELECT CustomerJob.Complaints, CustomerJob.Compliments, CustomerJob.Cost, CustomerJob.CostB, CustomerJob.CostC, CustomerJob.CostContractor, CustomerJob.CostD, CustomerJob.CostFourStep, CustomerJob.CrewKey, CustomerJob.CustomerJobID, CustomerJob.Date, CustomerJob.FourStepJob, CustomerJob.FourStepJob1, CustomerJob.FourStepJob2, CustomerJob.FourStepJob3, CustomerJob.FourStepJob4, CustomerJob.FourStepMat, CustomerJob.Frequency, CustomerJob.Instructions, CustomerJob.IntervalType, CustomerJob.ManHours, CustomerJob.MaterialCost, CustomerJob.PropertyID, CustomerJob.QBDescription, CustomerJob.QBDescriptionA, CustomerJob.QBInvoiceID, CustomerJob.QBItemID, CustomerJob.QBItemIDB, CustomerJob.QBItemIDC, CustomerJob.QBItemIDD, CustomerJob.Repeat, CustomerJob.Revenue, CustomerJob.SelectPrint, CustomerJob.Status, CustomerJob.Type FROM CustomerJob INNER JOIN Crew ON CustomerJob.CustomerJobID = Crew.CustomerJobID INNER JOIN Employee ON Crew.EmployeeId = Employee.EmployeeID AND Crew.EmployeeId IN (2, 5) GROUP BY CustomerJob.CustomerJobID, CustomerJob.Date, CustomerJob.Type, CustomerJob.Repeat, CustomerJob.Frequency, CustomerJob.IntervalType, CustomerJob.Cost, CustomerJob.CostB, CustomerJob.CostC, CustomerJob.CostContractor, CustomerJob.CostFourStep, CustomerJob.CrewKey, CustomerJob.Instructions, CustomerJob.MaterialCost, CustomerJob.PropertyID, CustomerJob.SelectPrint, CustomerJob.Status, CustomerJob.ManHours, CustomerJob.Complaints, CustomerJob.Compliments HAVING (COUNT(*) = 2)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"SELECT        Customer.LastName, Customer.FirstName, Property.Address, CustomerJob.Type, CustomerJob.CrewKey, CustomerJob.Date
FROM            CustomerJob INNER JOIN
                         Property ON CustomerJob.PropertyID = Property.PropertyID INNER JOIN
                         Customer ON Property.CustomerID = Customer.CustomerID
WHERE        (CustomerJob.FourStepJob = 'true')
ORDER BY Customer.LastName, Customer.FirstName, CustomerJob.Date";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[5].CommandText = "UPDATE    CustomerJob\r\nSET              CrewKey = @CrewKey\r\nWHERE     (CustomerJo" +
                "bID = @CustomerJobID);  \r\n";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CrewKey", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerJobID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "UPDATE       CustomerJob\r\nSET                FourStepJob1 = @Step\r\nWHERE        (" +
                "CustomerJobID = @custjobID)";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Step", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@custjobID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "UPDATE       CustomerJob\r\nSET                FourStepJob2 = @Step\r\nWHERE Customer" +
                "JobID = @custjobID";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Step", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@custjobID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[8] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "UPDATE       CustomerJob\r\nSET                FourStepJob3 = @Step\r\nWHERE Customer" +
                "JobID = @custjobID";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Step", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@custjobID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[9] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "UPDATE       CustomerJob\r\nSET                FourStepJob4 = @Step\r\nWHERE Customer" +
                "JobID = @custjobID";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Step", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@custjobID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[10] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "UPDATE CustomerJob\r\nSET         Date = @date\r\nWHERE (CustomerJobID = @customerjob" +
                "id)";
            this._commandCollection[10].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@date", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@customerjobid", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[11] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[11].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[11].CommandText = @"UPDATE    CustomerJob
SET              Date = @date, Type = @type, Cost = @cost, CostContractor = @costcontractor, CostFourStep = @costfourstep, Instructions = @instruction, 
                      Status = @status, ManHours = @manhours, Compliments = @compliments, Complaints = @complaints, CostB = @costb, CostC = @costc, 
                      MaterialCost = @materialcost, Revenue = @revenue
WHERE     (CustomerJobID = @customerjobid)";
            this._commandCollection[11].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@date", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@costcontractor", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@costfourstep", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@instruction", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@manhours", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@compliments", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@complaints", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@costb", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@costc", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@materialcost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@revenue", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@customerjobid", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[12] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[12].Connection = this.Connection;
            this._commandCollection[12].CommandText = "UPDATE CustomerJob\r\nSET         Cost = @cost, CostB = @costb, CostC = @costc, QBI" +
                "nvoiceID = @qbinvoiceid, QBItemID = @qbitemid, QBItemIDB = @qbitemidb, QBItemIDC" +
                " = @qbitemidc\r\nWHERE (CustomerJobID = @jobid)";
            this._commandCollection[12].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@costb", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@costc", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@qbinvoiceid", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@qbitemid", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@qbitemidb", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@qbitemidc", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@jobid", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[13] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[13].Connection = this.Connection;
            this._commandCollection[13].CommandText = "UPDATE       CustomerJob\r\nSET                QBDescriptionA = @QBDesc\r\nWHERE     " +
                "   (CustomerJobID = @Original_CustomerJobID);  ";
            this._commandCollection[13].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBDesc", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerJobID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[14] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[14].Connection = this.Connection;
            this._commandCollection[14].CommandText = "UPDATE       CustomerJob\r\nSET                QBDescription = @QBDesc\r\nWHERE      " +
                "  (CustomerJobID = @Original_CustomerJobID);  ";
            this._commandCollection[14].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[14].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBDesc", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[14].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerJobID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.CustomerJobDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.CustomerJobDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.CustomerJobDataTable dataTable = new MMSDataSet.CustomerJobDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(MMSDataSet.CustomerJobDataTable dataTable, long CustJobID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(CustJobID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustomerJobDataTable GetDataBy3(long CustJobID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(CustJobID));
            MMSDataSet.CustomerJobDataTable dataTable = new MMSDataSet.CustomerJobDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int TestFillByCrew(MMSDataSet.CustomerJobDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustomerJobDataTable TestGetDataByCrew() {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            MMSDataSet.CustomerJobDataTable dataTable = new MMSDataSet.CustomerJobDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int TestQuery4step(MMSDataSet.CustomerJobDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustomerJobDataTable GetDataBy6() {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            MMSDataSet.CustomerJobDataTable dataTable = new MMSDataSet.CustomerJobDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.CustomerJobDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CustomerJob");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    long Original_CustomerJobID, 
                    global::System.Nullable<global::System.DateTime> Original_Date, 
                    string Original_Type, 
                    global::System.Nullable<bool> Original_Repeat, 
                    global::System.Nullable<int> Original_Frequency, 
                    string Original_IntervalType, 
                    global::System.Nullable<decimal> Original_Cost, 
                    global::System.Nullable<decimal> Original_CostContractor, 
                    global::System.Nullable<decimal> Original_CostFourStep, 
                    string Original_Instructions, 
                    int Original_PropertyID, 
                    string Original_Status, 
                    global::System.Nullable<float> Original_ManHours, 
                    string Original_Complaints, 
                    string Original_Compliments, 
                    global::System.Nullable<decimal> Original_CostB, 
                    global::System.Nullable<decimal> Original_CostC, 
                    string Original_CrewKey, 
                    global::System.Nullable<bool> Original_SelectPrint, 
                    global::System.Nullable<decimal> Original_MaterialCost, 
                    global::System.Nullable<decimal> Original_Revenue, 
                    string Original_QBInvoiceID, 
                    string Original_QBItemID, 
                    string Original_QBItemIDB, 
                    string Original_QBItemIDC, 
                    global::System.Nullable<bool> Original_FourStepJob, 
                    global::System.Nullable<float> Original_FourStepMat, 
                    string Original_QBDescription, 
                    global::System.Nullable<bool> Original_FourStepJob1, 
                    global::System.Nullable<bool> Original_FourStepJob2, 
                    global::System.Nullable<bool> Original_FourStepJob3, 
                    global::System.Nullable<bool> Original_FourStepJob4, 
                    string Original_QBDescriptionA, 
                    global::System.Nullable<decimal> Original_CostD, 
                    string Original_QBItemIDD) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_CustomerJobID));
            if ((Original_Date.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_Date.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_Type == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Type));
            }
            if ((Original_Repeat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_Repeat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_Frequency.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Frequency.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_IntervalType == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_IntervalType));
            }
            if ((Original_Cost.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_Cost.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_CostContractor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_CostContractor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_CostFourStep.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((decimal)(Original_CostFourStep.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_Instructions == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Instructions));
            }
            this.Adapter.DeleteCommand.Parameters[19].Value = ((int)(Original_PropertyID));
            if ((Original_Status == null)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_Status));
            }
            if ((Original_ManHours.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((float)(Original_ManHours.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_Complaints == null)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((string)(Original_Complaints));
            }
            if ((Original_Compliments == null)) {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[27].Value = ((string)(Original_Compliments));
            }
            if ((Original_CostB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[29].Value = ((decimal)(Original_CostB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_CostC.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[31].Value = ((decimal)(Original_CostC.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Original_CrewKey == null)) {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[33].Value = ((string)(Original_CrewKey));
            }
            if ((Original_SelectPrint.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[35].Value = ((bool)(Original_SelectPrint.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_MaterialCost.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[37].Value = ((decimal)(Original_MaterialCost.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((Original_Revenue.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[39].Value = ((decimal)(Original_Revenue.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_QBInvoiceID == null)) {
                this.Adapter.DeleteCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[41].Value = ((string)(Original_QBInvoiceID));
            }
            if ((Original_QBItemID == null)) {
                this.Adapter.DeleteCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[43].Value = ((string)(Original_QBItemID));
            }
            if ((Original_QBItemIDB == null)) {
                this.Adapter.DeleteCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[45].Value = ((string)(Original_QBItemIDB));
            }
            if ((Original_QBItemIDC == null)) {
                this.Adapter.DeleteCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[47].Value = ((string)(Original_QBItemIDC));
            }
            if ((Original_FourStepJob.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[49].Value = ((bool)(Original_FourStepJob.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((Original_FourStepMat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[51].Value = ((float)(Original_FourStepMat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((Original_QBDescription == null)) {
                this.Adapter.DeleteCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[53].Value = ((string)(Original_QBDescription));
            }
            if ((Original_FourStepJob1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[55].Value = ((bool)(Original_FourStepJob1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((Original_FourStepJob2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[57].Value = ((bool)(Original_FourStepJob2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((Original_FourStepJob3.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[59].Value = ((bool)(Original_FourStepJob3.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((Original_FourStepJob4.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[61].Value = ((bool)(Original_FourStepJob4.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((Original_QBDescriptionA == null)) {
                this.Adapter.DeleteCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[63].Value = ((string)(Original_QBDescriptionA));
            }
            if ((Original_CostD.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[65].Value = ((decimal)(Original_CostD.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((Original_QBItemIDD == null)) {
                this.Adapter.DeleteCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[67].Value = ((string)(Original_QBItemIDD));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<global::System.DateTime> Date, 
                    string Type, 
                    global::System.Nullable<bool> Repeat, 
                    global::System.Nullable<int> Frequency, 
                    string IntervalType, 
                    global::System.Nullable<decimal> Cost, 
                    global::System.Nullable<decimal> CostContractor, 
                    global::System.Nullable<decimal> CostFourStep, 
                    string Instructions, 
                    int PropertyID, 
                    string Status, 
                    global::System.Nullable<float> ManHours, 
                    string Complaints, 
                    string Compliments, 
                    global::System.Nullable<decimal> CostB, 
                    global::System.Nullable<decimal> CostC, 
                    string CrewKey, 
                    global::System.Nullable<bool> SelectPrint, 
                    global::System.Nullable<decimal> MaterialCost, 
                    global::System.Nullable<decimal> Revenue, 
                    string QBInvoiceID, 
                    string QBItemID, 
                    string QBItemIDB, 
                    string QBItemIDC, 
                    global::System.Nullable<bool> FourStepJob, 
                    global::System.Nullable<float> FourStepMat, 
                    string QBDescription, 
                    global::System.Nullable<bool> FourStepJob1, 
                    global::System.Nullable<bool> FourStepJob2, 
                    global::System.Nullable<bool> FourStepJob3, 
                    global::System.Nullable<bool> FourStepJob4, 
                    string QBDescriptionA, 
                    global::System.Nullable<decimal> CostD, 
                    string QBItemIDD) {
            if ((Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Type == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Type));
            }
            if ((Repeat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(Repeat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Frequency.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Frequency.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((IntervalType == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(IntervalType));
            }
            if ((Cost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Cost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((CostContractor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(CostContractor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((CostFourStep.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(CostFourStep.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Instructions == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Instructions));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(PropertyID));
            if ((Status == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Status));
            }
            if ((ManHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((float)(ManHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Complaints == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Complaints));
            }
            if ((Compliments == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Compliments));
            }
            if ((CostB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(CostB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((CostC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(CostC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((CrewKey == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(CrewKey));
            }
            if ((SelectPrint.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((bool)(SelectPrint.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((MaterialCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((decimal)(MaterialCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Revenue.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(Revenue.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((QBInvoiceID == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(QBInvoiceID));
            }
            if ((QBItemID == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(QBItemID));
            }
            if ((QBItemIDB == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(QBItemIDB));
            }
            if ((QBItemIDC == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(QBItemIDC));
            }
            if ((FourStepJob.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((bool)(FourStepJob.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((FourStepMat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((float)(FourStepMat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((QBDescription == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(QBDescription));
            }
            if ((FourStepJob1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((bool)(FourStepJob1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((FourStepJob2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((bool)(FourStepJob2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((FourStepJob3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((bool)(FourStepJob3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((FourStepJob4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((bool)(FourStepJob4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((QBDescriptionA == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(QBDescriptionA));
            }
            if ((CostD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((decimal)(CostD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((QBItemIDD == null)) {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = ((string)(QBItemIDD));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<global::System.DateTime> Date, 
                    string Type, 
                    global::System.Nullable<bool> Repeat, 
                    global::System.Nullable<int> Frequency, 
                    string IntervalType, 
                    global::System.Nullable<decimal> Cost, 
                    global::System.Nullable<decimal> CostContractor, 
                    global::System.Nullable<decimal> CostFourStep, 
                    string Instructions, 
                    int PropertyID, 
                    string Status, 
                    global::System.Nullable<float> ManHours, 
                    string Complaints, 
                    string Compliments, 
                    global::System.Nullable<decimal> CostB, 
                    global::System.Nullable<decimal> CostC, 
                    string CrewKey, 
                    global::System.Nullable<bool> SelectPrint, 
                    global::System.Nullable<decimal> MaterialCost, 
                    global::System.Nullable<decimal> Revenue, 
                    string QBInvoiceID, 
                    string QBItemID, 
                    string QBItemIDB, 
                    string QBItemIDC, 
                    global::System.Nullable<bool> FourStepJob, 
                    global::System.Nullable<float> FourStepMat, 
                    string QBDescription, 
                    global::System.Nullable<bool> FourStepJob1, 
                    global::System.Nullable<bool> FourStepJob2, 
                    global::System.Nullable<bool> FourStepJob3, 
                    global::System.Nullable<bool> FourStepJob4, 
                    string QBDescriptionA, 
                    global::System.Nullable<decimal> CostD, 
                    string QBItemIDD, 
                    long Original_CustomerJobID, 
                    global::System.Nullable<global::System.DateTime> Original_Date, 
                    string Original_Type, 
                    global::System.Nullable<bool> Original_Repeat, 
                    global::System.Nullable<int> Original_Frequency, 
                    string Original_IntervalType, 
                    global::System.Nullable<decimal> Original_Cost, 
                    global::System.Nullable<decimal> Original_CostContractor, 
                    global::System.Nullable<decimal> Original_CostFourStep, 
                    string Original_Instructions, 
                    int Original_PropertyID, 
                    string Original_Status, 
                    global::System.Nullable<float> Original_ManHours, 
                    string Original_Complaints, 
                    string Original_Compliments, 
                    global::System.Nullable<decimal> Original_CostB, 
                    global::System.Nullable<decimal> Original_CostC, 
                    string Original_CrewKey, 
                    global::System.Nullable<bool> Original_SelectPrint, 
                    global::System.Nullable<decimal> Original_MaterialCost, 
                    global::System.Nullable<decimal> Original_Revenue, 
                    string Original_QBInvoiceID, 
                    string Original_QBItemID, 
                    string Original_QBItemIDB, 
                    string Original_QBItemIDC, 
                    global::System.Nullable<bool> Original_FourStepJob, 
                    global::System.Nullable<float> Original_FourStepMat, 
                    string Original_QBDescription, 
                    global::System.Nullable<bool> Original_FourStepJob1, 
                    global::System.Nullable<bool> Original_FourStepJob2, 
                    global::System.Nullable<bool> Original_FourStepJob3, 
                    global::System.Nullable<bool> Original_FourStepJob4, 
                    string Original_QBDescriptionA, 
                    global::System.Nullable<decimal> Original_CostD, 
                    string Original_QBItemIDD, 
                    long CustomerJobID) {
            if ((Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Type == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Type));
            }
            if ((Repeat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(Repeat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Frequency.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Frequency.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((IntervalType == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(IntervalType));
            }
            if ((Cost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Cost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((CostContractor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(CostContractor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((CostFourStep.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(CostFourStep.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Instructions == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Instructions));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(PropertyID));
            if ((Status == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Status));
            }
            if ((ManHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((float)(ManHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Complaints == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Complaints));
            }
            if ((Compliments == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Compliments));
            }
            if ((CostB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(CostB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((CostC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(CostC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((CrewKey == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(CrewKey));
            }
            if ((SelectPrint.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((bool)(SelectPrint.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((MaterialCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(MaterialCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Revenue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Revenue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((QBInvoiceID == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(QBInvoiceID));
            }
            if ((QBItemID == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(QBItemID));
            }
            if ((QBItemIDB == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(QBItemIDB));
            }
            if ((QBItemIDC == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(QBItemIDC));
            }
            if ((FourStepJob.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((bool)(FourStepJob.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((FourStepMat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((float)(FourStepMat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((QBDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(QBDescription));
            }
            if ((FourStepJob1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((bool)(FourStepJob1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((FourStepJob2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((bool)(FourStepJob2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((FourStepJob3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((bool)(FourStepJob3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((FourStepJob4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((bool)(FourStepJob4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((QBDescriptionA == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(QBDescriptionA));
            }
            if ((CostD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(CostD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((QBItemIDD == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(QBItemIDD));
            }
            this.Adapter.UpdateCommand.Parameters[34].Value = ((long)(Original_CustomerJobID));
            if ((Original_Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((System.DateTime)(Original_Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_Type == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_Type));
            }
            if ((Original_Repeat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((bool)(Original_Repeat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_Frequency.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(Original_Frequency.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_IntervalType == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_IntervalType));
            }
            if ((Original_Cost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((decimal)(Original_Cost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_CostContractor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((decimal)(Original_CostContractor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_CostFourStep.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((decimal)(Original_CostFourStep.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_Instructions == null)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((string)(Original_Instructions));
            }
            this.Adapter.UpdateCommand.Parameters[53].Value = ((int)(Original_PropertyID));
            if ((Original_Status == null)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_Status));
            }
            if ((Original_ManHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((float)(Original_ManHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((Original_Complaints == null)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((string)(Original_Complaints));
            }
            if ((Original_Compliments == null)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Original_Compliments));
            }
            if ((Original_CostB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((decimal)(Original_CostB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((Original_CostC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((decimal)(Original_CostC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((Original_CrewKey == null)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((string)(Original_CrewKey));
            }
            if ((Original_SelectPrint.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((bool)(Original_SelectPrint.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((Original_MaterialCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((decimal)(Original_MaterialCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            if ((Original_Revenue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((decimal)(Original_Revenue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            if ((Original_QBInvoiceID == null)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((string)(Original_QBInvoiceID));
            }
            if ((Original_QBItemID == null)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((string)(Original_QBItemID));
            }
            if ((Original_QBItemIDB == null)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((string)(Original_QBItemIDB));
            }
            if ((Original_QBItemIDC == null)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((string)(Original_QBItemIDC));
            }
            if ((Original_FourStepJob.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((bool)(Original_FourStepJob.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((Original_FourStepMat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((float)(Original_FourStepMat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((Original_QBDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[87].Value = ((string)(Original_QBDescription));
            }
            if ((Original_FourStepJob1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((bool)(Original_FourStepJob1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            if ((Original_FourStepJob2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[91].Value = ((bool)(Original_FourStepJob2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            if ((Original_FourStepJob3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[93].Value = ((bool)(Original_FourStepJob3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            if ((Original_FourStepJob4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[95].Value = ((bool)(Original_FourStepJob4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            if ((Original_QBDescriptionA == null)) {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[97].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[97].Value = ((string)(Original_QBDescriptionA));
            }
            if ((Original_CostD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[99].Value = ((decimal)(Original_CostD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[99].Value = global::System.DBNull.Value;
            }
            if ((Original_QBItemIDD == null)) {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[101].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[101].Value = ((string)(Original_QBItemIDD));
            }
            this.Adapter.UpdateCommand.Parameters[102].Value = ((long)(CustomerJobID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<global::System.DateTime> Date, 
                    string Type, 
                    global::System.Nullable<bool> Repeat, 
                    global::System.Nullable<int> Frequency, 
                    string IntervalType, 
                    global::System.Nullable<decimal> Cost, 
                    global::System.Nullable<decimal> CostContractor, 
                    global::System.Nullable<decimal> CostFourStep, 
                    string Instructions, 
                    int PropertyID, 
                    string Status, 
                    global::System.Nullable<float> ManHours, 
                    string Complaints, 
                    string Compliments, 
                    global::System.Nullable<decimal> CostB, 
                    global::System.Nullable<decimal> CostC, 
                    string CrewKey, 
                    global::System.Nullable<bool> SelectPrint, 
                    global::System.Nullable<decimal> MaterialCost, 
                    global::System.Nullable<decimal> Revenue, 
                    string QBInvoiceID, 
                    string QBItemID, 
                    string QBItemIDB, 
                    string QBItemIDC, 
                    global::System.Nullable<bool> FourStepJob, 
                    global::System.Nullable<float> FourStepMat, 
                    string QBDescription, 
                    global::System.Nullable<bool> FourStepJob1, 
                    global::System.Nullable<bool> FourStepJob2, 
                    global::System.Nullable<bool> FourStepJob3, 
                    global::System.Nullable<bool> FourStepJob4, 
                    string QBDescriptionA, 
                    global::System.Nullable<decimal> CostD, 
                    string QBItemIDD, 
                    long Original_CustomerJobID, 
                    global::System.Nullable<global::System.DateTime> Original_Date, 
                    string Original_Type, 
                    global::System.Nullable<bool> Original_Repeat, 
                    global::System.Nullable<int> Original_Frequency, 
                    string Original_IntervalType, 
                    global::System.Nullable<decimal> Original_Cost, 
                    global::System.Nullable<decimal> Original_CostContractor, 
                    global::System.Nullable<decimal> Original_CostFourStep, 
                    string Original_Instructions, 
                    int Original_PropertyID, 
                    string Original_Status, 
                    global::System.Nullable<float> Original_ManHours, 
                    string Original_Complaints, 
                    string Original_Compliments, 
                    global::System.Nullable<decimal> Original_CostB, 
                    global::System.Nullable<decimal> Original_CostC, 
                    string Original_CrewKey, 
                    global::System.Nullable<bool> Original_SelectPrint, 
                    global::System.Nullable<decimal> Original_MaterialCost, 
                    global::System.Nullable<decimal> Original_Revenue, 
                    string Original_QBInvoiceID, 
                    string Original_QBItemID, 
                    string Original_QBItemIDB, 
                    string Original_QBItemIDC, 
                    global::System.Nullable<bool> Original_FourStepJob, 
                    global::System.Nullable<float> Original_FourStepMat, 
                    string Original_QBDescription, 
                    global::System.Nullable<bool> Original_FourStepJob1, 
                    global::System.Nullable<bool> Original_FourStepJob2, 
                    global::System.Nullable<bool> Original_FourStepJob3, 
                    global::System.Nullable<bool> Original_FourStepJob4, 
                    string Original_QBDescriptionA, 
                    global::System.Nullable<decimal> Original_CostD, 
                    string Original_QBItemIDD) {
            return this.Update(Date, Type, Repeat, Frequency, IntervalType, Cost, CostContractor, CostFourStep, Instructions, PropertyID, Status, ManHours, Complaints, Compliments, CostB, CostC, CrewKey, SelectPrint, MaterialCost, Revenue, QBInvoiceID, QBItemID, QBItemIDB, QBItemIDC, FourStepJob, FourStepMat, QBDescription, FourStepJob1, FourStepJob2, FourStepJob3, FourStepJob4, QBDescriptionA, CostD, QBItemIDD, Original_CustomerJobID, Original_Date, Original_Type, Original_Repeat, Original_Frequency, Original_IntervalType, Original_Cost, Original_CostContractor, Original_CostFourStep, Original_Instructions, Original_PropertyID, Original_Status, Original_ManHours, Original_Complaints, Original_Compliments, Original_CostB, Original_CostC, Original_CrewKey, Original_SelectPrint, Original_MaterialCost, Original_Revenue, Original_QBInvoiceID, Original_QBItemID, Original_QBItemIDB, Original_QBItemIDC, Original_FourStepJob, Original_FourStepMat, Original_QBDescription, Original_FourStepJob1, Original_FourStepJob2, Original_FourStepJob3, Original_FourStepJob4, Original_QBDescriptionA, Original_CostD, Original_QBItemIDD, Original_CustomerJobID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(
                    global::System.Nullable<global::System.DateTime> Date, 
                    string Type, 
                    global::System.Nullable<decimal> Cost, 
                    global::System.Nullable<decimal> CostContractor, 
                    global::System.Nullable<decimal> CostFourStep, 
                    string Instructions, 
                    int PropertyID, 
                    string Status, 
                    global::System.Nullable<decimal> CostB, 
                    global::System.Nullable<decimal> CostC, 
                    global::System.Nullable<decimal> CostD, 
                    global::System.Nullable<decimal> Revenue, 
                    global::System.Nullable<bool> FourStepJob, 
                    global::System.Nullable<decimal> MaterialCost, 
                    global::System.Nullable<float> FourStepMat, 
                    string Notes, 
                    global::System.Nullable<bool> FourStepJob1, 
                    global::System.Nullable<bool> FourStepJob2, 
                    global::System.Nullable<bool> FourStepJob3, 
                    global::System.Nullable<bool> FourStepJob4) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((Date.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(Date.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Type == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(Type));
            }
            if ((Cost.HasValue == true)) {
                command.Parameters[2].Value = ((decimal)(Cost.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((CostContractor.HasValue == true)) {
                command.Parameters[3].Value = ((decimal)(CostContractor.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((CostFourStep.HasValue == true)) {
                command.Parameters[4].Value = ((decimal)(CostFourStep.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Instructions == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(Instructions));
            }
            command.Parameters[6].Value = ((int)(PropertyID));
            if ((Status == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(Status));
            }
            if ((CostB.HasValue == true)) {
                command.Parameters[8].Value = ((decimal)(CostB.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((CostC.HasValue == true)) {
                command.Parameters[9].Value = ((decimal)(CostC.Value));
            }
            else {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((CostD.HasValue == true)) {
                command.Parameters[10].Value = ((decimal)(CostD.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Revenue.HasValue == true)) {
                command.Parameters[11].Value = ((decimal)(Revenue.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((FourStepJob.HasValue == true)) {
                command.Parameters[12].Value = ((bool)(FourStepJob.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((MaterialCost.HasValue == true)) {
                command.Parameters[13].Value = ((decimal)(MaterialCost.Value));
            }
            else {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((FourStepMat.HasValue == true)) {
                command.Parameters[14].Value = ((float)(FourStepMat.Value));
            }
            else {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Notes == null)) {
                command.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[15].Value = ((string)(Notes));
            }
            if ((FourStepJob1.HasValue == true)) {
                command.Parameters[16].Value = ((bool)(FourStepJob1.Value));
            }
            else {
                command.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((FourStepJob2.HasValue == true)) {
                command.Parameters[17].Value = ((bool)(FourStepJob2.Value));
            }
            else {
                command.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((FourStepJob3.HasValue == true)) {
                command.Parameters[18].Value = ((bool)(FourStepJob3.Value));
            }
            else {
                command.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((FourStepJob4.HasValue == true)) {
                command.Parameters[19].Value = ((bool)(FourStepJob4.Value));
            }
            else {
                command.Parameters[19].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateCrewKey(string CrewKey, long CustomerJobID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((CrewKey == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(CrewKey));
            }
            command.Parameters[1].Value = ((long)(CustomerJobID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateFourStepJob1(global::System.Nullable<bool> Step, long custjobID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[6];
            if ((Step.HasValue == true)) {
                command.Parameters[0].Value = ((bool)(Step.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            command.Parameters[1].Value = ((long)(custjobID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateFourStepJob2(global::System.Nullable<bool> Step, long custjobID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[7];
            if ((Step.HasValue == true)) {
                command.Parameters[0].Value = ((bool)(Step.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            command.Parameters[1].Value = ((long)(custjobID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateFourStepJob3(global::System.Nullable<bool> Step, long custjobID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[8];
            if ((Step.HasValue == true)) {
                command.Parameters[0].Value = ((bool)(Step.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            command.Parameters[1].Value = ((long)(custjobID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateFourStepJob4(global::System.Nullable<bool> Step, long custjobID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[9];
            if ((Step.HasValue == true)) {
                command.Parameters[0].Value = ((bool)(Step.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            command.Parameters[1].Value = ((long)(custjobID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateJobDate(global::System.Nullable<global::System.DateTime> date, long customerjobid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[10];
            if ((date.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(date.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            command.Parameters[1].Value = ((long)(customerjobid));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateJobQuery(global::System.Nullable<global::System.DateTime> date, string type, global::System.Nullable<decimal> cost, global::System.Nullable<decimal> costcontractor, global::System.Nullable<decimal> costfourstep, string instruction, string status, global::System.Nullable<float> manhours, string compliments, string complaints, global::System.Nullable<decimal> costb, global::System.Nullable<decimal> costc, global::System.Nullable<decimal> materialcost, global::System.Nullable<decimal> revenue, long customerjobid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[11];
            if ((date.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(date.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((type == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(type));
            }
            if ((cost.HasValue == true)) {
                command.Parameters[2].Value = ((decimal)(cost.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((costcontractor.HasValue == true)) {
                command.Parameters[3].Value = ((decimal)(costcontractor.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((costfourstep.HasValue == true)) {
                command.Parameters[4].Value = ((decimal)(costfourstep.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((instruction == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(instruction));
            }
            if ((status == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(status));
            }
            if ((manhours.HasValue == true)) {
                command.Parameters[7].Value = ((float)(manhours.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((compliments == null)) {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(compliments));
            }
            if ((complaints == null)) {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(complaints));
            }
            if ((costb.HasValue == true)) {
                command.Parameters[10].Value = ((decimal)(costb.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((costc.HasValue == true)) {
                command.Parameters[11].Value = ((decimal)(costc.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((materialcost.HasValue == true)) {
                command.Parameters[12].Value = ((decimal)(materialcost.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((revenue.HasValue == true)) {
                command.Parameters[13].Value = ((decimal)(revenue.Value));
            }
            else {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            command.Parameters[14].Value = ((long)(customerjobid));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateQBData(global::System.Nullable<decimal> cost, global::System.Nullable<decimal> costb, global::System.Nullable<decimal> costc, string qbinvoiceid, string qbitemid, string qbitemidb, string qbitemidc, long jobid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[12];
            if ((cost.HasValue == true)) {
                command.Parameters[0].Value = ((decimal)(cost.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((costb.HasValue == true)) {
                command.Parameters[1].Value = ((decimal)(costb.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((costc.HasValue == true)) {
                command.Parameters[2].Value = ((decimal)(costc.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((qbinvoiceid == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(qbinvoiceid));
            }
            if ((qbitemid == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(qbitemid));
            }
            if ((qbitemidb == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(qbitemidb));
            }
            if ((qbitemidc == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(qbitemidc));
            }
            command.Parameters[7].Value = ((long)(jobid));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateQBDescriptionA(string QBDesc, long Original_CustomerJobID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[13];
            if ((QBDesc == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(QBDesc));
            }
            command.Parameters[1].Value = ((long)(Original_CustomerJobID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateQBItemCode(string QBDesc, long Original_CustomerJobID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[14];
            if ((QBDesc == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(QBDesc));
            }
            command.Parameters[1].Value = ((long)(Original_CustomerJobID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ServiceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ServiceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Service";
            tableMapping.ColumnMappings.Add("ServiceID", "ServiceID");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("SummerServices", "SummerServices");
            tableMapping.ColumnMappings.Add("FallServices", "FallServices");
            tableMapping.ColumnMappings.Add("WinterServices", "WinterServices");
            tableMapping.ColumnMappings.Add("PropMow", "PropMow");
            tableMapping.ColumnMappings.Add("PropFourStep", "PropFourStep");
            tableMapping.ColumnMappings.Add("PropSeed", "PropSeed");
            tableMapping.ColumnMappings.Add("PropFertilize", "PropFertilize");
            tableMapping.ColumnMappings.Add("PropLime", "PropLime");
            tableMapping.ColumnMappings.Add("PropAeration", "PropAeration");
            tableMapping.ColumnMappings.Add("PropertyID", "PropertyID");
            tableMapping.ColumnMappings.Add("FourStepDate1", "FourStepDate1");
            tableMapping.ColumnMappings.Add("FourStepDate2", "FourStepDate2");
            tableMapping.ColumnMappings.Add("FourStepDate3", "FourStepDate3");
            tableMapping.ColumnMappings.Add("FourStepDate4", "FourStepDate4");
            tableMapping.ColumnMappings.Add("Cost", "Cost");
            tableMapping.ColumnMappings.Add("FourStepCost", "FourStepCost");
            tableMapping.ColumnMappings.Add("ContractorCost", "ContractorCost");
            tableMapping.ColumnMappings.Add("LeafInstruct", "LeafInstruct");
            tableMapping.ColumnMappings.Add("SpecInstruct", "SpecInstruct");
            tableMapping.ColumnMappings.Add("FourStepInstruct", "FourStepInstruct");
            tableMapping.ColumnMappings.Add("GutterInstruct", "GutterInstruct");
            tableMapping.ColumnMappings.Add("SpringServices", "SpringServices");
            tableMapping.ColumnMappings.Add("MowType", "MowType");
            tableMapping.ColumnMappings.Add("FourStepType", "FourStepType");
            tableMapping.ColumnMappings.Add("LeafType", "LeafType");
            tableMapping.ColumnMappings.Add("GutterType", "GutterType");
            tableMapping.ColumnMappings.Add("OtherType", "OtherType");
            tableMapping.ColumnMappings.Add("Frequency", "Frequency");
            tableMapping.ColumnMappings.Add("FourStepMat", "FourStepMat1");
            tableMapping.ColumnMappings.Add("CostB", "CostB");
            tableMapping.ColumnMappings.Add("CostC", "CostC");
            tableMapping.ColumnMappings.Add("MaterialCost", "MaterialCost");
            tableMapping.ColumnMappings.Add("ApplicationType", "ApplicationType");
            tableMapping.ColumnMappings.Add("PruningType", "PruningType");
            tableMapping.ColumnMappings.Add("CostApp", "CostApp");
            tableMapping.ColumnMappings.Add("CostPruning", "CostPruning");
            tableMapping.ColumnMappings.Add("CostMulching", "CostMulching");
            tableMapping.ColumnMappings.Add("CostOther", "CostOther");
            tableMapping.ColumnMappings.Add("CCostB", "CCostB");
            tableMapping.ColumnMappings.Add("CCostC", "CCostC");
            tableMapping.ColumnMappings.Add("CCostApp", "CCostApp");
            tableMapping.ColumnMappings.Add("CCostPruning", "CCostPruning");
            tableMapping.ColumnMappings.Add("CCostMulching", "CCostMulching");
            tableMapping.ColumnMappings.Add("CCostOther", "CCostOther");
            tableMapping.ColumnMappings.Add("AppInstruct", "AppInstruct");
            tableMapping.ColumnMappings.Add("PruneInstruct", "PruneInstruct");
            tableMapping.ColumnMappings.Add("MulchInstruct", "MulchInstruct");
            tableMapping.ColumnMappings.Add("OtherInstruct", "OtherInstruct");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("MulchingType", "MulchingType");
            tableMapping.ColumnMappings.Add("FourStepType1", "FourStepType1");
            tableMapping.ColumnMappings.Add("FourStepType2", "FourStepType2");
            tableMapping.ColumnMappings.Add("FourStepType3", "FourStepType3");
            tableMapping.ColumnMappings.Add("FourStepType4", "FourStepType4");
            tableMapping.ColumnMappings.Add("YCost", "YCost");
            tableMapping.ColumnMappings.Add("YCostB", "YCostB");
            tableMapping.ColumnMappings.Add("YCostC", "YCostC");
            tableMapping.ColumnMappings.Add("YCostApp", "YCostApp");
            tableMapping.ColumnMappings.Add("YCostPruning", "YCostPruning");
            tableMapping.ColumnMappings.Add("YCostMulching", "YCostMulching");
            tableMapping.ColumnMappings.Add("YCostOther", "YCostOther");
            tableMapping.ColumnMappings.Add("YCost4Step", "YCost4Step");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Service] WHERE (([ServiceID] = @Original_ServiceID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Service] ([PropertyID], [Date], [MowType], [FourStepType], [LeafType" +
                "], [GutterType], [OtherType], [Frequency], [SpringServices], [SummerServices], [" +
                "FallServices], [WinterServices], [FourStepMat], [FourStepDate1], [FourStepDate2]" +
                ", [FourStepDate3], [FourStepDate4], [PropMow], [PropFourStep], [PropSeed], [Prop" +
                "Fertilize], [PropLime], [PropAeration], [Cost], [FourStepCost], [ContractorCost]" +
                ", [LeafInstruct], [SpecInstruct], [FourStepInstruct], [GutterInstruct], [CostB]," +
                " [CostC], [MaterialCost], [ApplicationType], [PruningType], [MulchingType], [Cos" +
                "tApp], [CostPruning], [CostOther], [CCostB], [CCostC], [CCostApp], [CCostPruning" +
                "], [CCostMulching], [CCostOther], [AppInstruct], [PruneInstruct], [MulchInstruct" +
                "], [OtherInstruct], [CostMulching], [Notes], [FourStepType1], [FourStepType2], [" +
                "FourStepType3], [FourStepType4], [YCost], [YCostB], [YCostC], [YCostApp], [YCost" +
                "Pruning], [YCostMulching], [YCostOther], [YCost4Step]) VALUES (@PropertyID, @Dat" +
                "e, @MowType, @FourStepType, @LeafType, @GutterType, @OtherType, @Frequency, @Spr" +
                "ingServices, @SummerServices, @FallServices, @WinterServices, @FourStepMat, @Fou" +
                "rStepDate1, @FourStepDate2, @FourStepDate3, @FourStepDate4, @PropMow, @PropFourS" +
                "tep, @PropSeed, @PropFertilize, @PropLime, @PropAeration, @Cost, @FourStepCost, " +
                "@ContractorCost, @LeafInstruct, @SpecInstruct, @FourStepInstruct, @GutterInstruc" +
                "t, @CostB, @CostC, @MaterialCost, @ApplicationType, @PruningType, @MulchingType," +
                " @CostApp, @CostPruning, @CostOther, @CCostB, @CCostC, @CCostApp, @CCostPruning," +
                " @CCostMulching, @CCostOther, @AppInstruct, @PruneInstruct, @MulchInstruct, @Oth" +
                "erInstruct, @CostMulching, @Notes, @FourStepType1, @FourStepType2, @FourStepType" +
                "3, @FourStepType4, @YCost, @YCostB, @YCostC, @YCostApp, @YCostPruning, @YCostMul" +
                "ching, @YCostOther, @YCost4Step);\r\nSELECT ServiceID, PropertyID, Date, MowType, " +
                "FourStepType, LeafType, GutterType, OtherType, Frequency, SpringServices, Summer" +
                "Services, FallServices, WinterServices, FourStepMat, FourStepDate1, FourStepDate" +
                "2, FourStepDate3, FourStepDate4, PropMow, PropFourStep, PropSeed, PropFertilize," +
                " PropLime, PropAeration, Cost, FourStepCost, ContractorCost, LeafInstruct, SpecI" +
                "nstruct, FourStepInstruct, GutterInstruct, CostB, CostC, MaterialCost, Applicati" +
                "onType, PruningType, MulchingType, CostApp, CostPruning, CostOther, CCostB, CCos" +
                "tC, CCostApp, CCostPruning, CCostMulching, CCostOther, AppInstruct, PruneInstruc" +
                "t, MulchInstruct, OtherInstruct, CostMulching, Notes, FourStepType1, FourStepTyp" +
                "e2, FourStepType3, FourStepType4, YCost, YCostB, YCostC, YCostApp, YCostPruning," +
                " YCostMulching, YCostOther, YCost4Step FROM Service WHERE (ServiceID = SCOPE_IDE" +
                "NTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MowType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MowType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeafType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LeafType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GutterType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GutterType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Frequency", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SpringServices", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SpringServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SummerServices", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SummerServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FallServices", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FallServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WinterServices", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WinterServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepMat", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate3", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate4", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropMow", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropMow", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropFourStep", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropFourStep", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropSeed", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropSeed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropFertilize", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropFertilize", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropLime", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropLime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropAeration", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropAeration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepCost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractorCost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractorCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeafInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LeafInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SpecInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SpecInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GutterInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GutterInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostB", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostC", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaterialCost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApplicationType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApplicationType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PruningType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PruningType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MulchingType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MulchingType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostApp", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostApp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostPruning", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostPruning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostOther", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostOther", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostB", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CCostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostC", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CCostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostApp", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CCostApp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostPruning", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CCostPruning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostMulching", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CCostMulching", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostOther", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CCostOther", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PruneInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PruneInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MulchInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MulchInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostMulching", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostMulching", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType1", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType2", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType3", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType4", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostApp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCostApp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostPruning", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCostPruning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostMulching", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCostMulching", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostOther", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCostOther", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCost4Step", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCost4Step", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Service] SET [PropertyID] = @PropertyID, [Date] = @Date, [MowType] = @Mow" +
                "Type, [FourStepType] = @FourStepType, [LeafType] = @LeafType, [GutterType] = @Gu" +
                "tterType, [OtherType] = @OtherType, [Frequency] = @Frequency, [SpringServices] =" +
                " @SpringServices, [SummerServices] = @SummerServices, [FallServices] = @FallServ" +
                "ices, [WinterServices] = @WinterServices, [FourStepMat] = @FourStepMat, [FourSte" +
                "pDate1] = @FourStepDate1, [FourStepDate2] = @FourStepDate2, [FourStepDate3] = @F" +
                "ourStepDate3, [FourStepDate4] = @FourStepDate4, [PropMow] = @PropMow, [PropFourS" +
                "tep] = @PropFourStep, [PropSeed] = @PropSeed, [PropFertilize] = @PropFertilize, " +
                "[PropLime] = @PropLime, [PropAeration] = @PropAeration, [Cost] = @Cost, [FourSte" +
                "pCost] = @FourStepCost, [ContractorCost] = @ContractorCost, [LeafInstruct] = @Le" +
                "afInstruct, [SpecInstruct] = @SpecInstruct, [FourStepInstruct] = @FourStepInstru" +
                "ct, [GutterInstruct] = @GutterInstruct, [CostB] = @CostB, [CostC] = @CostC, [Mat" +
                "erialCost] = @MaterialCost, [ApplicationType] = @ApplicationType, [PruningType] " +
                "= @PruningType, [MulchingType] = @MulchingType, [CostApp] = @CostApp, [CostPruni" +
                "ng] = @CostPruning, [CostOther] = @CostOther, [CCostB] = @CCostB, [CCostC] = @CC" +
                "ostC, [CCostApp] = @CCostApp, [CCostPruning] = @CCostPruning, [CCostMulching] = " +
                "@CCostMulching, [CCostOther] = @CCostOther, [AppInstruct] = @AppInstruct, [Prune" +
                "Instruct] = @PruneInstruct, [MulchInstruct] = @MulchInstruct, [OtherInstruct] = " +
                "@OtherInstruct, [CostMulching] = @CostMulching, [Notes] = @Notes, [FourStepType1" +
                "] = @FourStepType1, [FourStepType2] = @FourStepType2, [FourStepType3] = @FourSte" +
                "pType3, [FourStepType4] = @FourStepType4, [YCost] = @YCost, [YCostB] = @YCostB, " +
                "[YCostC] = @YCostC, [YCostApp] = @YCostApp, [YCostPruning] = @YCostPruning, [YCo" +
                "stMulching] = @YCostMulching, [YCostOther] = @YCostOther, [YCost4Step] = @YCost4" +
                "Step WHERE (([ServiceID] = @Original_ServiceID));\r\nSELECT ServiceID, PropertyID," +
                " Date, MowType, FourStepType, LeafType, GutterType, OtherType, Frequency, Spring" +
                "Services, SummerServices, FallServices, WinterServices, FourStepMat, FourStepDat" +
                "e1, FourStepDate2, FourStepDate3, FourStepDate4, PropMow, PropFourStep, PropSeed" +
                ", PropFertilize, PropLime, PropAeration, Cost, FourStepCost, ContractorCost, Lea" +
                "fInstruct, SpecInstruct, FourStepInstruct, GutterInstruct, CostB, CostC, Materia" +
                "lCost, ApplicationType, PruningType, MulchingType, CostApp, CostPruning, CostOth" +
                "er, CCostB, CCostC, CCostApp, CCostPruning, CCostMulching, CCostOther, AppInstru" +
                "ct, PruneInstruct, MulchInstruct, OtherInstruct, CostMulching, Notes, FourStepTy" +
                "pe1, FourStepType2, FourStepType3, FourStepType4, YCost, YCostB, YCostC, YCostAp" +
                "p, YCostPruning, YCostMulching, YCostOther, YCost4Step FROM Service WHERE (Servi" +
                "ceID = @ServiceID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MowType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MowType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeafType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LeafType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GutterType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GutterType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Frequency", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SpringServices", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SpringServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SummerServices", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SummerServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FallServices", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FallServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WinterServices", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WinterServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepMat", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate3", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate4", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropMow", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropMow", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropFourStep", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropFourStep", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropSeed", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropSeed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropFertilize", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropFertilize", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropLime", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropLime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropAeration", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PropAeration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepCost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractorCost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractorCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeafInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LeafInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SpecInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SpecInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GutterInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GutterInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostB", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostC", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaterialCost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApplicationType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApplicationType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PruningType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PruningType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MulchingType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MulchingType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostApp", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostApp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostPruning", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostPruning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostOther", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostOther", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostB", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CCostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostC", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CCostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostApp", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CCostApp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostPruning", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CCostPruning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostMulching", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CCostMulching", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostOther", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CCostOther", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PruneInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PruneInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MulchInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MulchInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherInstruct", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostMulching", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostMulching", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType1", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType2", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType3", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType4", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostApp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCostApp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostPruning", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCostPruning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostMulching", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCostMulching", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostOther", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCostOther", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCost4Step", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YCost4Step", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[14];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ServiceID, PropertyID, Date, MowType, FourStepType, LeafType, GutterType, OtherType, Frequency, SpringServices, SummerServices, FallServices, WinterServices, FourStepMat, FourStepDate1, FourStepDate2, 
                  FourStepDate3, FourStepDate4, PropMow, PropFourStep, PropSeed, PropFertilize, PropLime, PropAeration, Cost, FourStepCost, ContractorCost, LeafInstruct, SpecInstruct, FourStepInstruct, GutterInstruct, CostB, 
                  CostC, MaterialCost, ApplicationType, PruningType, MulchingType, CostApp, CostPruning, CostOther, CCostB, CCostC, CCostApp, CCostPruning, CCostMulching, CCostOther, AppInstruct, PruneInstruct, MulchInstruct, 
                  OtherInstruct, CostMulching, Notes, FourStepType1, FourStepType2, FourStepType3, FourStepType4, YCost, YCostB, YCostC, YCostApp, YCostPruning, YCostMulching, YCostOther, YCost4Step
FROM     Service";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE [MMSDB].[dbo].[Service]\r\n   SET [MowType] = 0\r\n      ,[LeafType] = 0\r\n    " +
                "  ,[GutterType] = 0\r\n      ,[OtherType] = 0\r\n      ,[ApplicationType] = 0\r\n     " +
                " ,[PruningType] = 0\r\n      ,[MulchingType] = 0";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[2].CommandText = "SELECT     COUNT(*) AS Expr1\r\nFROM         Service\r\nWHERE     (MowType = 1)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT COUNT(PropertyID) AS Expr1\r\nFROM    Service\r\nWHERE (PropertyID = @property" +
                "id)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@propertyid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[4].CommandText = @"INSERT INTO Service
                         (PropertyID, Date, PropSeed)
VALUES        (@propid,@date, 0);        
SELECT ServiceID, Date, SummerServices, FallServices, WinterServices, PropMow, PropFourStep, PropSeed, PropFertilize, PropLime, PropAeration, PropertyID, ContractorCost, Cost, FourStepCost, FourStepDate1, FourStepDate2, FourStepDate3, FourStepDate4, FourStepInstruct, FourStepMat, GutterInstruct, LeafInstruct, SpecInstruct, SpringServices, FourStepType, GutterType, LeafType, MowType, OtherType, Frequency FROM Service WHERE (ServiceID = SCOPE_IDENTITY())";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@propid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@date", global::System.Data.SqlDbType.Date, 3, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = @"UPDATE    Service
SET              FourStepType1 = 0, FourStepType2 = 0, FourStepType3 = 0, FourStepType4 = 0, 
FourStepDate1 = CAST(YEAR(GETDATE()) AS VARCHAR(4))  + '/01' + '/01',
FourStepDate2 = CAST(YEAR(GETDATE()) AS VARCHAR(4))  + '/01' + '/01',
FourStepDate3 = CAST(YEAR(GETDATE()) AS VARCHAR(4))  + '/01' + '/01',
FourStepDate4 = CAST(YEAR(GETDATE()) AS VARCHAR(4))  + '/01' + '/01'";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "UPDATE       Service\r\nSET                FourStepDate1 = @StepDate\r\nWHERE        " +
                "(ServiceID = @serviceID)";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StepDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@serviceID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "UPDATE       Service\r\nSET                FourStepDate1 = @StepDate\r\nWHERE        " +
                "(PropertyID = @propertyID)";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StepDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@propertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[8] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "UPDATE       Service\r\nSET                FourStepDate2 = @StepDate\r\nWHERE        " +
                "(ServiceID = @serviceID)";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StepDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@serviceID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[9] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "UPDATE       Service\r\nSET                FourStepDate2 = @StepDate\r\nWHERE        " +
                "(PropertyID = @propertyID)";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StepDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@propertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[10] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "UPDATE       Service\r\nSET                FourStepDate3 = @StepDate\r\nWHERE        " +
                "(ServiceID = @serviceID)";
            this._commandCollection[10].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StepDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@serviceID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[11] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[11].Connection = this.Connection;
            this._commandCollection[11].CommandText = "UPDATE       Service\r\nSET                FourStepDate3 = @StepDate\r\nWHERE        " +
                "(PropertyID = @propertyID)";
            this._commandCollection[11].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StepDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@propertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[12] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[12].Connection = this.Connection;
            this._commandCollection[12].CommandText = "UPDATE       Service\r\nSET                FourStepDate4 = @StepDate\r\nWHERE        " +
                "(ServiceID = @serviceID)";
            this._commandCollection[12].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StepDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@serviceID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[13] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[13].Connection = this.Connection;
            this._commandCollection[13].CommandText = "UPDATE       Service\r\nSET                FourStepDate4 = @StepDate\r\nWHERE        " +
                "(PropertyID = @propertyID)";
            this._commandCollection[13].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StepDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@propertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.ServiceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.ServiceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.ServiceDataTable dataTable = new MMSDataSet.ServiceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.ServiceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Service");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ServiceID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ServiceID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> PropertyID, 
                    global::System.Nullable<global::System.DateTime> Date, 
                    global::System.Nullable<bool> MowType, 
                    global::System.Nullable<bool> FourStepType, 
                    global::System.Nullable<bool> LeafType, 
                    global::System.Nullable<bool> GutterType, 
                    global::System.Nullable<bool> OtherType, 
                    string Frequency, 
                    string SpringServices, 
                    string SummerServices, 
                    string FallServices, 
                    string WinterServices, 
                    global::System.Nullable<float> FourStepMat, 
                    global::System.Nullable<global::System.DateTime> FourStepDate1, 
                    global::System.Nullable<global::System.DateTime> FourStepDate2, 
                    global::System.Nullable<global::System.DateTime> FourStepDate3, 
                    global::System.Nullable<global::System.DateTime> FourStepDate4, 
                    global::System.Nullable<decimal> PropMow, 
                    global::System.Nullable<decimal> PropFourStep, 
                    global::System.Nullable<decimal> PropSeed, 
                    global::System.Nullable<decimal> PropFertilize, 
                    global::System.Nullable<decimal> PropLime, 
                    global::System.Nullable<decimal> PropAeration, 
                    global::System.Nullable<decimal> Cost, 
                    global::System.Nullable<decimal> FourStepCost, 
                    global::System.Nullable<decimal> ContractorCost, 
                    string LeafInstruct, 
                    string SpecInstruct, 
                    string FourStepInstruct, 
                    string GutterInstruct, 
                    global::System.Nullable<decimal> CostB, 
                    global::System.Nullable<decimal> CostC, 
                    global::System.Nullable<decimal> MaterialCost, 
                    global::System.Nullable<bool> ApplicationType, 
                    global::System.Nullable<bool> PruningType, 
                    global::System.Nullable<bool> MulchingType, 
                    global::System.Nullable<decimal> CostApp, 
                    global::System.Nullable<decimal> CostPruning, 
                    global::System.Nullable<decimal> CostOther, 
                    global::System.Nullable<decimal> CCostB, 
                    global::System.Nullable<decimal> CCostC, 
                    global::System.Nullable<decimal> CCostApp, 
                    global::System.Nullable<decimal> CCostPruning, 
                    global::System.Nullable<decimal> CCostMulching, 
                    global::System.Nullable<decimal> CCostOther, 
                    string AppInstruct, 
                    string PruneInstruct, 
                    string MulchInstruct, 
                    string OtherInstruct, 
                    global::System.Nullable<decimal> CostMulching, 
                    string Notes, 
                    global::System.Nullable<bool> FourStepType1, 
                    global::System.Nullable<bool> FourStepType2, 
                    global::System.Nullable<bool> FourStepType3, 
                    global::System.Nullable<bool> FourStepType4, 
                    global::System.Nullable<int> YCost, 
                    global::System.Nullable<int> YCostB, 
                    global::System.Nullable<int> YCostC, 
                    global::System.Nullable<int> YCostApp, 
                    global::System.Nullable<int> YCostPruning, 
                    global::System.Nullable<int> YCostMulching, 
                    global::System.Nullable<int> YCostOther, 
                    global::System.Nullable<int> YCost4Step) {
            if ((PropertyID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(PropertyID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MowType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(MowType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((FourStepType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(FourStepType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((LeafType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(LeafType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((GutterType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(GutterType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((OtherType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(OtherType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Frequency == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Frequency));
            }
            if ((SpringServices == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(SpringServices));
            }
            if ((SummerServices == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(SummerServices));
            }
            if ((FallServices == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(FallServices));
            }
            if ((WinterServices == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(WinterServices));
            }
            if ((FourStepMat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((float)(FourStepMat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((FourStepDate1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(FourStepDate1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((FourStepDate2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(FourStepDate2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((FourStepDate3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(FourStepDate3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((FourStepDate4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((System.DateTime)(FourStepDate4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((PropMow.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(PropMow.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((PropFourStep.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((decimal)(PropFourStep.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((PropSeed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(PropSeed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((PropFertilize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((decimal)(PropFertilize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((PropLime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((decimal)(PropLime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((PropAeration.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(PropAeration.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Cost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((decimal)(Cost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((FourStepCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((decimal)(FourStepCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((ContractorCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((decimal)(ContractorCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((LeafInstruct == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(LeafInstruct));
            }
            if ((SpecInstruct == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(SpecInstruct));
            }
            if ((FourStepInstruct == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(FourStepInstruct));
            }
            if ((GutterInstruct == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(GutterInstruct));
            }
            if ((CostB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((decimal)(CostB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((CostC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((decimal)(CostC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((MaterialCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((decimal)(MaterialCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((ApplicationType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((bool)(ApplicationType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((PruningType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((bool)(PruningType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((MulchingType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((bool)(MulchingType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((CostApp.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((decimal)(CostApp.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((CostPruning.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[37].Value = ((decimal)(CostPruning.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((CostOther.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((decimal)(CostOther.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((CCostB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((decimal)(CCostB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((CCostC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((decimal)(CCostC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((CCostApp.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[41].Value = ((decimal)(CCostApp.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((CCostPruning.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[42].Value = ((decimal)(CCostPruning.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((CCostMulching.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[43].Value = ((decimal)(CCostMulching.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((CCostOther.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[44].Value = ((decimal)(CCostOther.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((AppInstruct == null)) {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = ((string)(AppInstruct));
            }
            if ((PruneInstruct == null)) {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = ((string)(PruneInstruct));
            }
            if ((MulchInstruct == null)) {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = ((string)(MulchInstruct));
            }
            if ((OtherInstruct == null)) {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = ((string)(OtherInstruct));
            }
            if ((CostMulching.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[49].Value = ((decimal)(CostMulching.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((Notes == null)) {
                this.Adapter.InsertCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[50].Value = ((string)(Notes));
            }
            if ((FourStepType1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[51].Value = ((bool)(FourStepType1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((FourStepType2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[52].Value = ((bool)(FourStepType2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((FourStepType3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[53].Value = ((bool)(FourStepType3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((FourStepType4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[54].Value = ((bool)(FourStepType4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((YCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[55].Value = ((int)(YCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((YCostB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[56].Value = ((int)(YCostB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((YCostC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[57].Value = ((int)(YCostC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((YCostApp.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[58].Value = ((int)(YCostApp.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((YCostPruning.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[59].Value = ((int)(YCostPruning.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((YCostMulching.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[60].Value = ((int)(YCostMulching.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((YCostOther.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[61].Value = ((int)(YCostOther.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((YCost4Step.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[62].Value = ((int)(YCost4Step.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> PropertyID, 
                    global::System.Nullable<global::System.DateTime> Date, 
                    global::System.Nullable<bool> MowType, 
                    global::System.Nullable<bool> FourStepType, 
                    global::System.Nullable<bool> LeafType, 
                    global::System.Nullable<bool> GutterType, 
                    global::System.Nullable<bool> OtherType, 
                    string Frequency, 
                    string SpringServices, 
                    string SummerServices, 
                    string FallServices, 
                    string WinterServices, 
                    global::System.Nullable<float> FourStepMat, 
                    global::System.Nullable<global::System.DateTime> FourStepDate1, 
                    global::System.Nullable<global::System.DateTime> FourStepDate2, 
                    global::System.Nullable<global::System.DateTime> FourStepDate3, 
                    global::System.Nullable<global::System.DateTime> FourStepDate4, 
                    global::System.Nullable<decimal> PropMow, 
                    global::System.Nullable<decimal> PropFourStep, 
                    global::System.Nullable<decimal> PropSeed, 
                    global::System.Nullable<decimal> PropFertilize, 
                    global::System.Nullable<decimal> PropLime, 
                    global::System.Nullable<decimal> PropAeration, 
                    global::System.Nullable<decimal> Cost, 
                    global::System.Nullable<decimal> FourStepCost, 
                    global::System.Nullable<decimal> ContractorCost, 
                    string LeafInstruct, 
                    string SpecInstruct, 
                    string FourStepInstruct, 
                    string GutterInstruct, 
                    global::System.Nullable<decimal> CostB, 
                    global::System.Nullable<decimal> CostC, 
                    global::System.Nullable<decimal> MaterialCost, 
                    global::System.Nullable<bool> ApplicationType, 
                    global::System.Nullable<bool> PruningType, 
                    global::System.Nullable<bool> MulchingType, 
                    global::System.Nullable<decimal> CostApp, 
                    global::System.Nullable<decimal> CostPruning, 
                    global::System.Nullable<decimal> CostOther, 
                    global::System.Nullable<decimal> CCostB, 
                    global::System.Nullable<decimal> CCostC, 
                    global::System.Nullable<decimal> CCostApp, 
                    global::System.Nullable<decimal> CCostPruning, 
                    global::System.Nullable<decimal> CCostMulching, 
                    global::System.Nullable<decimal> CCostOther, 
                    string AppInstruct, 
                    string PruneInstruct, 
                    string MulchInstruct, 
                    string OtherInstruct, 
                    global::System.Nullable<decimal> CostMulching, 
                    string Notes, 
                    global::System.Nullable<bool> FourStepType1, 
                    global::System.Nullable<bool> FourStepType2, 
                    global::System.Nullable<bool> FourStepType3, 
                    global::System.Nullable<bool> FourStepType4, 
                    global::System.Nullable<int> YCost, 
                    global::System.Nullable<int> YCostB, 
                    global::System.Nullable<int> YCostC, 
                    global::System.Nullable<int> YCostApp, 
                    global::System.Nullable<int> YCostPruning, 
                    global::System.Nullable<int> YCostMulching, 
                    global::System.Nullable<int> YCostOther, 
                    global::System.Nullable<int> YCost4Step, 
                    int Original_ServiceID, 
                    int ServiceID) {
            if ((PropertyID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(PropertyID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MowType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(MowType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((FourStepType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(FourStepType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((LeafType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(LeafType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((GutterType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(GutterType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((OtherType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(OtherType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Frequency == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Frequency));
            }
            if ((SpringServices == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(SpringServices));
            }
            if ((SummerServices == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(SummerServices));
            }
            if ((FallServices == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(FallServices));
            }
            if ((WinterServices == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(WinterServices));
            }
            if ((FourStepMat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((float)(FourStepMat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((FourStepDate1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(FourStepDate1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((FourStepDate2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(FourStepDate2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((FourStepDate3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(FourStepDate3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((FourStepDate4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(FourStepDate4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((PropMow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(PropMow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((PropFourStep.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(PropFourStep.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((PropSeed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(PropSeed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((PropFertilize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(PropFertilize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((PropLime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(PropLime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((PropAeration.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(PropAeration.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Cost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(Cost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((FourStepCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((decimal)(FourStepCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((ContractorCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((decimal)(ContractorCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((LeafInstruct == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(LeafInstruct));
            }
            if ((SpecInstruct == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(SpecInstruct));
            }
            if ((FourStepInstruct == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(FourStepInstruct));
            }
            if ((GutterInstruct == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(GutterInstruct));
            }
            if ((CostB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((decimal)(CostB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((CostC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((decimal)(CostC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((MaterialCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(MaterialCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((ApplicationType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((bool)(ApplicationType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((PruningType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((bool)(PruningType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((MulchingType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((bool)(MulchingType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((CostApp.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((decimal)(CostApp.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((CostPruning.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((decimal)(CostPruning.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((CostOther.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((decimal)(CostOther.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((CCostB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((decimal)(CCostB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((CCostC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((decimal)(CCostC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((CCostApp.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((decimal)(CCostApp.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((CCostPruning.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((decimal)(CCostPruning.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((CCostMulching.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((decimal)(CCostMulching.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((CCostOther.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((decimal)(CCostOther.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((AppInstruct == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(AppInstruct));
            }
            if ((PruneInstruct == null)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(PruneInstruct));
            }
            if ((MulchInstruct == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(MulchInstruct));
            }
            if ((OtherInstruct == null)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(OtherInstruct));
            }
            if ((CostMulching.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((decimal)(CostMulching.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((Notes == null)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((string)(Notes));
            }
            if ((FourStepType1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((bool)(FourStepType1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((FourStepType2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((bool)(FourStepType2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((FourStepType3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((bool)(FourStepType3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((FourStepType4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((bool)(FourStepType4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((YCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((int)(YCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((YCostB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((int)(YCostB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((YCostC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((int)(YCostC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((YCostApp.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((int)(YCostApp.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((YCostPruning.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((int)(YCostPruning.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((YCostMulching.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((int)(YCostMulching.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((YCostOther.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((int)(YCostOther.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((YCost4Step.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((int)(YCost4Step.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[63].Value = ((int)(Original_ServiceID));
            this.Adapter.UpdateCommand.Parameters[64].Value = ((int)(ServiceID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> PropertyID, 
                    global::System.Nullable<global::System.DateTime> Date, 
                    global::System.Nullable<bool> MowType, 
                    global::System.Nullable<bool> FourStepType, 
                    global::System.Nullable<bool> LeafType, 
                    global::System.Nullable<bool> GutterType, 
                    global::System.Nullable<bool> OtherType, 
                    string Frequency, 
                    string SpringServices, 
                    string SummerServices, 
                    string FallServices, 
                    string WinterServices, 
                    global::System.Nullable<float> FourStepMat, 
                    global::System.Nullable<global::System.DateTime> FourStepDate1, 
                    global::System.Nullable<global::System.DateTime> FourStepDate2, 
                    global::System.Nullable<global::System.DateTime> FourStepDate3, 
                    global::System.Nullable<global::System.DateTime> FourStepDate4, 
                    global::System.Nullable<decimal> PropMow, 
                    global::System.Nullable<decimal> PropFourStep, 
                    global::System.Nullable<decimal> PropSeed, 
                    global::System.Nullable<decimal> PropFertilize, 
                    global::System.Nullable<decimal> PropLime, 
                    global::System.Nullable<decimal> PropAeration, 
                    global::System.Nullable<decimal> Cost, 
                    global::System.Nullable<decimal> FourStepCost, 
                    global::System.Nullable<decimal> ContractorCost, 
                    string LeafInstruct, 
                    string SpecInstruct, 
                    string FourStepInstruct, 
                    string GutterInstruct, 
                    global::System.Nullable<decimal> CostB, 
                    global::System.Nullable<decimal> CostC, 
                    global::System.Nullable<decimal> MaterialCost, 
                    global::System.Nullable<bool> ApplicationType, 
                    global::System.Nullable<bool> PruningType, 
                    global::System.Nullable<bool> MulchingType, 
                    global::System.Nullable<decimal> CostApp, 
                    global::System.Nullable<decimal> CostPruning, 
                    global::System.Nullable<decimal> CostOther, 
                    global::System.Nullable<decimal> CCostB, 
                    global::System.Nullable<decimal> CCostC, 
                    global::System.Nullable<decimal> CCostApp, 
                    global::System.Nullable<decimal> CCostPruning, 
                    global::System.Nullable<decimal> CCostMulching, 
                    global::System.Nullable<decimal> CCostOther, 
                    string AppInstruct, 
                    string PruneInstruct, 
                    string MulchInstruct, 
                    string OtherInstruct, 
                    global::System.Nullable<decimal> CostMulching, 
                    string Notes, 
                    global::System.Nullable<bool> FourStepType1, 
                    global::System.Nullable<bool> FourStepType2, 
                    global::System.Nullable<bool> FourStepType3, 
                    global::System.Nullable<bool> FourStepType4, 
                    global::System.Nullable<int> YCost, 
                    global::System.Nullable<int> YCostB, 
                    global::System.Nullable<int> YCostC, 
                    global::System.Nullable<int> YCostApp, 
                    global::System.Nullable<int> YCostPruning, 
                    global::System.Nullable<int> YCostMulching, 
                    global::System.Nullable<int> YCostOther, 
                    global::System.Nullable<int> YCost4Step, 
                    int Original_ServiceID) {
            return this.Update(PropertyID, Date, MowType, FourStepType, LeafType, GutterType, OtherType, Frequency, SpringServices, SummerServices, FallServices, WinterServices, FourStepMat, FourStepDate1, FourStepDate2, FourStepDate3, FourStepDate4, PropMow, PropFourStep, PropSeed, PropFertilize, PropLime, PropAeration, Cost, FourStepCost, ContractorCost, LeafInstruct, SpecInstruct, FourStepInstruct, GutterInstruct, CostB, CostC, MaterialCost, ApplicationType, PruningType, MulchingType, CostApp, CostPruning, CostOther, CCostB, CCostC, CCostApp, CCostPruning, CCostMulching, CCostOther, AppInstruct, PruneInstruct, MulchInstruct, OtherInstruct, CostMulching, Notes, FourStepType1, FourStepType2, FourStepType3, FourStepType4, YCost, YCostB, YCostC, YCostApp, YCostPruning, YCostMulching, YCostOther, YCost4Step, Original_ServiceID, Original_ServiceID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int ClearCheckboxQuery() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetMowCount() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<int> GetServiceExist(global::System.Nullable<int> propertyid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((propertyid.HasValue == true)) {
                command.Parameters[0].Value = ((int)(propertyid.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertService(global::System.Nullable<int> propid, string date) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((propid.HasValue == true)) {
                command.Parameters[0].Value = ((int)(propid.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((date == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(date));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int ResetFourStepService() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStep1Date(global::System.Nullable<global::System.DateTime> StepDate, int serviceID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[6];
            if ((StepDate.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(StepDate.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            command.Parameters[1].Value = ((int)(serviceID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStep1DateProp(global::System.Nullable<global::System.DateTime> StepDate, global::System.Nullable<int> propertyID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[7];
            if ((StepDate.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(StepDate.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((propertyID.HasValue == true)) {
                command.Parameters[1].Value = ((int)(propertyID.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStep2Date(global::System.Nullable<global::System.DateTime> StepDate, int serviceID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[8];
            if ((StepDate.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(StepDate.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            command.Parameters[1].Value = ((int)(serviceID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStep2DateProp(global::System.Nullable<global::System.DateTime> StepDate, global::System.Nullable<int> propertyID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[9];
            if ((StepDate.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(StepDate.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((propertyID.HasValue == true)) {
                command.Parameters[1].Value = ((int)(propertyID.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStep3Date(global::System.Nullable<global::System.DateTime> StepDate, int serviceID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[10];
            if ((StepDate.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(StepDate.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            command.Parameters[1].Value = ((int)(serviceID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStep3DateProp(global::System.Nullable<global::System.DateTime> StepDate, global::System.Nullable<int> propertyID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[11];
            if ((StepDate.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(StepDate.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((propertyID.HasValue == true)) {
                command.Parameters[1].Value = ((int)(propertyID.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStep4Date(global::System.Nullable<global::System.DateTime> StepDate, int serviceID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[12];
            if ((StepDate.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(StepDate.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            command.Parameters[1].Value = ((int)(serviceID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStep4DateProp(global::System.Nullable<global::System.DateTime> StepDate, global::System.Nullable<int> propertyID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[13];
            if ((StepDate.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(StepDate.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((propertyID.HasValue == true)) {
                command.Parameters[1].Value = ((int)(propertyID.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RouteTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RouteTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Route";
            tableMapping.ColumnMappings.Add("RouteID", "RouteID");
            tableMapping.ColumnMappings.Add("RouteOrder", "RouteOrder");
            tableMapping.ColumnMappings.Add("RouteName", "RouteName");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("PropertyID", "PropertyID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM Route\r\nWHERE        (RouteID = @Original_RouteID) AND (PropertyID = @" +
                "Original_PropertyID) AND (@IsNull_RouteOrder = 1) AND (RouteOrder IS NULL) AND \r" +
                "\n                         (@IsNull_RouteName = 1) AND (RouteName IS NULL) AND (@" +
                "IsNull_Notes = 1) AND (Notes IS NULL) OR\r\n                         (RouteID = @O" +
                "riginal_RouteID) AND (PropertyID = @Original_PropertyID) AND (RouteOrder = @Orig" +
                "inal_RouteOrder) AND (@IsNull_RouteName = 1) AND \r\n                         (Rou" +
                "teName IS NULL) AND (@IsNull_Notes = 1) AND (Notes IS NULL) OR\r\n                " +
                "         (RouteID = @Original_RouteID) AND (PropertyID = @Original_PropertyID) A" +
                "ND (@IsNull_RouteOrder = 1) AND (RouteOrder IS NULL) AND \r\n                     " +
                "    (RouteName = @Original_RouteName) AND (@IsNull_Notes = 1) AND (Notes IS NULL" +
                ") OR\r\n                         (RouteID = @Original_RouteID) AND (PropertyID = @" +
                "Original_PropertyID) AND (RouteOrder = @Original_RouteOrder) AND \r\n             " +
                "            (RouteName = @Original_RouteName) AND (@IsNull_Notes = 1) AND (Notes" +
                " IS NULL) OR\r\n                         (RouteID = @Original_RouteID) AND (Proper" +
                "tyID = @Original_PropertyID) AND (@IsNull_RouteOrder = 1) AND (RouteOrder IS NUL" +
                "L) AND \r\n                         (@IsNull_RouteName = 1) AND (RouteName IS NULL" +
                ") AND (Notes = @Original_Notes) OR\r\n                         (RouteID = @Origina" +
                "l_RouteID) AND (PropertyID = @Original_PropertyID) AND (RouteOrder = @Original_R" +
                "outeOrder) AND (@IsNull_RouteName = 1) AND \r\n                         (RouteName" +
                " IS NULL) AND (Notes = @Original_Notes) OR\r\n                         (RouteID = " +
                "@Original_RouteID) AND (PropertyID = @Original_PropertyID) AND (@IsNull_RouteOrd" +
                "er = 1) AND (RouteOrder IS NULL) AND \r\n                         (RouteName = @Or" +
                "iginal_RouteName) AND (Notes = @Original_Notes) OR\r\n                         (Ro" +
                "uteID = @Original_RouteID) AND (PropertyID = @Original_PropertyID) AND (RouteOrd" +
                "er = @Original_RouteOrder) AND \r\n                         (RouteName = @Original" +
                "_RouteName) AND (Notes = @Original_Notes)";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RouteID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RouteID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PropertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RouteOrder", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RouteOrder", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RouteName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Notes", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RouteOrder", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RouteOrder", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RouteName", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Notes", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO Route\r\n                         (PropertyID, RouteOrder, RouteName, N" +
                "otes)\r\nVALUES        (@PropertyID,@RouteOrder,@RouteName,@Notes); \r\nSELECT Route" +
                "ID, PropertyID, RouteOrder, RouteName, Notes FROM Route WHERE (RouteID = SCOPE_I" +
                "DENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteOrder", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RouteOrder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteName", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE       Route\r\nSET                PropertyID = @PropertyID, RouteOrder = @Ro" +
                "uteOrder, RouteName = @RouteName, Notes = @Notes\r\nWHERE        (RouteID = @Origi" +
                "nal_RouteID) AND (PropertyID = @Original_PropertyID) AND (@IsNull_RouteOrder = 1" +
                ") AND (RouteOrder IS NULL) AND \r\n                         (@IsNull_RouteName = 1" +
                ") AND (RouteName IS NULL) AND (@IsNull_Notes = 1) AND (Notes IS NULL) OR\r\n      " +
                "                   (RouteID = @Original_RouteID) AND (PropertyID = @Original_Pro" +
                "pertyID) AND (RouteOrder = @Original_RouteOrder) AND (@IsNull_RouteName = 1) AND" +
                " \r\n                         (RouteName IS NULL) AND (@IsNull_Notes = 1) AND (Not" +
                "es IS NULL) OR\r\n                         (RouteID = @Original_RouteID) AND (Prop" +
                "ertyID = @Original_PropertyID) AND (@IsNull_RouteOrder = 1) AND (RouteOrder IS N" +
                "ULL) AND \r\n                         (RouteName = @Original_RouteName) AND (@IsNu" +
                "ll_Notes = 1) AND (Notes IS NULL) OR\r\n                         (RouteID = @Origi" +
                "nal_RouteID) AND (PropertyID = @Original_PropertyID) AND (RouteOrder = @Original" +
                "_RouteOrder) AND \r\n                         (RouteName = @Original_RouteName) AN" +
                "D (@IsNull_Notes = 1) AND (Notes IS NULL) OR\r\n                         (RouteID " +
                "= @Original_RouteID) AND (PropertyID = @Original_PropertyID) AND (@IsNull_RouteO" +
                "rder = 1) AND (RouteOrder IS NULL) AND \r\n                         (@IsNull_Route" +
                "Name = 1) AND (RouteName IS NULL) AND (Notes = @Original_Notes) OR\r\n            " +
                "             (RouteID = @Original_RouteID) AND (PropertyID = @Original_PropertyI" +
                "D) AND (RouteOrder = @Original_RouteOrder) AND (@IsNull_RouteName = 1) AND \r\n   " +
                "                      (RouteName IS NULL) AND (Notes = @Original_Notes) OR\r\n    " +
                "                     (RouteID = @Original_RouteID) AND (PropertyID = @Original_P" +
                "ropertyID) AND (@IsNull_RouteOrder = 1) AND (RouteOrder IS NULL) AND \r\n         " +
                "                (RouteName = @Original_RouteName) AND (Notes = @Original_Notes) " +
                "OR\r\n                         (RouteID = @Original_RouteID) AND (PropertyID = @Or" +
                "iginal_PropertyID) AND (RouteOrder = @Original_RouteOrder) AND \r\n               " +
                "          (RouteName = @Original_RouteName) AND (Notes = @Original_Notes); \r\nSEL" +
                "ECT RouteID, PropertyID, RouteOrder, RouteName, Notes FROM Route WHERE (RouteID " +
                "= @RouteID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteOrder", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RouteOrder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteName", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RouteID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RouteID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PropertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RouteOrder", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RouteOrder", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RouteName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Notes", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RouteOrder", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RouteOrder", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RouteName", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Notes", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RouteID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     RouteID, PropertyID, RouteOrder, RouteName, Notes\r\nFROM         Route";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM Route\r\nWHERE        (RouteID = @RouteID)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RouteID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT        RouteID, PropertyID, RouteName, RouteOrder, Notes\r\nFROM            " +
                "Route\r\nWHERE        (RouteName = @routename)\r\nORDER BY RouteOrder";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@routename", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT        COUNT(*) AS Expr1\r\nFROM            Route\r\nWHERE        (RouteName =" +
                " @routeName) AND (PropertyID = @propertyID)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@routeName", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@propertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "UPDATE       Route\r\nSET                RouteOrder = @RouteOrder\r\nWHERE        (Ro" +
                "uteID = @RouteID)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteOrder", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RouteOrder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RouteID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.RouteDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.RouteDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.RouteDataTable dataTable = new MMSDataSet.RouteDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByRouteOrdered(MMSDataSet.RouteDataTable dataTable, string routename) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((routename == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(routename));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.RouteDataTable GetDataByRouteOrdered(string routename) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((routename == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(routename));
            }
            MMSDataSet.RouteDataTable dataTable = new MMSDataSet.RouteDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.RouteDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Route");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_RouteID, int Original_PropertyID, global::System.Nullable<int> Original_RouteOrder, string Original_RouteName, string Original_Notes) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_RouteID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_PropertyID));
            if ((Original_RouteOrder.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_RouteOrder.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_RouteName == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_RouteName));
            }
            if ((Original_Notes == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Notes));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int PropertyID, global::System.Nullable<int> RouteOrder, string RouteName, string Notes) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(PropertyID));
            if ((RouteOrder.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(RouteOrder.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((RouteName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(RouteName));
            }
            if ((Notes == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Notes));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int PropertyID, global::System.Nullable<int> RouteOrder, string RouteName, string Notes, int Original_RouteID, int Original_PropertyID, global::System.Nullable<int> Original_RouteOrder, string Original_RouteName, string Original_Notes, int RouteID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(PropertyID));
            if ((RouteOrder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(RouteOrder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((RouteName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(RouteName));
            }
            if ((Notes == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Notes));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_RouteID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_PropertyID));
            if ((Original_RouteOrder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_RouteOrder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_RouteName == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_RouteName));
            }
            if ((Original_Notes == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Notes));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(RouteID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteRoute(int RouteID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(RouteID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<int> GetRouteExist(string routeName, int propertyID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((routeName == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(routeName));
            }
            command.Parameters[1].Value = ((int)(propertyID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateRouteOrder(global::System.Nullable<int> RouteOrder, int RouteID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((RouteOrder.HasValue == true)) {
                command.Parameters[0].Value = ((int)(RouteOrder.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            command.Parameters[1].Value = ((int)(RouteID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CustPropertyTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustPropertyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CustProperty";
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("Subdivision", "Subdivision");
            tableMapping.ColumnMappings.Add("PropertyID", "PropertyID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        Customer.LastName, Customer.FirstName, Property.Description, Property.Address, Property.City, Property.State, Property.Zip, Property.Subdivision, 
                         Property.PropertyID
FROM            Customer INNER JOIN
                         Property ON Customer.CustomerID = Property.CustomerID";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.CustPropertyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.CustPropertyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.CustPropertyDataTable dataTable = new MMSDataSet.CustPropertyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CrewTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CrewTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Crew";
            tableMapping.ColumnMappings.Add("EmployeeId", "EmployeeId");
            tableMapping.ColumnMappings.Add("CustomerJobID", "CustomerJobID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Crew] ([EmployeeId], [CustomerJobID]) VALUES (@EmployeeId, @Cu" +
                "stomerJobID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerJobID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EmployeeId, CustomerJobID FROM dbo.Crew";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM Crew\r\nWHERE   (CustomerJobID = @customerjobid)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@customerjobid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT EmployeeId, CustomerJobID FROM dbo.Crew\r\nWhere CustomerJobID = @custumerjo" +
                "bid";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@custumerjobid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "INSERT INTO [dbo].[Crew] ([EmployeeId], [CustomerJobID]) VALUES (@EmployeeId, @Cu" +
                "stomerJobID)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerJobID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.CrewDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.CrewDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.CrewDataTable dataTable = new MMSDataSet.CrewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(MMSDataSet.CrewDataTable dataTable, global::System.Nullable<int> custumerjobid) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((custumerjobid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(custumerjobid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CrewDataTable GetDataBy1(global::System.Nullable<int> custumerjobid) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((custumerjobid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(custumerjobid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            MMSDataSet.CrewDataTable dataTable = new MMSDataSet.CrewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.CrewDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Crew");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> EmployeeId, global::System.Nullable<int> CustomerJobID) {
            if ((EmployeeId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(EmployeeId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((CustomerJobID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(CustomerJobID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteJobIDQuery(global::System.Nullable<int> customerjobid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((customerjobid.HasValue == true)) {
                command.Parameters[0].Value = ((int)(customerjobid.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(global::System.Nullable<int> EmployeeId, global::System.Nullable<int> CustomerJobID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((EmployeeId.HasValue == true)) {
                command.Parameters[0].Value = ((int)(EmployeeId.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((CustomerJobID.HasValue == true)) {
                command.Parameters[1].Value = ((int)(CustomerJobID.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class VendorTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VendorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Vendor";
            tableMapping.ColumnMappings.Add("VendorID", "VendorID");
            tableMapping.ColumnMappings.Add("VendorName", "VendorName");
            tableMapping.ColumnMappings.Add("ContactName", "ContactName");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("PhoneNumber", "PhoneNumber");
            tableMapping.ColumnMappings.Add("FaxNumber", "FaxNumber");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("Website", "Website");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("Active", "Active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Vendor] WHERE (([VendorID] = @Original_VendorID) AND ((@IsNull_VendorName = 1 AND [VendorName] IS NULL) OR ([VendorName] = @Original_VendorName)) AND ((@IsNull_ContactName = 1 AND [ContactName] IS NULL) OR ([ContactName] = @Original_ContactName)) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Address] = @Original_Address)) AND ((@IsNull_City = 1 AND [City] IS NULL) OR ([City] = @Original_City)) AND ((@IsNull_State = 1 AND [State] IS NULL) OR ([State] = @Original_State)) AND ((@IsNull_Zip = 1 AND [Zip] IS NULL) OR ([Zip] = @Original_Zip)) AND ((@IsNull_PhoneNumber = 1 AND [PhoneNumber] IS NULL) OR ([PhoneNumber] = @Original_PhoneNumber)) AND ((@IsNull_FaxNumber = 1 AND [FaxNumber] IS NULL) OR ([FaxNumber] = @Original_FaxNumber)) AND ((@IsNull_Email = 1 AND [Email] IS NULL) OR ([Email] = @Original_Email)) AND ((@IsNull_Website = 1 AND [Website] IS NULL) OR ([Website] = @Original_Website)) AND ((@IsNull_Notes = 1 AND [Notes] IS NULL) OR ([Notes] = @Original_Notes)) AND ([Active] = @Original_Active))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VendorID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VendorName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VendorName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ContactName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContactName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContactName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContactName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Address", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_City", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_State", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Zip", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PhoneNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PhoneNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FaxNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FaxNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FaxNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FaxNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Email", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Website", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Website", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Website", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Website", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Notes", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Notes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Vendor] ([VendorName], [ContactName], [Address], [City], [State], [Zip], [PhoneNumber], [FaxNumber], [Email], [Website], [Notes], [Active]) VALUES (@VendorName, @ContactName, @Address, @City, @State, @Zip, @PhoneNumber, @FaxNumber, @Email, @Website, @Notes, @Active);
SELECT VendorID, VendorName, ContactName, Address, City, State, Zip, PhoneNumber, FaxNumber, Email, Website, Notes, Active FROM Vendor WHERE (VendorID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VendorName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContactName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContactName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhoneNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FaxNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FaxNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Website", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Website", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Vendor] SET [VendorName] = @VendorName, [ContactName] = @ContactName, [Address] = @Address, [City] = @City, [State] = @State, [Zip] = @Zip, [PhoneNumber] = @PhoneNumber, [FaxNumber] = @FaxNumber, [Email] = @Email, [Website] = @Website, [Notes] = @Notes, [Active] = @Active WHERE (([VendorID] = @Original_VendorID) AND ((@IsNull_VendorName = 1 AND [VendorName] IS NULL) OR ([VendorName] = @Original_VendorName)) AND ((@IsNull_ContactName = 1 AND [ContactName] IS NULL) OR ([ContactName] = @Original_ContactName)) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Address] = @Original_Address)) AND ((@IsNull_City = 1 AND [City] IS NULL) OR ([City] = @Original_City)) AND ((@IsNull_State = 1 AND [State] IS NULL) OR ([State] = @Original_State)) AND ((@IsNull_Zip = 1 AND [Zip] IS NULL) OR ([Zip] = @Original_Zip)) AND ((@IsNull_PhoneNumber = 1 AND [PhoneNumber] IS NULL) OR ([PhoneNumber] = @Original_PhoneNumber)) AND ((@IsNull_FaxNumber = 1 AND [FaxNumber] IS NULL) OR ([FaxNumber] = @Original_FaxNumber)) AND ((@IsNull_Email = 1 AND [Email] IS NULL) OR ([Email] = @Original_Email)) AND ((@IsNull_Website = 1 AND [Website] IS NULL) OR ([Website] = @Original_Website)) AND ((@IsNull_Notes = 1 AND [Notes] IS NULL) OR ([Notes] = @Original_Notes)) AND ([Active] = @Original_Active));
SELECT VendorID, VendorName, ContactName, Address, City, State, Zip, PhoneNumber, FaxNumber, Email, Website, Notes, Active FROM Vendor WHERE (VendorID = @VendorID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VendorName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContactName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContactName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhoneNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FaxNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FaxNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Website", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Website", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VendorID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VendorName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VendorName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ContactName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContactName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContactName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContactName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Address", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_City", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_State", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Zip", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PhoneNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PhoneNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FaxNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FaxNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FaxNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FaxNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Email", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Website", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Website", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Website", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Website", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Notes", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Notes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VendorID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "VendorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     VendorID, VendorName, ContactName, Address, City, State, Zip, PhoneNum" +
                "ber, FaxNumber, Email, Website, Notes, Active\r\nFROM         Vendor";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.VendorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.VendorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.VendorDataTable dataTable = new MMSDataSet.VendorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.VendorDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Vendor");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_VendorID, string Original_VendorName, string Original_ContactName, string Original_Address, string Original_City, string Original_State, string Original_Zip, string Original_PhoneNumber, string Original_FaxNumber, string Original_Email, string Original_Website, string Original_Notes, bool Original_Active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_VendorID));
            if ((Original_VendorName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_VendorName));
            }
            if ((Original_ContactName == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ContactName));
            }
            if ((Original_Address == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Address));
            }
            if ((Original_City == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_City));
            }
            if ((Original_State == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_State));
            }
            if ((Original_Zip == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Zip));
            }
            if ((Original_PhoneNumber == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_PhoneNumber));
            }
            if ((Original_FaxNumber == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_FaxNumber));
            }
            if ((Original_Email == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Email));
            }
            if ((Original_Website == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_Website));
            }
            if ((Original_Notes == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_Notes));
            }
            this.Adapter.DeleteCommand.Parameters[23].Value = ((bool)(Original_Active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string VendorName, string ContactName, string Address, string City, string State, string Zip, string PhoneNumber, string FaxNumber, string Email, string Website, string Notes, bool Active) {
            if ((VendorName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(VendorName));
            }
            if ((ContactName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ContactName));
            }
            if ((Address == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(City));
            }
            if ((State == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(State));
            }
            if ((Zip == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Zip));
            }
            if ((PhoneNumber == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(PhoneNumber));
            }
            if ((FaxNumber == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(FaxNumber));
            }
            if ((Email == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Email));
            }
            if ((Website == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Website));
            }
            if ((Notes == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Notes));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(Active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string VendorName, 
                    string ContactName, 
                    string Address, 
                    string City, 
                    string State, 
                    string Zip, 
                    string PhoneNumber, 
                    string FaxNumber, 
                    string Email, 
                    string Website, 
                    string Notes, 
                    bool Active, 
                    int Original_VendorID, 
                    string Original_VendorName, 
                    string Original_ContactName, 
                    string Original_Address, 
                    string Original_City, 
                    string Original_State, 
                    string Original_Zip, 
                    string Original_PhoneNumber, 
                    string Original_FaxNumber, 
                    string Original_Email, 
                    string Original_Website, 
                    string Original_Notes, 
                    bool Original_Active, 
                    int VendorID) {
            if ((VendorName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(VendorName));
            }
            if ((ContactName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ContactName));
            }
            if ((Address == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(City));
            }
            if ((State == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(State));
            }
            if ((Zip == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Zip));
            }
            if ((PhoneNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(PhoneNumber));
            }
            if ((FaxNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(FaxNumber));
            }
            if ((Email == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Email));
            }
            if ((Website == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Website));
            }
            if ((Notes == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Notes));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Active));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_VendorID));
            if ((Original_VendorName == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_VendorName));
            }
            if ((Original_ContactName == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_ContactName));
            }
            if ((Original_Address == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_Address));
            }
            if ((Original_City == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_City));
            }
            if ((Original_State == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_State));
            }
            if ((Original_Zip == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_Zip));
            }
            if ((Original_PhoneNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_PhoneNumber));
            }
            if ((Original_FaxNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_FaxNumber));
            }
            if ((Original_Email == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_Email));
            }
            if ((Original_Website == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_Website));
            }
            if ((Original_Notes == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_Notes));
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((bool)(Original_Active));
            this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(VendorID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string VendorName, 
                    string ContactName, 
                    string Address, 
                    string City, 
                    string State, 
                    string Zip, 
                    string PhoneNumber, 
                    string FaxNumber, 
                    string Email, 
                    string Website, 
                    string Notes, 
                    bool Active, 
                    int Original_VendorID, 
                    string Original_VendorName, 
                    string Original_ContactName, 
                    string Original_Address, 
                    string Original_City, 
                    string Original_State, 
                    string Original_Zip, 
                    string Original_PhoneNumber, 
                    string Original_FaxNumber, 
                    string Original_Email, 
                    string Original_Website, 
                    string Original_Notes, 
                    bool Original_Active) {
            return this.Update(VendorName, ContactName, Address, City, State, Zip, PhoneNumber, FaxNumber, Email, Website, Notes, Active, Original_VendorID, Original_VendorName, Original_ContactName, Original_Address, Original_City, Original_State, Original_Zip, Original_PhoneNumber, Original_FaxNumber, Original_Email, Original_Website, Original_Notes, Original_Active, Original_VendorID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PropServiceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PropServiceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PropService";
            tableMapping.ColumnMappings.Add("ServiceID", "ServiceID");
            tableMapping.ColumnMappings.Add("PropertyID", "PropertyID");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("MowType", "MowType");
            tableMapping.ColumnMappings.Add("FourStepType", "FourStepType");
            tableMapping.ColumnMappings.Add("LeafType", "LeafType");
            tableMapping.ColumnMappings.Add("GutterType", "GutterType");
            tableMapping.ColumnMappings.Add("OtherType", "OtherType");
            tableMapping.ColumnMappings.Add("Frequency", "Frequency");
            tableMapping.ColumnMappings.Add("SpringServices", "SpringServices");
            tableMapping.ColumnMappings.Add("SummerServices", "SummerServices");
            tableMapping.ColumnMappings.Add("FallServices", "FallServices");
            tableMapping.ColumnMappings.Add("WinterServices", "WinterServices");
            tableMapping.ColumnMappings.Add("FourStepMat", "FourStepMat");
            tableMapping.ColumnMappings.Add("FourStepDate1", "FourStepDate1");
            tableMapping.ColumnMappings.Add("FourStepDate2", "FourStepDate2");
            tableMapping.ColumnMappings.Add("FourStepDate3", "FourStepDate3");
            tableMapping.ColumnMappings.Add("FourStepDate4", "FourStepDate4");
            tableMapping.ColumnMappings.Add("PropMow", "PropMow");
            tableMapping.ColumnMappings.Add("PropFourStep", "PropFourStep");
            tableMapping.ColumnMappings.Add("PropSeed", "PropSeed");
            tableMapping.ColumnMappings.Add("PropFertilize", "PropFertilize");
            tableMapping.ColumnMappings.Add("PropLime", "PropLime");
            tableMapping.ColumnMappings.Add("PropAeration", "PropAeration");
            tableMapping.ColumnMappings.Add("Cost", "Cost");
            tableMapping.ColumnMappings.Add("FourStepCost", "FourStepCost");
            tableMapping.ColumnMappings.Add("ContractorCost", "ContractorCost");
            tableMapping.ColumnMappings.Add("LeafInstruct", "LeafInstruct");
            tableMapping.ColumnMappings.Add("SpecInstruct", "SpecInstruct");
            tableMapping.ColumnMappings.Add("FourStepInstruct", "FourStepInstruct");
            tableMapping.ColumnMappings.Add("GutterInstruct", "GutterInstruct");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("Phone", "Phone");
            tableMapping.ColumnMappings.Add("Subdivision", "Subdivision");
            tableMapping.ColumnMappings.Add("GroupType", "GroupType");
            tableMapping.ColumnMappings.Add("CostB", "CostB");
            tableMapping.ColumnMappings.Add("CostC", "CostC");
            tableMapping.ColumnMappings.Add("MaterialCost", "MaterialCost");
            tableMapping.ColumnMappings.Add("ApplicationType", "ApplicationType");
            tableMapping.ColumnMappings.Add("PruningType", "PruningType");
            tableMapping.ColumnMappings.Add("CostApp", "CostApp");
            tableMapping.ColumnMappings.Add("CostPruning", "CostPruning");
            tableMapping.ColumnMappings.Add("CostMulching", "CostMulching");
            tableMapping.ColumnMappings.Add("CostOther", "CostOther");
            tableMapping.ColumnMappings.Add("CCostB", "CCostB");
            tableMapping.ColumnMappings.Add("CCostC", "CCostC");
            tableMapping.ColumnMappings.Add("CCostApp", "CCostApp");
            tableMapping.ColumnMappings.Add("CCostPruning", "CCostPruning");
            tableMapping.ColumnMappings.Add("CCostMulching", "CCostMulching");
            tableMapping.ColumnMappings.Add("CCostOther", "CCostOther");
            tableMapping.ColumnMappings.Add("AppInstruct", "AppInstruct");
            tableMapping.ColumnMappings.Add("PruneInstruct", "PruneInstruct");
            tableMapping.ColumnMappings.Add("MulchInstruct", "MulchInstruct");
            tableMapping.ColumnMappings.Add("OtherInstruct", "OtherInstruct");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("MulchingType", "MulchingType");
            tableMapping.ColumnMappings.Add("GutterRegion", "GutterRegion");
            tableMapping.ColumnMappings.Add("FourStepType1", "FourStepType1");
            tableMapping.ColumnMappings.Add("FourStepType2", "FourStepType2");
            tableMapping.ColumnMappings.Add("FourStepType3", "FourStepType3");
            tableMapping.ColumnMappings.Add("FourStepType4", "FourStepType4");
            tableMapping.ColumnMappings.Add("YCost", "YCost");
            tableMapping.ColumnMappings.Add("YCostB", "YCostB");
            tableMapping.ColumnMappings.Add("YCostC", "YCostC");
            tableMapping.ColumnMappings.Add("YCostApp", "YCostApp");
            tableMapping.ColumnMappings.Add("YCostPruning", "YCostPruning");
            tableMapping.ColumnMappings.Add("YCostMulching", "YCostMulching");
            tableMapping.ColumnMappings.Add("YCostOther", "YCostOther");
            tableMapping.ColumnMappings.Add("YCost4Step", "YCost4Step");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Service] WHERE (([ServiceID] = @Original_ServiceID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO Service\r\n                  (PropertyID, Date, MowType, FourStepType, " +
                "LeafType, GutterType, OtherType, Frequency, SpringServices, SummerServices, Fall" +
                "Services, WinterServices, FourStepMat, FourStepDate1, FourStepDate2, FourStepDat" +
                "e3, \r\n                  FourStepDate4, PropMow, PropFourStep, PropSeed, PropFert" +
                "ilize, PropLime, PropAeration, Cost, FourStepCost, ContractorCost, LeafInstruct," +
                " SpecInstruct, FourStepInstruct, GutterInstruct, CostB, CostC, \r\n               " +
                "   MaterialCost, ApplicationType, PruningType, MulchingType, CostApp, CostPrunin" +
                "g, CostOther, CCostB, CCostC, CCostApp, CCostPruning, CCostMulching, CCostOther," +
                " AppInstruct, PruneInstruct, MulchInstruct, \r\n                  OtherInstruct, C" +
                "ostMulching, Notes, FourStepType1, FourStepType2, FourStepType3, FourStepType4, " +
                "YCost, YCostB, YCostC, YCostApp, YCostPruning, YCostMulching, YCostOther, YCost4" +
                "Step)\r\nVALUES (@PropertyID,@Date,@MowType,@FourStepType,@LeafType,@GutterType,@O" +
                "therType,@Frequency,@SpringServices,@SummerServices,@FallServices,@WinterService" +
                "s,@FourStepMat,@FourStepDate1,@FourStepDate2,@FourStepDate3,@FourStepDate4,@Prop" +
                "Mow,@PropFourStep,@PropSeed,@PropFertilize,@PropLime,@PropAeration,@Cost,@FourSt" +
                "epCost,@ContractorCost,@LeafInstruct,@SpecInstruct,@FourStepInstruct,@GutterInst" +
                "ruct,@CostB,@CostC,@MaterialCost,@ApplicationType,@PruningType,@MulchingType,@Co" +
                "stApp,@CostPruning,@CostOther,@CCostB,@CCostC,@CCostApp,@CCostPruning,@CCostMulc" +
                "hing,@CCostOther,@AppInstruct,@PruneInstruct,@MulchInstruct,@OtherInstruct,@Cost" +
                "Mulching,@Notes,@FourStepType1,@FourStepType2,@FourStepType3,@FourStepType4,@YCo" +
                "st,@YCostB,@YCostC,@YCostApp,@YCostPruning,@YCostMulching,@YCostOther,@YCost4Ste" +
                "p)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.Date, 3, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MowType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "MowType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeafType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "LeafType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GutterType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "GutterType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "OtherType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Frequency", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SpringServices", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, "SpringServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SummerServices", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, "SummerServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FallServices", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, "FallServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WinterServices", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, "WinterServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepMat", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate1", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate2", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate3", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate4", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropMow", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PropMow", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropFourStep", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PropFourStep", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropSeed", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PropSeed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropFertilize", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PropFertilize", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropLime", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PropLime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropAeration", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PropAeration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepCost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractorCost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "ContractorCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeafInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "LeafInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SpecInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "SpecInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GutterInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "GutterInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostB", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostC", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaterialCost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApplicationType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "ApplicationType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PruningType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "PruningType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MulchingType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "MulchingType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostApp", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostApp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostPruning", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostPruning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostOther", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostOther", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostB", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CCostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostC", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CCostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostApp", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CCostApp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostPruning", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CCostPruning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostMulching", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CCostMulching", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostOther", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CCostOther", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "AppInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PruneInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "PruneInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MulchInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "MulchInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "OtherInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostMulching", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostMulching", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType1", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType2", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType3", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType4", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCost", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostB", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostC", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostApp", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCostApp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostPruning", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCostPruning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostMulching", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCostMulching", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostOther", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCostOther", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCost4Step", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCost4Step", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE Service\r\nSET          PropertyID = @PropertyID, Date = @Date, MowType = @M" +
                "owType, FourStepType = @FourStepType, LeafType = @LeafType, GutterType = @Gutter" +
                "Type, OtherType = @OtherType, Frequency = @Frequency, \r\n                  Spring" +
                "Services = @SpringServices, SummerServices = @SummerServices, FallServices = @Fa" +
                "llServices, WinterServices = @WinterServices, FourStepMat = @FourStepMat, FourSt" +
                "epDate1 = @FourStepDate1, \r\n                  FourStepDate2 = @FourStepDate2, Fo" +
                "urStepDate3 = @FourStepDate3, FourStepDate4 = @FourStepDate4, PropMow = @PropMow" +
                ", PropFourStep = @PropFourStep, PropSeed = @PropSeed, \r\n                  PropFe" +
                "rtilize = @PropFertilize, PropLime = @PropLime, PropAeration = @PropAeration, Co" +
                "st = @Cost, FourStepCost = @FourStepCost, ContractorCost = @ContractorCost, Leaf" +
                "Instruct = @LeafInstruct, \r\n                  SpecInstruct = @SpecInstruct, Four" +
                "StepInstruct = @FourStepInstruct, GutterInstruct = @GutterInstruct, CostB = @Cos" +
                "tB, CostC = @CostC, MaterialCost = @MaterialCost, ApplicationType = @Application" +
                "Type, \r\n                  PruningType = @PruningType, MulchingType = @MulchingTy" +
                "pe, CostApp = @CostApp, CostPruning = @CostPruning, CostOther = @CostOther, CCos" +
                "tB = @CCostB, CCostC = @CCostC, CCostApp = @CCostApp, \r\n                  CCostP" +
                "runing = @CCostPruning, CCostMulching = @CCostMulching, CCostOther = @CCostOther" +
                ", AppInstruct = @AppInstruct, PruneInstruct = @PruneInstruct, MulchInstruct = @M" +
                "ulchInstruct, \r\n                  OtherInstruct = @OtherInstruct, CostMulching =" +
                " @CostMulching, Notes = @Notes, FourStepType1 = @FourStepType1, FourStepType2 = " +
                "@FourStepType2, FourStepType3 = @FourStepType3, \r\n                  FourStepType" +
                "4 = @FourStepType4, YCost = @YCost, YCostB = @YCostB, YCostC = @YCostC, YCostApp" +
                " = @YCostApp, YCostPruning = @YCostPruning, YCostMulching = @YCostMulching, YCos" +
                "tOther = @YCostOther, \r\n                  YCost4Step = @YCost4Step\r\nWHERE  (Serv" +
                "iceID = @Original_ServiceID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.Date, 3, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MowType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "MowType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeafType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "LeafType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GutterType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "GutterType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "OtherType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Frequency", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SpringServices", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, "SpringServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SummerServices", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, "SummerServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FallServices", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, "FallServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WinterServices", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, "WinterServices", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepMat", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate1", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate2", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate3", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepDate4", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepDate4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropMow", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PropMow", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropFourStep", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PropFourStep", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropSeed", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PropSeed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropFertilize", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PropFertilize", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropLime", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PropLime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropAeration", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PropAeration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepCost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractorCost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "ContractorCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeafInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "LeafInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SpecInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "SpecInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GutterInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "GutterInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostB", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostC", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaterialCost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApplicationType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "ApplicationType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PruningType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "PruningType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MulchingType", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "MulchingType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostApp", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostApp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostPruning", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostPruning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostOther", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostOther", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostB", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CCostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostC", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CCostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostApp", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CCostApp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostPruning", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CCostPruning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostMulching", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CCostMulching", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CCostOther", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CCostOther", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "AppInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PruneInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "PruneInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MulchInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "MulchInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherInstruct", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "OtherInstruct", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostMulching", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostMulching", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType1", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType2", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType3", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepType4", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepType4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCost", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostB", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostC", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostApp", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCostApp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostPruning", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCostPruning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostMulching", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCostMulching", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCostOther", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCostOther", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCost4Step", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "YCost4Step", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Service.ServiceID, Service.PropertyID, Service.Date, Service.MowType, Serv" +
                "ice.FourStepType, Service.LeafType, Service.GutterType, Service.OtherType, Servi" +
                "ce.Frequency, Service.SpringServices, \r\n                  Service.SummerServices" +
                ", Service.FallServices, Service.WinterServices, Service.FourStepMat, Service.Fou" +
                "rStepDate1, Service.FourStepDate2, Service.FourStepDate3, Service.FourStepDate4," +
                " Service.PropMow, \r\n                  Service.PropFourStep, Service.PropSeed, Se" +
                "rvice.PropFertilize, Service.PropLime, Service.PropAeration, Service.Cost, Servi" +
                "ce.FourStepCost, Service.ContractorCost, Service.LeafInstruct, Service.SpecInstr" +
                "uct, \r\n                  Service.FourStepInstruct, Service.GutterInstruct, Servi" +
                "ce.CostB, Service.CostC, Customer.LastName, Customer.FirstName, Property.Descrip" +
                "tion, Property.Address, Property.City, Property.State, Property.Zip, \r\n         " +
                "         Property.Phone, Property.Subdivision, Property.GroupType, Service.Mater" +
                "ialCost, Service.ApplicationType, Service.PruningType, Service.MulchingType, Ser" +
                "vice.CostApp, Service.CostPruning, Service.CostMulching, \r\n                  Ser" +
                "vice.CostOther, Service.CCostB, Service.CCostC, Service.CCostApp, Service.CCostP" +
                "runing, Service.CCostMulching, Service.CCostOther, Service.AppInstruct, Service." +
                "PruneInstruct, Service.MulchInstruct, \r\n                  Service.OtherInstruct," +
                " Service.Notes, Property.GutterRegion, Service.FourStepType1, Service.FourStepTy" +
                "pe2, Service.FourStepType3, Service.FourStepType4, Service.YCost, Service.YCostB" +
                ", Service.YCostC, \r\n                  Service.YCostApp, Service.YCostPruning, Se" +
                "rvice.YCostMulching, Service.YCostOther, Service.YCost4Step\r\nFROM     Customer I" +
                "NNER JOIN\r\n                  Property ON Customer.CustomerID = Property.Customer" +
                "ID INNER JOIN\r\n                  Service ON Property.PropertyID = Service.Proper" +
                "tyID\r\nWHERE  (Customer.Active = 1) AND (Property.Active = 1)\r\nORDER BY Customer." +
                "LastName, Customer.FirstName";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM Service\r\nWHERE (ServiceID = @serviceid) \r\n";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@serviceid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[2].CommandText = "SELECT        Service.ServiceID, Service.PropertyID, Service.Date, Service.MowTyp" +
                "e, Service.FourStepType, Service.LeafType, Service.GutterType, Service.OtherType" +
                ", \r\n                         Service.Frequency, Service.SpringServices, Service." +
                "SummerServices, Service.FallServices, Service.WinterServices, Service.FourStepMa" +
                "t, \r\n                         Service.FourStepDate1, Service.FourStepDate2, Serv" +
                "ice.FourStepDate3, Service.FourStepDate4, Service.PropMow, Service.PropFourStep," +
                " Service.PropSeed, \r\n                         Service.PropFertilize, Service.Pro" +
                "pLime, Service.PropAeration, Service.Cost, Service.FourStepCost, Service.Contrac" +
                "torCost, Service.LeafInstruct, \r\n                         Service.SpecInstruct, " +
                "Service.FourStepInstruct, Service.GutterInstruct, Customer.LastName, Customer.Fi" +
                "rstName, Property.Description, Property.Address, \r\n                         Prop" +
                "erty.City, Property.State, Property.Zip, Property.Phone, Property.Subdivision, S" +
                "ervice.CostB, Service.CostC, Service.MaterialCost, \r\n                         Se" +
                "rvice.ApplicationType, Service.PruningType, Service.MulchingType, Service.CostAp" +
                "p, Service.CostPruning, Service.CostMulching, Service.CostOther, \r\n             " +
                "            Service.CCostB, Service.CCostC, Service.CCostApp, Service.CCostPruni" +
                "ng, Service.CCostMulching, Service.CCostOther, Service.AppInstruct, \r\n          " +
                "               Service.PruneInstruct, Service.MulchInstruct, Service.OtherInstru" +
                "ct, Service.Notes, Property.GutterRegion\r\nFROM            Customer INNER JOIN\r\n " +
                "                        Property ON Customer.CustomerID = Property.CustomerID IN" +
                "NER JOIN\r\n                         Service ON Property.PropertyID = Service.Prop" +
                "ertyID\r\nWHERE        (Service.ServiceID = @serviceid)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@serviceid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT        T1.ServiceID, T1.PropertyID, T1.Date, T1.MowType, T1.FourStepType, " +
                "T1.LeafType, T1.GutterType, T1.OtherType, T1.Frequency, T1.SpringServices, T1.Su" +
                "mmerServices, T1.FallServices, T1.WinterServices, \r\n                         T1." +
                "FourStepMat, T1.FourStepDate1, T1.FourStepDate2, T1.FourStepDate3, T1.FourStepDa" +
                "te4, T1.PropMow, T1.PropFourStep, T1.PropSeed, T1.PropFertilize, T1.PropLime, T1" +
                ".PropAeration, T1.Cost, \r\n                         T1.FourStepCost, T1.Contracto" +
                "rCost, T1.LeafInstruct, T1.SpecInstruct, T1.FourStepInstruct, T1.GutterInstruct," +
                " T1.CostB, T1.CostC, T1.LastName, T1.FirstName, T1.Description, T1.Address, T1.C" +
                "ity, T1.State, T1.Zip, \r\n                         T1.Phone, T1.Subdivision, T1.G" +
                "roupType, T1.MaterialCost, T1.ApplicationType, T1.PruningType, T1.MulchingType, " +
                "T1.CostApp, T1.CostPruning, T1.CostMulching, T1.CostOther, T1.CCostB, T1.CCostC," +
                " \r\n                         T1.CCostApp, T1.CCostPruning, T1.CCostMulching, T1.C" +
                "CostOther, T1.AppInstruct, T1.PruneInstruct, T1.MulchInstruct, T1.OtherInstruct," +
                " T1.Notes, T1.GutterRegion, T1.FourStepType1, T1.FourStepType2, \r\n              " +
                "           T1.FourStepType3, T1.FourStepType4, T2.RouteID, T2.PropertyID AS Expr" +
                "1, T2.RouteName, T2.RouteOrder, T2.Notes AS Expr2\r\nFROM            (SELECT      " +
                "  Service.ServiceID, Service.PropertyID, Service.Date, Service.MowType, Service." +
                "FourStepType, Service.LeafType, Service.GutterType, Service.OtherType, Service.F" +
                "requency, Service.SpringServices, \r\n                                            " +
                "        Service.SummerServices, Service.FallServices, Service.WinterServices, Se" +
                "rvice.FourStepMat, Service.FourStepDate1, Service.FourStepDate2, Service.FourSte" +
                "pDate3, Service.FourStepDate4, \r\n                                               " +
                "     Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertil" +
                "ize, Service.PropLime, Service.PropAeration, Service.Cost, Service.FourStepCost," +
                " Service.ContractorCost, \r\n                                                    S" +
                "ervice.LeafInstruct, Service.SpecInstruct, Service.FourStepInstruct, Service.Gut" +
                "terInstruct, Service.CostB, Service.CostC, Customer.LastName, Customer.FirstName" +
                ", Property.Description, \r\n                                                    Pr" +
                "operty.Address, Property.City, Property.State, Property.Zip, Property.Phone, Pro" +
                "perty.Subdivision, Property.GroupType, Service.MaterialCost, Service.Application" +
                "Type, Service.PruningType, \r\n                                                   " +
                " Service.MulchingType, Service.CostApp, Service.CostPruning, Service.CostMulchin" +
                "g, Service.CostOther, Service.CCostB, Service.CCostC, Service.CCostApp, Service." +
                "CCostPruning, \r\n                                                    Service.CCos" +
                "tMulching, Service.CCostOther, Service.AppInstruct, Service.PruneInstruct, Servi" +
                "ce.MulchInstruct, Service.OtherInstruct, Service.Notes, Property.GutterRegion, S" +
                "ervice.FourStepType1, \r\n                                                    Serv" +
                "ice.FourStepType2, Service.FourStepType3, Service.FourStepType4\r\n               " +
                "           FROM            Customer INNER JOIN\r\n                                " +
                "                    Property ON Customer.CustomerID = Property.CustomerID INNER " +
                "JOIN\r\n                                                    Service ON Property.Pr" +
                "opertyID = Service.PropertyID\r\n                          WHERE        (Customer." +
                "Active = 1) AND (Property.Active = 1)) AS T1 LEFT OUTER JOIN\r\n                  " +
                "           (SELECT        RouteID, PropertyID, RouteName, RouteOrder, Notes\r\n   " +
                "                            FROM            Route\r\n                             " +
                "  WHERE        (RouteName = \'FourStep\')) AS T2 ON T2.PropertyID = T1.PropertyID\r" +
                "\nORDER BY ISNULL(RouteOrder,99999), LastName";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.PropServiceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.PropServiceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.PropServiceDataTable dataTable = new MMSDataSet.PropServiceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(MMSDataSet.PropServiceDataTable dataTable, int serviceid) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(serviceid));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.PropServiceDataTable GetDataByServiceId(int serviceid) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(serviceid));
            MMSDataSet.PropServiceDataTable dataTable = new MMSDataSet.PropServiceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByFourStep(MMSDataSet.PropServiceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.PropServiceDataTable GetDataByFourStep() {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            MMSDataSet.PropServiceDataTable dataTable = new MMSDataSet.PropServiceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.PropServiceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PropService");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQuery(int serviceid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(serviceid));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CustPropertyJobsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustPropertyJobsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CustPropertyJobs";
            tableMapping.ColumnMappings.Add("PropertyID", "PropertyID");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("Repeat", "Repeat");
            tableMapping.ColumnMappings.Add("Frequency", "Frequency");
            tableMapping.ColumnMappings.Add("IntervalType", "IntervalType");
            tableMapping.ColumnMappings.Add("Cost", "Cost");
            tableMapping.ColumnMappings.Add("CostContractor", "CostContractor");
            tableMapping.ColumnMappings.Add("CostFourStep", "CostFourStep");
            tableMapping.ColumnMappings.Add("Instructions", "Instructions");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("ManHours", "ManHours");
            tableMapping.ColumnMappings.Add("Compliments", "Compliments");
            tableMapping.ColumnMappings.Add("Complaints", "Complaints");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("Phone", "Phone");
            tableMapping.ColumnMappings.Add("Subdivision", "Subdivision");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("Active", "Active");
            tableMapping.ColumnMappings.Add("AccountNumber", "AccountNumber");
            tableMapping.ColumnMappings.Add("CostB", "CostB");
            tableMapping.ColumnMappings.Add("CostC", "CostC");
            tableMapping.ColumnMappings.Add("CrewKey", "CrewKey");
            tableMapping.ColumnMappings.Add("SelectPrint", "SelectPrint");
            tableMapping.ColumnMappings.Add("MaterialCost", "MaterialCost");
            tableMapping.ColumnMappings.Add("Revenue", "Revenue");
            tableMapping.ColumnMappings.Add("QBInvoiceID", "QBInvoiceID");
            tableMapping.ColumnMappings.Add("QBItemID", "QBItemID");
            tableMapping.ColumnMappings.Add("QBItemIDB", "QBItemIDB");
            tableMapping.ColumnMappings.Add("QBItemIDC", "QBItemIDC");
            tableMapping.ColumnMappings.Add("FourStepJob", "FourStepJob");
            tableMapping.ColumnMappings.Add("FourStepMat", "FourStepMat");
            tableMapping.ColumnMappings.Add("GutterRegion", "GutterRegion");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("FourStepJob1", "FourStepJob1");
            tableMapping.ColumnMappings.Add("FourStepJob2", "FourStepJob2");
            tableMapping.ColumnMappings.Add("FourStepJob3", "FourStepJob3");
            tableMapping.ColumnMappings.Add("FourStepJob4", "FourStepJob4");
            tableMapping.ColumnMappings.Add("CostD", "CostD");
            tableMapping.ColumnMappings.Add("QBItemIDD", "QBItemIDD");
            tableMapping.ColumnMappings.Add("Expr1", "Expr1");
            tableMapping.ColumnMappings.Add("QBDescription", "QBDescription");
            tableMapping.ColumnMappings.Add("QBDescriptionA", "QBDescriptionA");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM CustomerJob\r\nWHERE        (CustomerJobID = @Original_CustomerJobID) A" +
                "ND (@IsNull_Date = 1 AND Date IS NULL OR\r\n                         Date = @Origi" +
                "nal_Date) AND (@IsNull_Type = 1 AND Type IS NULL OR\r\n                         Ty" +
                "pe = @Original_Type) AND (@IsNull_Repeat = 1 AND Repeat IS NULL OR\r\n            " +
                "             Repeat = @Original_Repeat) AND (@IsNull_Frequency = 1 AND Frequency" +
                " IS NULL OR\r\n                         Frequency = @Original_Frequency) AND (@IsN" +
                "ull_IntervalType = 1 AND IntervalType IS NULL OR\r\n                         Inter" +
                "valType = @Original_IntervalType) AND (@IsNull_Cost = 1 AND Cost IS NULL OR\r\n   " +
                "                      Cost = @Original_Cost) AND (@IsNull_CostContractor = 1 AND" +
                " CostContractor IS NULL OR\r\n                         CostContractor = @Original_" +
                "CostContractor) AND (@IsNull_CostFourStep = 1 AND CostFourStep IS NULL OR\r\n     " +
                "                    CostFourStep = @Original_CostFourStep) AND (@IsNull_Instruct" +
                "ions = 1 AND Instructions IS NULL OR\r\n                         Instructions = @O" +
                "riginal_Instructions) AND (PropertyID = @Original_PropertyID) AND (@IsNull_Statu" +
                "s = 1 AND Status IS NULL OR\r\n                         Status = @Original_Status)" +
                " AND (@IsNull_ManHours = 1 AND ManHours IS NULL OR\r\n                         Man" +
                "Hours = @Original_ManHours) AND (@IsNull_Complaints = 1 AND Complaints IS NULL O" +
                "R\r\n                         Complaints = @Original_Complaints) AND (@IsNull_Comp" +
                "liments = 1 AND Compliments IS NULL OR\r\n                         Compliments = @" +
                "Original_Compliments) AND (@IsNull_CostB = 1 AND CostB IS NULL OR\r\n             " +
                "            CostB = @Original_CostB) AND (@IsNull_CostC = 1 AND CostC IS NULL OR" +
                "\r\n                         CostC = @Original_CostC) AND (@IsNull_CrewKey = 1 AND" +
                " CrewKey IS NULL OR\r\n                         CrewKey = @Original_CrewKey) AND (" +
                "@IsNull_SelectPrint = 1 AND SelectPrint IS NULL OR\r\n                         Sel" +
                "ectPrint = @Original_SelectPrint) AND (@IsNull_MaterialCost = 1 AND MaterialCost" +
                " IS NULL OR\r\n                         MaterialCost = @Original_MaterialCost) AND" +
                " (@IsNull_Revenue = 1 AND Revenue IS NULL OR\r\n                         Revenue =" +
                " @Original_Revenue) AND (@IsNull_QBInvoiceID = 1 AND QBInvoiceID IS NULL OR\r\n   " +
                "                      QBInvoiceID = @Original_QBInvoiceID) AND (@IsNull_QBItemID" +
                " = 1 AND QBItemID IS NULL OR\r\n                         QBItemID = @Original_QBIt" +
                "emID) AND (@IsNull_QBItemIDB = 1 AND QBItemIDB IS NULL OR\r\n                     " +
                "    QBItemIDB = @Original_QBItemIDB) AND (@IsNull_QBItemIDC = 1 AND QBItemIDC IS" +
                " NULL OR\r\n                         QBItemIDC = @Original_QBItemIDC) AND (@IsNull" +
                "_FourStepJob = 1 AND FourStepJob IS NULL OR\r\n                         FourStepJo" +
                "b = @Original_FourStepJob) AND (@IsNull_FourStepMat = 1 AND FourStepMat IS NULL " +
                "OR\r\n                         FourStepMat = @Original_FourStepMat) AND (@IsNull_Q" +
                "BDescription = 1 AND QBDescription IS NULL OR\r\n                         QBDescri" +
                "ption = @Original_QBDescription) AND (@IsNull_FourStepJob1 = 1 AND FourStepJob1 " +
                "IS NULL OR\r\n                         FourStepJob1 = @Original_FourStepJob1) AND " +
                "(@IsNull_FourStepJob2 = 1 AND FourStepJob2 IS NULL OR\r\n                         " +
                "FourStepJob2 = @Original_FourStepJob2) AND (@IsNull_FourStepJob3 = 1 AND FourSte" +
                "pJob3 IS NULL OR\r\n                         FourStepJob3 = @Original_FourStepJob3" +
                ") AND (@IsNull_FourStepJob4 = 1 AND FourStepJob4 IS NULL OR\r\n                   " +
                "      FourStepJob4 = @Original_FourStepJob4) AND (@IsNull_QBDescriptionA = 1 AND" +
                " QBDescriptionA IS NULL OR\r\n                         QBDescriptionA = @Original_" +
                "QBDescriptionA) AND (@IsNull_CostD = 1 AND CostD IS NULL OR\r\n                   " +
                "      CostD = @Original_CostD) AND (@IsNull_QBItemIDD = 1 AND QBItemIDD IS NULL " +
                "OR\r\n                         QBItemIDD = @Original_QBItemIDD)";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerJobID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Type", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Repeat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Repeat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Repeat", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "Repeat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Frequency", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Frequency", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IntervalType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IntervalType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IntervalType", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "IntervalType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Cost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Cost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostContractor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostContractor", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostFourStep", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostFourStep", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Instructions", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Instructions", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PropertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ManHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ManHours", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Complaints", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Complaints", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Compliments", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Compliments", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostB", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostC", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CrewKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CrewKey", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SelectPrint", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelectPrint", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MaterialCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MaterialCost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Revenue", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Revenue", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBInvoiceID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBInvoiceID", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemID", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemIDB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemIDB", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemIDC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemIDC", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepMat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepMat", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBDescription", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBDescription", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob1", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob2", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob3", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob4", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBDescriptionA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBDescriptionA", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostD", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemIDD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemIDD", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO CustomerJob
                         (Date, Type, Repeat, Frequency, IntervalType, Cost, CostContractor, CostFourStep, Instructions, PropertyID, Status, ManHours, Complaints, Compliments, CostB, CostC, CrewKey, SelectPrint, MaterialCost, 
                         Revenue, QBInvoiceID, QBItemID, QBItemIDB, QBItemIDC, FourStepJob, FourStepMat, QBDescription, FourStepJob1, FourStepJob2, FourStepJob3, FourStepJob4, QBDescriptionA, CostD, QBItemIDD)
VALUES        (@Date,@Type,@Repeat,@Frequency,@IntervalType,@Cost,@CostContractor,@CostFourStep,@Instructions,@PropertyID,@Status,@ManHours,@Complaints,@Compliments,@CostB,@CostC,@CrewKey,@SelectPrint,@MaterialCost,@Revenue,@QBInvoiceID,@QBItemID,@QBItemIDB,@QBItemIDC,@FourStepJob,@FourStepMat,@QBDescription,@FourStepJob1,@FourStepJob2,@FourStepJob3,@FourStepJob4,@QBDescriptionA,@CostD,@QBItemIDD)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Repeat", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "Repeat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Frequency", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IntervalType", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "IntervalType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostContractor", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostFourStep", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Instructions", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ManHours", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Complaints", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Compliments", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostB", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostC", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CrewKey", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectPrint", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaterialCost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Revenue", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBInvoiceID", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemID", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemIDB", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemIDC", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepMat", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBDescription", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob1", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob2", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob3", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob4", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBDescriptionA", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostD", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemIDD", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE       CustomerJob\r\nSET                Date = @Date, Type = @Type, Repeat =" +
                " @Repeat, Frequency = @Frequency, IntervalType = @IntervalType, Cost = @Cost, Co" +
                "stContractor = @CostContractor, CostFourStep = @CostFourStep, \r\n                " +
                "         Instructions = @Instructions, PropertyID = @PropertyID, Status = @Statu" +
                "s, ManHours = @ManHours, Complaints = @Complaints, Compliments = @Compliments, C" +
                "ostB = @CostB, CostC = @CostC, \r\n                         CrewKey = @CrewKey, Se" +
                "lectPrint = @SelectPrint, MaterialCost = @MaterialCost, Revenue = @Revenue, QBIn" +
                "voiceID = @QBInvoiceID, QBItemID = @QBItemID, QBItemIDB = @QBItemIDB, \r\n        " +
                "                 QBItemIDC = @QBItemIDC, FourStepJob = @FourStepJob, FourStepMat" +
                " = @FourStepMat, QBDescription = @QBDescription, FourStepJob1 = @FourStepJob1, F" +
                "ourStepJob2 = @FourStepJob2, \r\n                         FourStepJob3 = @FourStep" +
                "Job3, FourStepJob4 = @FourStepJob4, QBDescriptionA = @QBDescriptionA, CostD = @C" +
                "ostD, QBItemIDD = @QBItemIDD\r\nWHERE        (CustomerJobID = @Original_CustomerJo" +
                "bID) AND (@IsNull_Date = 1 AND Date IS NULL OR\r\n                         Date = " +
                "@Original_Date) AND (@IsNull_Type = 1 AND Type IS NULL OR\r\n                     " +
                "    Type = @Original_Type) AND (@IsNull_Repeat = 1 AND Repeat IS NULL OR\r\n      " +
                "                   Repeat = @Original_Repeat) AND (@IsNull_Frequency = 1 AND Fre" +
                "quency IS NULL OR\r\n                         Frequency = @Original_Frequency) AND" +
                " (@IsNull_IntervalType = 1 AND IntervalType IS NULL OR\r\n                        " +
                " IntervalType = @Original_IntervalType) AND (@IsNull_Cost = 1 AND Cost IS NULL O" +
                "R\r\n                         Cost = @Original_Cost) AND (@IsNull_CostContractor =" +
                " 1 AND CostContractor IS NULL OR\r\n                         CostContractor = @Ori" +
                "ginal_CostContractor) AND (@IsNull_CostFourStep = 1 AND CostFourStep IS NULL OR\r" +
                "\n                         CostFourStep = @Original_CostFourStep) AND (@IsNull_In" +
                "structions = 1 AND Instructions IS NULL OR\r\n                         Instruction" +
                "s = @Original_Instructions) AND (PropertyID = @Original_PropertyID) AND (@IsNull" +
                "_Status = 1 AND Status IS NULL OR\r\n                         Status = @Original_S" +
                "tatus) AND (@IsNull_ManHours = 1 AND ManHours IS NULL OR\r\n                      " +
                "   ManHours = @Original_ManHours) AND (@IsNull_Complaints = 1 AND Complaints IS " +
                "NULL OR\r\n                         Complaints = @Original_Complaints) AND (@IsNul" +
                "l_Compliments = 1 AND Compliments IS NULL OR\r\n                         Complimen" +
                "ts = @Original_Compliments) AND (@IsNull_CostB = 1 AND CostB IS NULL OR\r\n       " +
                "                  CostB = @Original_CostB) AND (@IsNull_CostC = 1 AND CostC IS N" +
                "ULL OR\r\n                         CostC = @Original_CostC) AND (@IsNull_CrewKey =" +
                " 1 AND CrewKey IS NULL OR\r\n                         CrewKey = @Original_CrewKey)" +
                " AND (@IsNull_SelectPrint = 1 AND SelectPrint IS NULL OR\r\n                      " +
                "   SelectPrint = @Original_SelectPrint) AND (@IsNull_MaterialCost = 1 AND Materi" +
                "alCost IS NULL OR\r\n                         MaterialCost = @Original_MaterialCos" +
                "t) AND (@IsNull_Revenue = 1 AND Revenue IS NULL OR\r\n                         Rev" +
                "enue = @Original_Revenue) AND (@IsNull_QBInvoiceID = 1 AND QBInvoiceID IS NULL O" +
                "R\r\n                         QBInvoiceID = @Original_QBInvoiceID) AND (@IsNull_QB" +
                "ItemID = 1 AND QBItemID IS NULL OR\r\n                         QBItemID = @Origina" +
                "l_QBItemID) AND (@IsNull_QBItemIDB = 1 AND QBItemIDB IS NULL OR\r\n               " +
                "          QBItemIDB = @Original_QBItemIDB) AND (@IsNull_QBItemIDC = 1 AND QBItem" +
                "IDC IS NULL OR\r\n                         QBItemIDC = @Original_QBItemIDC) AND (@" +
                "IsNull_FourStepJob = 1 AND FourStepJob IS NULL OR\r\n                         Four" +
                "StepJob = @Original_FourStepJob) AND (@IsNull_FourStepMat = 1 AND FourStepMat IS" +
                " NULL OR\r\n                         FourStepMat = @Original_FourStepMat) AND (@Is" +
                "Null_QBDescription = 1 AND QBDescription IS NULL OR\r\n                         QB" +
                "Description = @Original_QBDescription) AND (@IsNull_FourStepJob1 = 1 AND FourSte" +
                "pJob1 IS NULL OR\r\n                         FourStepJob1 = @Original_FourStepJob1" +
                ") AND (@IsNull_FourStepJob2 = 1 AND FourStepJob2 IS NULL OR\r\n                   " +
                "      FourStepJob2 = @Original_FourStepJob2) AND (@IsNull_FourStepJob3 = 1 AND F" +
                "ourStepJob3 IS NULL OR\r\n                         FourStepJob3 = @Original_FourSt" +
                "epJob3) AND (@IsNull_FourStepJob4 = 1 AND FourStepJob4 IS NULL OR\r\n             " +
                "            FourStepJob4 = @Original_FourStepJob4) AND (@IsNull_QBDescriptionA =" +
                " 1 AND QBDescriptionA IS NULL OR\r\n                         QBDescriptionA = @Ori" +
                "ginal_QBDescriptionA) AND (@IsNull_CostD = 1 AND CostD IS NULL OR\r\n             " +
                "            CostD = @Original_CostD) AND (@IsNull_QBItemIDD = 1 AND QBItemIDD IS" +
                " NULL OR\r\n                         QBItemIDD = @Original_QBItemIDD)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Repeat", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "Repeat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Frequency", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IntervalType", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "IntervalType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostContractor", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostFourStep", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Instructions", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PropertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ManHours", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Complaints", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Compliments", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostB", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostC", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CrewKey", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectPrint", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaterialCost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Revenue", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBInvoiceID", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemID", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemIDB", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemIDC", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepMat", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBDescription", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob1", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob2", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob3", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FourStepJob4", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBDescriptionA", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostD", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBItemIDD", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerJobID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Type", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Repeat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Repeat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Repeat", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "Repeat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Frequency", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Frequency", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IntervalType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IntervalType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IntervalType", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "IntervalType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Cost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Cost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostContractor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostContractor", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostContractor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostFourStep", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostFourStep", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostFourStep", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Instructions", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Instructions", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, "Instructions", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PropertyID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PropertyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ManHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ManHours", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Complaints", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Complaints", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "Complaints", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Compliments", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Compliments", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "Compliments", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostB", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostC", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CrewKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CrewKey", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CrewKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SelectPrint", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelectPrint", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MaterialCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MaterialCost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Revenue", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Revenue", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBInvoiceID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBInvoiceID", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemID", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemIDB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemIDB", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemIDC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemIDC", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepMat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepMat", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepMat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBDescription", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBDescription", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob1", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob2", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob3", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FourStepJob4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FourStepJob4", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "FourStepJob4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBDescriptionA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBDescriptionA", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "QBDescriptionA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostD", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CostD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBItemIDD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBItemIDD", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "QBItemIDD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[14];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        CustomerJob.CustomerJobID, CustomerJob.PropertyID, CustomerJob.Date, CustomerJob.Type, CustomerJob.Repeat, CustomerJob.Frequency, CustomerJob.IntervalType, CustomerJob.Cost, CustomerJob.CostB, 
                         CustomerJob.CostC, CustomerJob.CostD, CustomerJob.CrewKey, CustomerJob.CostContractor, CustomerJob.CostFourStep, CustomerJob.Instructions, CustomerJob.Status, CustomerJob.ManHours, 
                         CustomerJob.Compliments, CustomerJob.Complaints, Property.CustomerID, Property.Description, Property.Address, Property.City, Property.State, Property.Zip, Property.Phone, Property.Subdivision, 
                         Property.Active, Property.AccountNumber, Customer.LastName, Customer.FirstName, CustomerJob.CrewKey AS Expr1, CustomerJob.SelectPrint, CustomerJob.MaterialCost, CustomerJob.Revenue, 
                         CustomerJob.QBInvoiceID, CustomerJob.QBItemID, CustomerJob.QBItemIDB, CustomerJob.QBItemIDC, CustomerJob.QBItemIDD, CustomerJob.FourStepJob, CustomerJob.FourStepMat, Property.GutterRegion, 
                         CustomerJob.Notes, CustomerJob.FourStepJob1, CustomerJob.FourStepJob2, CustomerJob.FourStepJob3, CustomerJob.FourStepJob4, CustomerJob.QBDescription, CustomerJob.QBDescriptionA
FROM            Customer INNER JOIN
                         Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                         CustomerJob ON Property.PropertyID = CustomerJob.PropertyID";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE    CustomerJob\r\nSET              SelectPrint = \'False\'";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "DELETE FROM CustomerJob\r\nWhere CustomerJobID =@customerjob";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@customerjob", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT        CustomerJob.CustomerJobID, CustomerJob.PropertyID, CustomerJob.Date, CustomerJob.Type, CustomerJob.Repeat, CustomerJob.Frequency, 
                         CustomerJob.IntervalType, CustomerJob.Cost, CustomerJob.CostB, CustomerJob.CostC, CustomerJob.CrewKey, CustomerJob.SelectPrint, 
                         CustomerJob.CostContractor, CustomerJob.CostFourStep, CustomerJob.Instructions, CustomerJob.Status, CustomerJob.ManHours, CustomerJob.Compliments, 
                         CustomerJob.Complaints, Property.PropertyID AS Expr1, Property.CustomerID, Property.Description, Property.Address, Property.City, Property.State, Property.Zip, 
                         Property.Phone, Property.Subdivision, Property.Active, Property.AccountNumber, Customer.LastName, Customer.FirstName, Employee.FirstName AS Expr2, 
                         Employee.LastName AS Expr3, Employee.EmployeeID, CustomerJob.MaterialCost, CustomerJob.Revenue
FROM            Customer INNER JOIN
                         Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                         CustomerJob ON Property.PropertyID = CustomerJob.PropertyID INNER JOIN
                         Crew ON CustomerJob.CustomerJobID = Crew.CustomerJobID AND CustomerJob.CustomerJobID = Crew.CustomerJobID INNER JOIN
                         Employee ON Crew.EmployeeId = Employee.EmployeeID
WHERE        (Employee.EmployeeID = @employeeid)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@employeeid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.GetFourStepRouteOrder";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "SELECT        CustomerJob.CustomerJobID, CustomerJob.PropertyID, CustomerJob.Date" +
                ", CustomerJob.Type, CustomerJob.Repeat, CustomerJob.Frequency, \r\n               " +
                "          CustomerJob.IntervalType, CustomerJob.Cost, CustomerJob.CostB, Custome" +
                "rJob.CostC, CustomerJob.CrewKey, CustomerJob.CostContractor, \r\n                 " +
                "        CustomerJob.CostFourStep, CustomerJob.Instructions, CustomerJob.Status, " +
                "CustomerJob.ManHours, CustomerJob.Compliments, CustomerJob.Complaints, \r\n       " +
                "                  Property.CustomerID, Property.Description, Property.Address, P" +
                "roperty.City, Property.State, Property.Zip, Property.Phone, Property.Subdivision" +
                ", Property.Active, \r\n                         Property.AccountNumber, Customer.L" +
                "astName, Customer.FirstName, ISNULL(Route.RouteOrder, 0) AS RouteOrder, ISNULL(R" +
                "oute.RouteName, \'No Route\') \r\n                         AS RouteName, CustomerJob" +
                ".CrewKey AS Expr1, CustomerJob.SelectPrint, CustomerJob.MaterialCost, CustomerJo" +
                "b.Revenue, CustomerJob.QBInvoiceID, \r\n                         CustomerJob.QBIte" +
                "mID, CustomerJob.QBItemIDB, CustomerJob.QBItemIDC, CustomerJob.FourStepJob, Cust" +
                "omerJob.FourStepMat\r\nFROM            Customer INNER JOIN\r\n                      " +
                "   Property ON Customer.CustomerID = Property.CustomerID INNER JOIN\r\n           " +
                "              CustomerJob ON Property.PropertyID = CustomerJob.PropertyID LEFT O" +
                "UTER JOIN\r\n                         Route ON Route.PropertyID = CustomerJob.Prop" +
                "ertyID\r\nWHERE        (CustomerJob.CustomerJobID = @jobid) AND (Route.RouteName =" +
                " \'Main\')";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@jobid", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = @"SELECT        CustomerJob.CustomerJobID, CustomerJob.PropertyID, CustomerJob.Date, CustomerJob.Type, CustomerJob.Repeat, CustomerJob.Frequency, 
                         CustomerJob.IntervalType, CustomerJob.Cost, CustomerJob.CostB, CustomerJob.CostC, CustomerJob.CrewKey, CustomerJob.CostContractor, 
                         CustomerJob.CostFourStep, CustomerJob.Instructions, CustomerJob.Status, CustomerJob.ManHours, CustomerJob.Compliments, CustomerJob.Complaints, 
                         Property.CustomerID, Property.Description, Property.Address, Property.City, Property.State, Property.Zip, Property.Phone, Property.Subdivision, Property.Active, 
                         Property.AccountNumber, Customer.LastName, Customer.FirstName, CustomerJob.CrewKey AS Expr1, CustomerJob.SelectPrint, CustomerJob.MaterialCost, 
                         CustomerJob.Revenue, CustomerJob.QBInvoiceID, CustomerJob.QBItemID, CustomerJob.QBItemIDB, CustomerJob.QBItemIDC, CustomerJob.FourStepJob, 
                         CustomerJob.FourStepMat
FROM            Customer INNER JOIN
                         Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                         CustomerJob ON Property.PropertyID = CustomerJob.PropertyID
WHERE        (CustomerJob.CustomerJobID = @jobid)";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@jobid", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "dbo.GetMainRouteOrder";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = @"SELECT CustomerJob.CustomerJobID, CustomerJob.PropertyID, CustomerJob.Date, CustomerJob.Type, CustomerJob.Repeat, CustomerJob.Frequency, 
                 CustomerJob.IntervalType, CustomerJob.Cost, CustomerJob.CostB, CustomerJob.CostC, CustomerJob.CrewKey, CustomerJob.CostContractor, 
                 CustomerJob.CostFourStep, CustomerJob.Instructions, CustomerJob.Status, CustomerJob.ManHours, CustomerJob.Compliments, CustomerJob.Complaints, 
                 Property.CustomerID, Property.Description, Property.Address, Property.City, Property.State, Property.Zip, Property.Phone, Property.Subdivision, Property.Active, 
                 Property.AccountNumber, Customer.LastName, Customer.FirstName, ISNULL(Route.RouteOrder, 0) AS RouteOrder, Route.RouteName, 
                 CustomerJob.CrewKey AS Expr1, CustomerJob.SelectPrint, Property.GroupType, CustomerJob.MaterialCost, CustomerJob.Revenue, 
                 CustomerJob.FourStepMat
FROM    Customer INNER JOIN
                 Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                 CustomerJob ON Property.PropertyID = CustomerJob.PropertyID LEFT OUTER JOIN
                 Route ON Route.PropertyID = CustomerJob.PropertyID
WHERE  (CustomerJob.SelectPrint = 'True') AND ((Route.RouteName = @route) OR  (Route.RouteName IS NULL))
ORDER BY Route.RouteName DESC, RouteOrder";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@route", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = @"SELECT CustomerJob.CustomerJobID, CustomerJob.PropertyID, CustomerJob.Date, CustomerJob.Type, CustomerJob.Repeat, CustomerJob.Frequency, 
                 CustomerJob.IntervalType, CustomerJob.Cost, CustomerJob.CostB, CustomerJob.CostC, CustomerJob.CrewKey, CustomerJob.CostContractor, 
                 CustomerJob.CostFourStep, CustomerJob.Instructions, CustomerJob.Status, CustomerJob.ManHours, CustomerJob.Compliments, CustomerJob.Complaints, 
                 Property.CustomerID, Property.Description, Property.Address, Property.City, Property.State, Property.Zip, Property.Phone, Property.Subdivision, Property.Active, 
                 Property.AccountNumber, Customer.LastName, Customer.FirstName, ISNULL(Route.RouteOrder, 0) AS RouteOrder, Route.RouteName, 
                 CustomerJob.CrewKey AS Expr1, CustomerJob.SelectPrint, Property.GroupType, CustomerJob.MaterialCost, CustomerJob.Revenue, 
                 CustomerJob.FourStepMat
FROM    Customer INNER JOIN
                 Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                 CustomerJob ON Property.PropertyID = CustomerJob.PropertyID LEFT OUTER JOIN
                 Route ON Route.PropertyID = CustomerJob.PropertyID
WHERE (CustomerJob.SelectPrint = 'True') AND (Route.RouteName = @route OR
                 Route.RouteName IS NULL)
ORDER BY Route.RouteName DESC, RouteOrder";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@route", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = @"SELECT     CustomerJob.CustomerJobID, CustomerJob.PropertyID, CustomerJob.Date, CustomerJob.Type, CustomerJob.Repeat, CustomerJob.Frequency, 
                      CustomerJob.IntervalType, CustomerJob.Cost, CustomerJob.CostB, CustomerJob.CostC, CustomerJob.CrewKey, CustomerJob.SelectPrint, 
                      CustomerJob.CostContractor, CustomerJob.CostFourStep, CustomerJob.Instructions, CustomerJob.Status, CustomerJob.ManHours, 
                      CustomerJob.Compliments, CustomerJob.Complaints, Property.PropertyID AS Expr2, Property.CustomerID, Property.Description, Property.Address, 
                      Property.City, Property.State, Property.Zip, Property.Phone, Property.Subdivision, Property.Active, Property.AccountNumber, Customer.LastName, 
                      Customer.FirstName, ISNULL(Route.RouteOrder, 0) AS Expr1, Property.GroupType, CustomerJob.MaterialCost, CustomerJob.Revenue
FROM         Customer INNER JOIN
                      Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                      CustomerJob ON Property.PropertyID = CustomerJob.PropertyID LEFT OUTER JOIN
                      Route ON Route.PropertyID = CustomerJob.PropertyID";
            this._commandCollection[10].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[11] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[11].Connection = this.Connection;
            this._commandCollection[11].CommandText = @"SELECT     CustomerJob.CustomerJobID, CustomerJob.PropertyID, CustomerJob.Date, CustomerJob.Type, CustomerJob.Repeat, CustomerJob.Frequency, 
                      CustomerJob.IntervalType, CustomerJob.Cost, CustomerJob.CostB, CustomerJob.CostC, CustomerJob.CrewKey, CustomerJob.SelectPrint, 
                      CustomerJob.CostContractor, CustomerJob.CostFourStep, CustomerJob.Instructions, CustomerJob.Status, CustomerJob.ManHours, 
                      CustomerJob.Compliments, CustomerJob.Complaints, Property.PropertyID AS Expr2, Property.CustomerID, Property.Description, Property.Address, 
                      Property.City, Property.State, Property.Zip, Property.Phone, Property.Subdivision, Property.Active, Property.AccountNumber, Customer.LastName, 
                      Customer.FirstName, ISNULL(Route.RouteOrder, 0) AS Expr1, Property.GroupType, CustomerJob.MaterialCost, CustomerJob.Revenue
FROM         Customer INNER JOIN
                      Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                      CustomerJob ON Property.PropertyID = CustomerJob.PropertyID LEFT OUTER JOIN
                      Route ON Route.PropertyID = CustomerJob.PropertyID AND Route.RouteName = 'FourStep'";
            this._commandCollection[11].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[12] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[12].Connection = this.Connection;
            this._commandCollection[12].CommandText = "UPDATE       CustomerJob\r\nSET                SelectPrint= @selectprint\r\nWHERE    " +
                "    (CustomerJobID = @jobid)";
            this._commandCollection[12].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@selectprint", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "SelectPrint", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@jobid", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[13] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[13].Connection = this.Connection;
            this._commandCollection[13].CommandText = "UPDATE CustomerJob\r\nSET         Status = @status, ManHours = @manhrs, MaterialCos" +
                "t = @matcost, Revenue = @revenue\r\nWHERE (CustomerJobID = @jobid)";
            this._commandCollection[13].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@manhrs", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ManHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@matcost", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@revenue", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@jobid", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.CustPropertyJobsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.CustPropertyJobsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.CustPropertyJobsDataTable dataTable = new MMSDataSet.CustPropertyJobsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByEmployeeID(MMSDataSet.CustPropertyJobsDataTable dataTable, int employeeid) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(employeeid));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustPropertyJobsDataTable GetDataByEmployeeID(int employeeid) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(employeeid));
            MMSDataSet.CustPropertyJobsDataTable dataTable = new MMSDataSet.CustPropertyJobsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByFourStepRotueOrder(MMSDataSet.CustPropertyJobsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustPropertyJobsDataTable GetDataByFourStepRotueOrder() {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            MMSDataSet.CustPropertyJobsDataTable dataTable = new MMSDataSet.CustPropertyJobsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByJobID(MMSDataSet.CustPropertyJobsDataTable dataTable, long jobid) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(jobid));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustPropertyJobsDataTable GetDataBy4(long jobid) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(jobid));
            MMSDataSet.CustPropertyJobsDataTable dataTable = new MMSDataSet.CustPropertyJobsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByJobID2(MMSDataSet.CustPropertyJobsDataTable dataTable, long jobid) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(jobid));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustPropertyJobsDataTable GetDataBy5(long jobid) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(jobid));
            MMSDataSet.CustPropertyJobsDataTable dataTable = new MMSDataSet.CustPropertyJobsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByMainRouteOrder(MMSDataSet.CustPropertyJobsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustPropertyJobsDataTable GetDataByMainRouteOrder() {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            MMSDataSet.CustPropertyJobsDataTable dataTable = new MMSDataSet.CustPropertyJobsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySelectPrint(MMSDataSet.CustPropertyJobsDataTable dataTable, string route) {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            if ((route == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(route));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustPropertyJobsDataTable GetDataBySelectPrint(string route) {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            if ((route == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(route));
            }
            MMSDataSet.CustPropertyJobsDataTable dataTable = new MMSDataSet.CustPropertyJobsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByStatus(MMSDataSet.CustPropertyJobsDataTable dataTable, string route) {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            if ((route == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(route));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustPropertyJobsDataTable GetDataByStatus(string route) {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            if ((route == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(route));
            }
            MMSDataSet.CustPropertyJobsDataTable dataTable = new MMSDataSet.CustPropertyJobsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int Test2FillByRoute(MMSDataSet.CustPropertyJobsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[10];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustPropertyJobsDataTable Test2GetDataBy() {
            this.Adapter.SelectCommand = this.CommandCollection[10];
            MMSDataSet.CustPropertyJobsDataTable dataTable = new MMSDataSet.CustPropertyJobsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int TestFillByRoute(MMSDataSet.CustPropertyJobsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[11];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustPropertyJobsDataTable TestGetDataByRoute() {
            this.Adapter.SelectCommand = this.CommandCollection[11];
            MMSDataSet.CustPropertyJobsDataTable dataTable = new MMSDataSet.CustPropertyJobsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.CustPropertyJobsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CustPropertyJobs");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int ClearSelectPrint() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteJobQuery(int customerjob) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((int)(customerjob));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateSelectPrint(global::System.Nullable<bool> selectprint, long jobid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[12];
            if ((selectprint.HasValue == true)) {
                command.Parameters[0].Value = ((bool)(selectprint.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            command.Parameters[1].Value = ((long)(jobid));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStatusQuery(string status, global::System.Nullable<float> manhrs, global::System.Nullable<decimal> matcost, global::System.Nullable<decimal> revenue, long jobid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[13];
            if ((status == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(status));
            }
            if ((manhrs.HasValue == true)) {
                command.Parameters[1].Value = ((float)(manhrs.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((matcost.HasValue == true)) {
                command.Parameters[2].Value = ((decimal)(matcost.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((revenue.HasValue == true)) {
                command.Parameters[3].Value = ((decimal)(revenue.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            command.Parameters[4].Value = ((long)(jobid));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CrewNameTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CrewNameTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CrewName";
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("CustomerJobID", "CustomerJobID");
            tableMapping.ColumnMappings.Add("EmployeeId", "EmployeeId");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        Employee.FirstName, Employee.LastName, Crew.CustomerJobID, Crew.EmployeeId
FROM            Crew INNER JOIN
                         Employee ON Crew.EmployeeId = Employee.EmployeeID INNER JOIN
                         CustomerJob ON Crew.CustomerJobID = CustomerJob.CustomerJobID";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM Crew\r\nWHERE        (EmployeeId = @employeeid) AND (CustomerJobID = @c" +
                "ustomerjobid)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@employeeid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@customerjobid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "DELETE FROM Crew\r\nWHERE   (CustomerJobID = @customerjobid)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@customerjobid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT        Employee.FirstName, Employee.LastName, Employee.EmployeeID
FROM            Crew INNER JOIN
                         Employee ON Crew.EmployeeId = Employee.EmployeeID INNER JOIN
                         CustomerJob ON Crew.CustomerJobID = CustomerJob.CustomerJobID
WHERE        (Crew.CustomerJobID = @customerjobid)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@customerjobid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerJobID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.CrewNameDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.CrewNameDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.CrewNameDataTable dataTable = new MMSDataSet.CrewNameDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(MMSDataSet.CrewNameDataTable dataTable, global::System.Nullable<int> customerjobid) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((customerjobid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(customerjobid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CrewNameDataTable GetDataBy11(global::System.Nullable<int> customerjobid) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((customerjobid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(customerjobid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            MMSDataSet.CrewNameDataTable dataTable = new MMSDataSet.CrewNameDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteCrewNameQuery(global::System.Nullable<int> employeeid, global::System.Nullable<int> customerjobid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((employeeid.HasValue == true)) {
                command.Parameters[0].Value = ((int)(employeeid.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((customerjobid.HasValue == true)) {
                command.Parameters[1].Value = ((int)(customerjobid.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteJobIDQuery(global::System.Nullable<int> customerjobid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((customerjobid.HasValue == true)) {
                command.Parameters[0].Value = ((int)(customerjobid.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RouteListTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RouteListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "RouteList";
            tableMapping.ColumnMappings.Add("RouteNameID", "RouteNameID");
            tableMapping.ColumnMappings.Add("RouteName", "RouteName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RouteList] WHERE (([RouteNameID] = @Original_RouteNameID) AND " +
                "((@IsNull_RouteName = 1 AND [RouteName] IS NULL) OR ([RouteName] = @Original_Rou" +
                "teName)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RouteNameID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RouteNameID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RouteName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RouteName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RouteList] ([RouteName]) VALUES (@RouteName);\r\nSELECT RouteNam" +
                "eID, RouteName FROM RouteList WHERE (RouteNameID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[RouteList] SET [RouteName] = @RouteName WHERE (([RouteNameID] = @Original_RouteNameID) AND ((@IsNull_RouteName = 1 AND [RouteName] IS NULL) OR ([RouteName] = @Original_RouteName)));
SELECT RouteNameID, RouteName FROM RouteList WHERE (RouteNameID = @RouteNameID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RouteNameID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RouteNameID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RouteName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RouteName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteNameID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RouteNameID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT RouteNameID, RouteName FROM dbo.RouteList";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM RouteList\r\nWHERE     (RouteNameID = @RouteNameID)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteNameID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RouteNameID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO RouteList\r\n                         (RouteName)\r\nVALUES        (@Rout" +
                "eName); \r\nSELECT RouteNameID, RouteName FROM RouteList WHERE (RouteNameID = SCOP" +
                "E_IDENTITY())";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteName", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.RouteListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.RouteListDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.RouteListDataTable dataTable = new MMSDataSet.RouteListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.RouteListDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "RouteList");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_RouteNameID, string Original_RouteName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_RouteNameID));
            if ((Original_RouteName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_RouteName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string RouteName) {
            if ((RouteName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(RouteName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string RouteName, int Original_RouteNameID, string Original_RouteName, int RouteNameID) {
            if ((RouteName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(RouteName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_RouteNameID));
            if ((Original_RouteName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_RouteName));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(RouteNameID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string RouteName, int Original_RouteNameID, string Original_RouteName) {
            return this.Update(RouteName, Original_RouteNameID, Original_RouteName, Original_RouteNameID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteRoute(int RouteNameID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(RouteNameID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertRoute(string RouteName) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((RouteName == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(RouteName));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CustomerTypeListTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustomerTypeListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CustomerTypeList";
            tableMapping.ColumnMappings.Add("CustomerTypeID", "CustomerTypeID");
            tableMapping.ColumnMappings.Add("CustomerType", "CustomerType");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CustomerTypeList] WHERE (([CustomerTypeID] = @Original_Custome" +
                "rTypeID) AND ([CustomerType] = @Original_CustomerType))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerTypeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CustomerTypeList] ([CustomerType]) VALUES (@CustomerType);\r\nSE" +
                "LECT CustomerTypeID, CustomerType FROM CustomerTypeList WHERE (CustomerTypeID = " +
                "SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CustomerTypeList] SET [CustomerType] = @CustomerType WHERE (([CustomerTypeID] = @Original_CustomerTypeID) AND ([CustomerType] = @Original_CustomerType));
SELECT CustomerTypeID, CustomerType FROM CustomerTypeList WHERE (CustomerTypeID = @CustomerTypeID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerTypeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerTypeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerTypeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CustomerTypeID, CustomerType FROM dbo.CustomerTypeList";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [dbo].[CustomerTypeList] WHERE ([CustomerTypeID] = @CustomerTypeID) ";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerTypeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerTypeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO [dbo].[CustomerTypeList] ([CustomerType]) VALUES (@CustomerType);\r\nSE" +
                "LECT CustomerTypeID, CustomerType FROM CustomerTypeList WHERE (CustomerTypeID = " +
                "SCOPE_IDENTITY())";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.CustomerTypeListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.CustomerTypeListDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.CustomerTypeListDataTable dataTable = new MMSDataSet.CustomerTypeListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.CustomerTypeListDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CustomerTypeList");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CustomerTypeID, string Original_CustomerType) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CustomerTypeID));
            if ((Original_CustomerType == null)) {
                throw new global::System.ArgumentNullException("Original_CustomerType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CustomerType));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CustomerType) {
            if ((CustomerType == null)) {
                throw new global::System.ArgumentNullException("CustomerType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CustomerType));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CustomerType, int Original_CustomerTypeID, string Original_CustomerType, int CustomerTypeID) {
            if ((CustomerType == null)) {
                throw new global::System.ArgumentNullException("CustomerType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CustomerType));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_CustomerTypeID));
            if ((Original_CustomerType == null)) {
                throw new global::System.ArgumentNullException("Original_CustomerType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_CustomerType));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(CustomerTypeID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CustomerType, int Original_CustomerTypeID, string Original_CustomerType) {
            return this.Update(CustomerType, Original_CustomerTypeID, Original_CustomerType, Original_CustomerTypeID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteCustomerType(int CustomerTypeID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(CustomerTypeID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertCustomerType(string CustomerType) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((CustomerType == null)) {
                throw new global::System.ArgumentNullException("CustomerType");
            }
            else {
                command.Parameters[0].Value = ((string)(CustomerType));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class JobStatusListTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JobStatusListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "JobStatusList";
            tableMapping.ColumnMappings.Add("JobStatusID", "JobStatusID");
            tableMapping.ColumnMappings.Add("JobStatus", "JobStatus");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[JobStatusList] WHERE (([JobStatusID] = @Original_JobStatusID) " +
                "AND ([JobStatus] = @Original_JobStatus))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JobStatusID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobStatusID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JobStatus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobStatus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[JobStatusList] ([JobStatus]) VALUES (@JobStatus);\r\nSELECT JobS" +
                "tatusID, JobStatus FROM JobStatusList WHERE (JobStatusID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JobStatus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[JobStatusList] SET [JobStatus] = @JobStatus WHERE (([JobStatusID] =" +
                " @Original_JobStatusID) AND ([JobStatus] = @Original_JobStatus));\r\nSELECT JobSta" +
                "tusID, JobStatus FROM JobStatusList WHERE (JobStatusID = @JobStatusID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JobStatus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JobStatusID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobStatusID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JobStatus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobStatus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JobStatusID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "JobStatusID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT JobStatusID, JobStatus FROM dbo.JobStatusList";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM JobStatusList\r\nWHERE     (JobStatusID = @JobStatusID)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JobStatusID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "JobStatusID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO JobStatusList\r\n                      (JobStatus)\r\nVALUES     (@JobSta" +
                "tus); \r\nSELECT JobStatusID, JobStatus FROM JobStatusList WHERE (JobStatusID = SC" +
                "OPE_IDENTITY())";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JobStatus", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "JobStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.JobStatusListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.JobStatusListDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.JobStatusListDataTable dataTable = new MMSDataSet.JobStatusListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.JobStatusListDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "JobStatusList");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_JobStatusID, string Original_JobStatus) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_JobStatusID));
            if ((Original_JobStatus == null)) {
                throw new global::System.ArgumentNullException("Original_JobStatus");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_JobStatus));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string JobStatus) {
            if ((JobStatus == null)) {
                throw new global::System.ArgumentNullException("JobStatus");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(JobStatus));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string JobStatus, int Original_JobStatusID, string Original_JobStatus, int JobStatusID) {
            if ((JobStatus == null)) {
                throw new global::System.ArgumentNullException("JobStatus");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(JobStatus));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_JobStatusID));
            if ((Original_JobStatus == null)) {
                throw new global::System.ArgumentNullException("Original_JobStatus");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_JobStatus));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(JobStatusID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string JobStatus, int Original_JobStatusID, string Original_JobStatus) {
            return this.Update(JobStatus, Original_JobStatusID, Original_JobStatus, Original_JobStatusID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteJobStatus(int JobStatusID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(JobStatusID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertJobStatus(string JobStatus) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((JobStatus == null)) {
                throw new global::System.ArgumentNullException("JobStatus");
            }
            else {
                command.Parameters[0].Value = ((string)(JobStatus));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RouteViewTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RouteViewTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "RouteView";
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("Subdivision", "Subdivision");
            tableMapping.ColumnMappings.Add("RouteID", "RouteID");
            tableMapping.ColumnMappings.Add("RouteName", "RouteName");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("PropertyID", "PropertyID");
            tableMapping.ColumnMappings.Add("FourStepType", "FourStepType");
            tableMapping.ColumnMappings.Add("Active", "Active");
            tableMapping.ColumnMappings.Add("GroupType", "GroupType");
            tableMapping.ColumnMappings.Add("RouteOrder", "RouteOrder");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT Customer.LastName, Customer.FirstName, Property.Description, Property.Address, Property.City, Property.State, Property.Zip, Property.Subdivision, 
                 Route.RouteID, Route.RouteName, Route.RouteOrder, Route.Notes, Route.PropertyID, Service.FourStepType, Property.Active, Property.GroupType
FROM    Customer INNER JOIN
                 Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                 Service ON Property.PropertyID = Service.PropertyID INNER JOIN
                 Route ON Service.PropertyID = Route.PropertyID";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[1].CommandText = @"SELECT Customer.LastName, Customer.FirstName, Property.Description, Property.Address, Property.City, Property.State, Property.Zip, Property.Subdivision, 
                 Route.RouteID, Route.RouteName, Route.RouteOrder, Route.Notes, Route.PropertyID, Service.FourStepType, Property.Active, Property.GroupType
FROM    Customer INNER JOIN
                 Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                 Service ON Property.PropertyID = Service.PropertyID INNER JOIN
                 Route ON Service.PropertyID = Route.PropertyID
WHERE (Route.RouteName = @RouteName)
ORDER BY Route.RouteOrder
";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RouteName", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "RouteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.RouteViewDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.RouteViewDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.RouteViewDataTable dataTable = new MMSDataSet.RouteViewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(MMSDataSet.RouteViewDataTable dataTable, string RouteName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((RouteName == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(RouteName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.RouteViewDataTable GetDataBy(string RouteName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((RouteName == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(RouteName));
            }
            MMSDataSet.RouteViewDataTable dataTable = new MMSDataSet.RouteViewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LetterDataTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LetterDataTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LetterDataTable";
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("PropMow", "PropMow");
            tableMapping.ColumnMappings.Add("PropFourStep", "PropFourStep");
            tableMapping.ColumnMappings.Add("PropSeed", "PropSeed");
            tableMapping.ColumnMappings.Add("PropFertilize", "PropFertilize");
            tableMapping.ColumnMappings.Add("PropLime", "PropLime");
            tableMapping.ColumnMappings.Add("PropAeration", "PropAeration");
            tableMapping.ColumnMappings.Add("SpringServices", "SpringServices");
            tableMapping.ColumnMappings.Add("SummerServices", "SummerServices");
            tableMapping.ColumnMappings.Add("FallServices", "FallServices");
            tableMapping.ColumnMappings.Add("WinterServices", "WinterServices");
            tableMapping.ColumnMappings.Add("GroupType", "GroupType");
            tableMapping.ColumnMappings.Add("Cost", "Cost");
            tableMapping.ColumnMappings.Add("AccountNumber", "AccountNumber");
            tableMapping.ColumnMappings.Add("BusinessName", "BusinessName");
            tableMapping.ColumnMappings.Add("Active", "Active");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[15];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT DISTINCT 
                 Customer.LastName, Customer.FirstName, Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertilize, Service.PropLime, 
                 Service.PropAeration, Service.SpringServices, Service.SummerServices, Service.FallServices, Service.WinterServices, Service.Cost, Customer.Address, 
                 Customer.City, Customer.State, Customer.Zip, Customer.AccountNumber, Customer.BusinessName, Customer.Active, Property.GroupType
FROM    Customer INNER JOIN
                 Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                 Service ON Property.PropertyID = Service.PropertyID
ORDER BY Customer.LastName";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT DISTINCT 
                         Customer.CustomerID, Customer.LastName, Customer.FirstName, Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertilize, Service.PropLime, Service.PropAeration, 
                         Service.SpringServices, Service.SummerServices, Service.FallServices, Service.WinterServices, Service.Cost, Property.Address, Customer.City, Customer.State, Customer.Zip, Customer.AccountNumber, 
                         Customer.BusinessName, Customer.Active, Property.GroupType, Service.FourStepCost, Service.FourStepType
FROM            Customer INNER JOIN
                         Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                         Service ON Property.PropertyID = Service.PropertyID
WHERE        (Customer.Active = 'True') AND (Service.FourStepCost <> '0') AND (Service.FourStepType = 'False')
ORDER BY Customer.LastName";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[2].CommandText = @"SELECT Customer.LastName, Customer.FirstName, Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertilize, Service.PropLime, 
                 Service.PropAeration, Service.SpringServices, Service.SummerServices, Service.FallServices, Service.WinterServices, Service.Cost, Property.Address, 
                 Property.City, Property.State, Property.Zip, Customer.AccountNumber, Customer.BusinessName, Customer.Active, Property.GroupType
FROM    Customer INNER JOIN
                 Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                 Service ON Property.PropertyID = Service.PropertyID
WHERE (Customer.LastName = @lastname) AND (Customer.FirstName = @firstname) AND (Property.AccountNumber LIKE @accnum)
ORDER BY Customer.LastName";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastname", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@firstname", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accnum", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT        Customer.LastName, Customer.FirstName, Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertilize, Service.PropLime, Service.PropAeration, Service.SpringServices, 
                         Service.SummerServices, Service.FallServices, Service.WinterServices, Service.Cost, Customer.Address, Customer.City, Customer.State, Customer.Zip, Customer.AccountNumber, Customer.BusinessName, 
                         Customer.Active, Property.GroupType, Property.Address AS PropAddress, Property.City AS PropCity, Property.State AS PropState, Property.Zip AS PropZip, Service.FourStepCost, Service.FourStepType
FROM            Customer INNER JOIN
                         Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                         Service ON Property.PropertyID = Service.PropertyID
WHERE        (Customer.LastName = @lastname) AND (Customer.FirstName = @firstname) AND (Property.Address LIKE @address)
ORDER BY Customer.LastName, Customer.FirstName";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastname", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@firstname", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@address", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "PropAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[4].CommandText = @"SELECT DISTINCT 
                 Customer.CustomerID, Customer.LastName, Customer.FirstName, Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertilize, 
                 Service.PropLime, Service.PropAeration, Service.SpringServices, Service.SummerServices, Service.FallServices, Service.WinterServices, Service.Cost, 
                 Property.Address, Customer.City, Customer.State, Customer.Zip, Customer.AccountNumber, Customer.BusinessName, Customer.Active, 
                 Property.GroupType
FROM    Customer INNER JOIN
                 Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                 Service ON Property.PropertyID = Service.PropertyID
WHERE (Service.FallServices <> '0 ') AND (Service.FallServices <> ' ') 
AND (Service.FallServices NOT LIKE 'LV%') 
AND (Service.FallServices NOT LIKE 'G%') 
AND  (Customer.Active = 'True')
ORDER BY Customer.LastName";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[5].CommandText = @"SELECT DISTINCT 
                 Customer.CustomerID, Customer.LastName, Customer.FirstName, Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertilize, 
                 Service.PropLime, Service.PropAeration, Service.SpringServices, Service.SummerServices, Service.FallServices, Service.WinterServices, Service.Cost, 
                 Property.Address, Customer.City, Customer.State, Customer.Zip, Customer.AccountNumber, Customer.BusinessName, Customer.Active, 
                 Property.GroupType
FROM    Customer INNER JOIN
                 Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                 Service ON Property.PropertyID = Service.PropertyID
WHERE (Service.FallServices <> '0 ') AND (Service.FallServices <> ' ') AND (Customer.Active = 'True') AND (Service.FallServices LIKE 'LV%' OR
                 Service.FallServices LIKE 'G%' OR
                 Service.FallServices LIKE '%,LV%' OR
                 Service.FallServices LIKE '%,G%' OR
                 Service.FallServices LIKE '%, LV%' OR
                 Service.FallServices LIKE '%, G%')
ORDER BY Customer.LastName";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = @"SELECT DISTINCT 
                         Customer.CustomerID, Customer.LastName, Customer.FirstName, Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertilize, Service.PropLime, Service.PropAeration, 
                         Service.SpringServices, Service.SummerServices, Service.FallServices, Service.WinterServices, Service.Cost, Property.Address, Customer.City, Customer.State, Customer.Zip, Customer.AccountNumber, 
                         Customer.BusinessName, Customer.Active, Property.GroupType, Service.FourStepCost, Service.FourStepType
FROM            Customer INNER JOIN
                         Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                         Service ON Property.PropertyID = Service.PropertyID
WHERE        (Service.Cost > 0) AND (Property.GroupType = 'InFrequent') AND (Customer.Active = 'True')
ORDER BY Customer.LastName";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = @"SELECT DISTINCT 
                         Customer.CustomerID, Customer.LastName, Customer.FirstName, Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertilize, Service.PropLime, Service.PropAeration, 
                         Service.SpringServices, Service.SummerServices, Service.FallServices, Service.WinterServices, Service.Cost, Property.Address, Customer.City, Customer.State, Customer.Zip, Customer.AccountNumber, 
                         Customer.BusinessName, Customer.Active, Property.GroupType, Service.FourStepCost, Service.FourStepType
FROM            Customer INNER JOIN
                         Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                         Service ON Property.PropertyID = Service.PropertyID
WHERE        (Customer.Active = 'True') AND (Service.FourStepCost <> '0') AND (Service.FourStepType = 'True')
ORDER BY Customer.LastName";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[8] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[8].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[8].CommandText = @"SELECT DISTINCT Customer.CustomerID, Customer.LastName, Customer.FirstName, Property.Address
FROM            Customer INNER JOIN
                         Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                         Service ON Property.PropertyID = Service.PropertyID
WHERE        (Service.Cost > 0) AND (Property.GroupType = 'InFrequent') AND (Customer.Active = 'True')
ORDER BY Customer.LastName";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[9] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = @"SELECT DISTINCT 
                         Customer.CustomerID, Customer.LastName, Customer.FirstName, Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertilize, Service.PropLime, Service.PropAeration, 
                         Service.SpringServices, Service.SummerServices, Service.FallServices, Service.WinterServices, Service.Cost, Property.Address, Customer.City, Customer.State, Customer.Zip, Customer.AccountNumber, 
                         Customer.BusinessName, Customer.Active, Property.GroupType, Service.FourStepCost, Service.FourStepType
FROM            Customer INNER JOIN
                         Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                         Service ON Property.PropertyID = Service.PropertyID
WHERE        (Customer.Active = 'True') AND (Property.GroupType = 'Current') AND (Property.Active = 'True')
ORDER BY Customer.LastName";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[10] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[10].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[10].CommandText = @"SELECT DISTINCT 
                 Customer.CustomerID, Customer.LastName, Customer.FirstName, Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertilize, 
                 Service.PropLime, Service.PropAeration, Service.SpringServices, Service.SummerServices, Service.FallServices, Service.WinterServices, Service.Cost, 
                 Property.Address, Customer.City, Customer.State, Customer.Zip, Customer.AccountNumber, Customer.BusinessName, Customer.Active, 
                 Property.GroupType
FROM    Customer INNER JOIN
                 Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                 Service ON Property.PropertyID = Service.PropertyID
WHERE     ( (Service.SpringServices <> '0') AND  (Service.SpringServices <> '')  AND (Customer.Active = 'True'))
ORDER BY Customer.LastName";
            this._commandCollection[10].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[11] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[11].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[11].CommandText = @"SELECT DISTINCT 
                         Customer.CustomerID, Customer.LastName, Customer.FirstName, Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertilize, 
                         Service.PropLime, Service.PropAeration, Service.SpringServices, Service.SummerServices, Service.FallServices, Service.WinterServices, Service.Cost, 
                         Property.Address, Customer.City, Customer.State, Customer.Zip, Customer.AccountNumber, Customer.BusinessName, Customer.Active, 
                         Property.GroupType
FROM            Customer INNER JOIN
                         Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                         Service ON Property.PropertyID = Service.PropertyID
WHERE        (Service.SummerServices <> ' ') AND (Service.SummerServices <> '0') AND (Customer.Active = 'True')
ORDER BY Customer.LastName";
            this._commandCollection[11].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[12] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[12].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[12].CommandText = @"SELECT DISTINCT 
                 Customer.CustomerID, Customer.LastName, Customer.FirstName, Service.PropMow, Service.PropFourStep, Service.PropSeed, Service.PropFertilize, 
                 Service.PropLime, Service.PropAeration, Service.SpringServices, Service.SummerServices, Service.FallServices, Service.WinterServices, Service.Cost, 
                 Property.Address, Customer.City, Customer.State, Customer.Zip, Customer.AccountNumber, Customer.BusinessName, Customer.Active, 
                 Property.GroupType
FROM    Customer INNER JOIN
                 Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                 Service ON Property.PropertyID = Service.PropertyID
WHERE      (Service.WinterServices <> '0') AND  (Service.WinterServices <> '')  AND (Customer.Active = 'True')
ORDER BY Customer.LastName";
            this._commandCollection[12].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[13] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[13].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[13].CommandText = @"SELECT        COUNT(*) AS Expr1
FROM            Customer INNER JOIN
                         Property ON Customer.CustomerID = Property.CustomerID INNER JOIN
                         Service ON Property.PropertyID = Service.PropertyID
WHERE        (Customer.GroupType = @GroupType)";
            this._commandCollection[13].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GroupType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[14] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[14].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[14].CommandText = "SELECT     COUNT(*) AS Expr1\r\nFROM         Customer INNER JOIN\r\n                 " +
                "     Property ON Customer.CustomerID = Property.CustomerID INNER JOIN\r\n         " +
                "             Service ON Property.PropertyID = Service.PropertyID";
            this._commandCollection[14].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.LetterDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.LetterDataTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByCanceFourStepServices(MMSDataSet.LetterDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.LetterDataTableDataTable GetDataByCanceFourStepServices() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByCustomerName(MMSDataSet.LetterDataTableDataTable dataTable, string lastname, string firstname, string accnum) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((lastname == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(lastname));
            }
            if ((firstname == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(firstname));
            }
            if ((accnum == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(accnum));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.LetterDataTableDataTable GetDataByCustomerName(string lastname, string firstname, string accnum) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((lastname == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(lastname));
            }
            if ((firstname == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(firstname));
            }
            if ((accnum == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(accnum));
            }
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByCustomerName2(MMSDataSet.LetterDataTableDataTable dataTable, string lastname, string firstname, string address) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((lastname == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(lastname));
            }
            if ((firstname == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(firstname));
            }
            if ((address == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(address));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.LetterDataTableDataTable GetDataCustomerName2(string lastname, string firstname, string address) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((lastname == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(lastname));
            }
            if ((firstname == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(firstname));
            }
            if ((address == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(address));
            }
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByFallServices(MMSDataSet.LetterDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.LetterDataTableDataTable GetDataByFallServices() {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByFallServices2(MMSDataSet.LetterDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.LetterDataTableDataTable GetDataByFallServices2() {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByFormerMowingCustomer(MMSDataSet.LetterDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.LetterDataTableDataTable GetDataByFormerMowingCustomer() {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByFourStepServices(MMSDataSet.LetterDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.LetterDataTableDataTable GetDataByFourStepServices() {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByInFreqCost(MMSDataSet.LetterDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.LetterDataTableDataTable GetDataByInFreqCost() {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByMowingCustomer(MMSDataSet.LetterDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.LetterDataTableDataTable GetDataByMowingCustomer() {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySpringServices(MMSDataSet.LetterDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[10];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.LetterDataTableDataTable GetDataBySpringServices() {
            this.Adapter.SelectCommand = this.CommandCollection[10];
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySummerServices(MMSDataSet.LetterDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[11];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.LetterDataTableDataTable GetDataBySummerServices() {
            this.Adapter.SelectCommand = this.CommandCollection[11];
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByWinterServices(MMSDataSet.LetterDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[12];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.LetterDataTableDataTable GetDataByWinterServices() {
            this.Adapter.SelectCommand = this.CommandCollection[12];
            MMSDataSet.LetterDataTableDataTable dataTable = new MMSDataSet.LetterDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(string GroupType) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[13];
            if ((GroupType == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(GroupType));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCountAll() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[14];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CustomerNewsletterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustomerNewsletterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CustomerNewletter";
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("Phone1", "Phone1");
            tableMapping.ColumnMappings.Add("Phone2", "Phone2");
            tableMapping.ColumnMappings.Add("Active", "Active");
            tableMapping.ColumnMappings.Add("BusinessName", "BusinessName");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("GroupType", "GroupType");
            tableMapping.ColumnMappings.Add("AccountNumber", "AccountNumber");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Customer] WHERE (([CustomerID] = @Original_CustomerID) AND ((@IsNull_LastName = 1 AND [LastName] IS NULL) OR ([LastName] = @Original_LastName)) AND ((@IsNull_FirstName = 1 AND [FirstName] IS NULL) OR ([FirstName] = @Original_FirstName)) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Address] = @Original_Address)) AND ((@IsNull_City = 1 AND [City] IS NULL) OR ([City] = @Original_City)) AND ((@IsNull_State = 1 AND [State] IS NULL) OR ([State] = @Original_State)) AND ((@IsNull_Zip = 1 AND [Zip] IS NULL) OR ([Zip] = @Original_Zip)) AND ((@IsNull_Phone1 = 1 AND [Phone1] IS NULL) OR ([Phone1] = @Original_Phone1)) AND ((@IsNull_Phone2 = 1 AND [Phone2] IS NULL) OR ([Phone2] = @Original_Phone2)) AND ((@IsNull_Email = 1 AND [Email] IS NULL) OR ([Email] = @Original_Email)) AND ([Active] = @Original_Active) AND ((@IsNull_GroupType = 1 AND [GroupType] IS NULL) OR ([GroupType] = @Original_GroupType)) AND ((@IsNull_AccountNumber = 1 AND [AccountNumber] IS NULL) OR ([AccountNumber] = @Original_AccountNumber)) AND ((@IsNull_BusinessName = 1 AND [BusinessName] IS NULL) OR ([BusinessName] = @Original_BusinessName)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LastName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Address", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_City", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_State", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Zip", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Phone1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Phone2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Email", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GroupType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GroupType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AccountNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccountNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BusinessName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BusinessName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BusinessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BusinessName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Customer] SET [LastName] = @LastName, [FirstName] = @FirstName, [Address]" +
                " = @Address, [City] = @City, [State] = @State, [Zip] = @Zip, [Phone1] = @Phone1," +
                " [Phone2] = @Phone2, [Email] = @Email, [Active] = @Active, [GroupType] = @GroupT" +
                "ype, [AccountNumber] = @AccountNumber, [BusinessName] = @BusinessName WHERE (([C" +
                "ustomerID] = @Original_CustomerID) AND ((@IsNull_LastName = 1 AND [LastName] IS " +
                "NULL) OR ([LastName] = @Original_LastName)) AND ((@IsNull_FirstName = 1 AND [Fir" +
                "stName] IS NULL) OR ([FirstName] = @Original_FirstName)) AND ((@IsNull_Address =" +
                " 1 AND [Address] IS NULL) OR ([Address] = @Original_Address)) AND ((@IsNull_City" +
                " = 1 AND [City] IS NULL) OR ([City] = @Original_City)) AND ((@IsNull_State = 1 A" +
                "ND [State] IS NULL) OR ([State] = @Original_State)) AND ((@IsNull_Zip = 1 AND [Z" +
                "ip] IS NULL) OR ([Zip] = @Original_Zip)) AND ((@IsNull_Phone1 = 1 AND [Phone1] I" +
                "S NULL) OR ([Phone1] = @Original_Phone1)) AND ((@IsNull_Phone2 = 1 AND [Phone2] " +
                "IS NULL) OR ([Phone2] = @Original_Phone2)) AND ((@IsNull_Email = 1 AND [Email] I" +
                "S NULL) OR ([Email] = @Original_Email)) AND ([Active] = @Original_Active) AND ((" +
                "@IsNull_GroupType = 1 AND [GroupType] IS NULL) OR ([GroupType] = @Original_Group" +
                "Type)) AND ((@IsNull_AccountNumber = 1 AND [AccountNumber] IS NULL) OR ([Account" +
                "Number] = @Original_AccountNumber)) AND ((@IsNull_BusinessName = 1 AND [Business" +
                "Name] IS NULL) OR ([BusinessName] = @Original_BusinessName)));\r\nSELECT CustomerI" +
                "D, LastName, FirstName, Address, City, State, Zip, Phone1, Phone2, Email, Active" +
                ", GroupType, AccountNumber, BusinessName FROM Customer AS c WHERE (CustomerID = " +
                "@CustomerID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GroupType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccountNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BusinessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BusinessName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CustomerID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LastName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Address", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_City", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_State", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Zip", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Zip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zip", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Phone1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Phone2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Phone2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Email", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GroupType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GroupType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GroupType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AccountNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccountNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccountNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BusinessName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BusinessName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BusinessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BusinessName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CustomerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        CustomerID, LastName, FirstName, Address, City, State, Zip, Phone1, Phone2, Email, Active, GroupType, AccountNumber, BusinessName
FROM            Customer AS c
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            CustomerJob AS j INNER JOIN
                                                         Property AS p ON j.PropertyID = p.PropertyID
                               WHERE        (p.CustomerID = c.CustomerID) AND (p.Active = 'True') AND (j.Status = 'Completed') AND (j.Date BETWEEN @startdate AND @enddate))) AND 
                         (Active = 'True')";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startdate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@enddate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[1].CommandText = @"SELECT        CustomerID, LastName, FirstName, Address, City, State, Zip, Phone1, Phone2, Email, Active, GroupType, AccountNumber, BusinessName
FROM            Customer AS c
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            CustomerJob AS j INNER JOIN
                                                         Property AS p ON j.PropertyID = p.PropertyID
                               WHERE        (p.CustomerID = c.CustomerID) AND (p.Active = 'True') AND (j.Status = 'Completed'))) AND (Active = 'True')";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.CustomerNewletterDataTable dataTable, global::System.Nullable<global::System.DateTime> startdate, global::System.Nullable<global::System.DateTime> enddate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((startdate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(startdate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((enddate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(enddate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.CustomerNewletterDataTable GetData(global::System.Nullable<global::System.DateTime> startdate, global::System.Nullable<global::System.DateTime> enddate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((startdate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(startdate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((enddate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(enddate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            MMSDataSet.CustomerNewletterDataTable dataTable = new MMSDataSet.CustomerNewletterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByQBStatus(MMSDataSet.CustomerNewletterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustomerNewletterDataTable GetDataByQBStatus() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MMSDataSet.CustomerNewletterDataTable dataTable = new MMSDataSet.CustomerNewletterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.CustomerNewletterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CustomerNewletter");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CustomerID, string Original_LastName, string Original_FirstName, string Original_Address, string Original_City, string Original_State, string Original_Zip, string Original_Phone1, string Original_Phone2, string Original_Email, bool Original_Active, string Original_GroupType, string Original_AccountNumber, string Original_BusinessName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CustomerID));
            if ((Original_LastName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_LastName));
            }
            if ((Original_FirstName == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_FirstName));
            }
            if ((Original_Address == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Address));
            }
            if ((Original_City == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_City));
            }
            if ((Original_State == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_State));
            }
            if ((Original_Zip == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Zip));
            }
            if ((Original_Phone1 == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_Phone1));
            }
            if ((Original_Phone2 == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_Phone2));
            }
            if ((Original_Email == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Email));
            }
            this.Adapter.DeleteCommand.Parameters[19].Value = ((bool)(Original_Active));
            if ((Original_GroupType == null)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_GroupType));
            }
            if ((Original_AccountNumber == null)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_AccountNumber));
            }
            if ((Original_BusinessName == null)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((string)(Original_BusinessName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string LastName, 
                    string FirstName, 
                    string Address, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Phone1, 
                    string Phone2, 
                    string Email, 
                    bool Active, 
                    string GroupType, 
                    string AccountNumber, 
                    string BusinessName, 
                    int Original_CustomerID, 
                    string Original_LastName, 
                    string Original_FirstName, 
                    string Original_Address, 
                    string Original_City, 
                    string Original_State, 
                    string Original_Zip, 
                    string Original_Phone1, 
                    string Original_Phone2, 
                    string Original_Email, 
                    bool Original_Active, 
                    string Original_GroupType, 
                    string Original_AccountNumber, 
                    string Original_BusinessName, 
                    int CustomerID) {
            if ((LastName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(LastName));
            }
            if ((FirstName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FirstName));
            }
            if ((Address == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(City));
            }
            if ((State == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(State));
            }
            if ((Zip == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Zip));
            }
            if ((Phone1 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Phone1));
            }
            if ((Phone2 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Phone2));
            }
            if ((Email == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Email));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Active));
            if ((GroupType == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(GroupType));
            }
            if ((AccountNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(AccountNumber));
            }
            if ((BusinessName == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(BusinessName));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_CustomerID));
            if ((Original_LastName == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_LastName));
            }
            if ((Original_FirstName == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_FirstName));
            }
            if ((Original_Address == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_Address));
            }
            if ((Original_City == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_City));
            }
            if ((Original_State == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_State));
            }
            if ((Original_Zip == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_Zip));
            }
            if ((Original_Phone1 == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_Phone1));
            }
            if ((Original_Phone2 == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_Phone2));
            }
            if ((Original_Email == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_Email));
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((bool)(Original_Active));
            if ((Original_GroupType == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_GroupType));
            }
            if ((Original_AccountNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_AccountNumber));
            }
            if ((Original_BusinessName == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_BusinessName));
            }
            this.Adapter.UpdateCommand.Parameters[39].Value = ((int)(CustomerID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string LastName, 
                    string FirstName, 
                    string Address, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Phone1, 
                    string Phone2, 
                    string Email, 
                    bool Active, 
                    string GroupType, 
                    string AccountNumber, 
                    string BusinessName, 
                    int Original_CustomerID, 
                    string Original_LastName, 
                    string Original_FirstName, 
                    string Original_Address, 
                    string Original_City, 
                    string Original_State, 
                    string Original_Zip, 
                    string Original_Phone1, 
                    string Original_Phone2, 
                    string Original_Email, 
                    bool Original_Active, 
                    string Original_GroupType, 
                    string Original_AccountNumber, 
                    string Original_BusinessName) {
            return this.Update(LastName, FirstName, Address, City, State, Zip, Phone1, Phone2, Email, Active, GroupType, AccountNumber, BusinessName, Original_CustomerID, Original_LastName, Original_FirstName, Original_Address, Original_City, Original_State, Original_Zip, Original_Phone1, Original_Phone2, Original_Email, Original_Active, Original_GroupType, Original_AccountNumber, Original_BusinessName, Original_CustomerID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserProfileTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserProfileTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UserProfile";
            tableMapping.ColumnMappings.Add("ProfileID", "ProfileID");
            tableMapping.ColumnMappings.Add("TemplatePath", "TemplatePath");
            tableMapping.ColumnMappings.Add("EnableSound", "EnableSound");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("ImportPath", "ImportPath");
            tableMapping.ColumnMappings.Add("QBInvoiceDate", "QBInvoiceDate");
            tableMapping.ColumnMappings.Add("QBIntegration", "QBIntegration");
            tableMapping.ColumnMappings.Add("QBAccount", "QBAccount");
            tableMapping.ColumnMappings.Add("ReportURL", "ReportURL");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [UserProfile] WHERE (([ProfileID] = @Original_ProfileID) AND ((@IsNull_TemplatePath = 1 AND [TemplatePath] IS NULL) OR ([TemplatePath] = @Original_TemplatePath)) AND ((@IsNull_EnableSound = 1 AND [EnableSound] IS NULL) OR ([EnableSound] = @Original_EnableSound)) AND ((@IsNull_Password = 1 AND [Password] IS NULL) OR ([Password] = @Original_Password)) AND ((@IsNull_ImportPath = 1 AND [ImportPath] IS NULL) OR ([ImportPath] = @Original_ImportPath)) AND ((@IsNull_QBAccount = 1 AND [QBAccount] IS NULL) OR ([QBAccount] = @Original_QBAccount)) AND ((@IsNull_QBIntegration = 1 AND [QBIntegration] IS NULL) OR ([QBIntegration] = @Original_QBIntegration)) AND ((@IsNull_QBInvoiceDate = 1 AND [QBInvoiceDate] IS NULL) OR ([QBInvoiceDate] = @Original_QBInvoiceDate)) AND ((@IsNull_ReportURL = 1 AND [ReportURL] IS NULL) OR ([ReportURL] = @Original_ReportURL)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProfileID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProfileID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TemplatePath", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TemplatePath", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TemplatePath", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TemplatePath", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EnableSound", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnableSound", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EnableSound", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnableSound", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Password", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImportPath", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImportPath", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImportPath", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImportPath", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBAccount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBAccount", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBAccount", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBAccount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBIntegration", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBIntegration", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBIntegration", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBIntegration", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBInvoiceDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBInvoiceDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReportURL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportURL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReportURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportURL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [UserProfile] ([TemplatePath], [EnableSound], [Password], [ImportPath], [QBAccount], [QBIntegration], [QBInvoiceDate], [ReportURL]) VALUES (@TemplatePath, @EnableSound, @Password, @ImportPath, @QBAccount, @QBIntegration, @QBInvoiceDate, @ReportURL);
SELECT ProfileID, TemplatePath, EnableSound, Password, ImportPath, QBAccount, QBIntegration, QBInvoiceDate, ReportURL FROM UserProfile WHERE (ProfileID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TemplatePath", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TemplatePath", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EnableSound", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnableSound", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImportPath", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImportPath", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBAccount", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBAccount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBIntegration", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBIntegration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBInvoiceDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [UserProfile] SET [TemplatePath] = @TemplatePath, [EnableSound] = @EnableSound, [Password] = @Password, [ImportPath] = @ImportPath, [QBAccount] = @QBAccount, [QBIntegration] = @QBIntegration, [QBInvoiceDate] = @QBInvoiceDate, [ReportURL] = @ReportURL WHERE (([ProfileID] = @Original_ProfileID) AND ((@IsNull_TemplatePath = 1 AND [TemplatePath] IS NULL) OR ([TemplatePath] = @Original_TemplatePath)) AND ((@IsNull_EnableSound = 1 AND [EnableSound] IS NULL) OR ([EnableSound] = @Original_EnableSound)) AND ((@IsNull_Password = 1 AND [Password] IS NULL) OR ([Password] = @Original_Password)) AND ((@IsNull_ImportPath = 1 AND [ImportPath] IS NULL) OR ([ImportPath] = @Original_ImportPath)) AND ((@IsNull_QBAccount = 1 AND [QBAccount] IS NULL) OR ([QBAccount] = @Original_QBAccount)) AND ((@IsNull_QBIntegration = 1 AND [QBIntegration] IS NULL) OR ([QBIntegration] = @Original_QBIntegration)) AND ((@IsNull_QBInvoiceDate = 1 AND [QBInvoiceDate] IS NULL) OR ([QBInvoiceDate] = @Original_QBInvoiceDate)) AND ((@IsNull_ReportURL = 1 AND [ReportURL] IS NULL) OR ([ReportURL] = @Original_ReportURL)));
SELECT ProfileID, TemplatePath, EnableSound, Password, ImportPath, QBAccount, QBIntegration, QBInvoiceDate, ReportURL FROM UserProfile WHERE (ProfileID = @ProfileID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TemplatePath", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TemplatePath", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EnableSound", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnableSound", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImportPath", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImportPath", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBAccount", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBAccount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBIntegration", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBIntegration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBInvoiceDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProfileID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProfileID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TemplatePath", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TemplatePath", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TemplatePath", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TemplatePath", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EnableSound", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnableSound", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EnableSound", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnableSound", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Password", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImportPath", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImportPath", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImportPath", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImportPath", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBAccount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBAccount", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBAccount", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBAccount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBIntegration", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBIntegration", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBIntegration", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBIntegration", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QBInvoiceDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QBInvoiceDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReportURL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportURL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReportURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportURL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProfileID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ProfileID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ProfileID, TemplatePath, EnableSound, Password, ImportPath, QBAccount, QBI" +
                "ntegration, QBInvoiceDate, ReportURL\r\nFROM    UserProfile";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = new global::System.Data.SqlClient.SqlConnection(global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString1);
            this._commandCollection[1].CommandText = @"UPDATE UserProfile
SET         TemplatePath = @TemplatePath, EnableSound = @EnableSound, ImportPath = @ImportPath, QBInvoiceDate = @QBInvoiceDate, 
                 QBIntegration = @QBIntegration, QBAccount = @QBAccount, ReportURL = @ReportURL
WHERE (ProfileID = 1)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TemplatePath", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, "TemplatePath", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EnableSound", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "EnableSound", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImportPath", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, "ImportPath", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBInvoiceDate", global::System.Data.SqlDbType.Date, 3, global::System.Data.ParameterDirection.Input, 0, 0, "QBInvoiceDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBIntegration", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "QBIntegration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QBAccount", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, "QBAccount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportURL", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, "ReportURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.UserProfileDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.UserProfileDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.UserProfileDataTable dataTable = new MMSDataSet.UserProfileDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.UserProfileDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "UserProfile");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ProfileID, string Original_TemplatePath, global::System.Nullable<bool> Original_EnableSound, string Original_Password, string Original_ImportPath, string Original_QBAccount, global::System.Nullable<bool> Original_QBIntegration, global::System.Nullable<global::System.DateTime> Original_QBInvoiceDate, string Original_ReportURL) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ProfileID));
            if ((Original_TemplatePath == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TemplatePath));
            }
            if ((Original_EnableSound.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_EnableSound.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_Password == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Password));
            }
            if ((Original_ImportPath == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_ImportPath));
            }
            if ((Original_QBAccount == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_QBAccount));
            }
            if ((Original_QBIntegration.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_QBIntegration.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_QBInvoiceDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((System.DateTime)(Original_QBInvoiceDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_ReportURL == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_ReportURL));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TemplatePath, global::System.Nullable<bool> EnableSound, string Password, string ImportPath, string QBAccount, global::System.Nullable<bool> QBIntegration, global::System.Nullable<global::System.DateTime> QBInvoiceDate, string ReportURL) {
            if ((TemplatePath == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TemplatePath));
            }
            if ((EnableSound.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(EnableSound.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Password == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Password));
            }
            if ((ImportPath == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ImportPath));
            }
            if ((QBAccount == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(QBAccount));
            }
            if ((QBIntegration.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(QBIntegration.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((QBInvoiceDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(QBInvoiceDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ReportURL == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ReportURL));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string TemplatePath, 
                    global::System.Nullable<bool> EnableSound, 
                    string Password, 
                    string ImportPath, 
                    string QBAccount, 
                    global::System.Nullable<bool> QBIntegration, 
                    global::System.Nullable<global::System.DateTime> QBInvoiceDate, 
                    string ReportURL, 
                    int Original_ProfileID, 
                    string Original_TemplatePath, 
                    global::System.Nullable<bool> Original_EnableSound, 
                    string Original_Password, 
                    string Original_ImportPath, 
                    string Original_QBAccount, 
                    global::System.Nullable<bool> Original_QBIntegration, 
                    global::System.Nullable<global::System.DateTime> Original_QBInvoiceDate, 
                    string Original_ReportURL, 
                    int ProfileID) {
            if ((TemplatePath == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TemplatePath));
            }
            if ((EnableSound.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(EnableSound.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Password == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Password));
            }
            if ((ImportPath == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ImportPath));
            }
            if ((QBAccount == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(QBAccount));
            }
            if ((QBIntegration.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(QBIntegration.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((QBInvoiceDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(QBInvoiceDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ReportURL == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ReportURL));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ProfileID));
            if ((Original_TemplatePath == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_TemplatePath));
            }
            if ((Original_EnableSound.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(Original_EnableSound.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_Password == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Password));
            }
            if ((Original_ImportPath == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_ImportPath));
            }
            if ((Original_QBAccount == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_QBAccount));
            }
            if ((Original_QBIntegration.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((bool)(Original_QBIntegration.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_QBInvoiceDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(Original_QBInvoiceDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_ReportURL == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_ReportURL));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(ProfileID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string TemplatePath, 
                    global::System.Nullable<bool> EnableSound, 
                    string Password, 
                    string ImportPath, 
                    string QBAccount, 
                    global::System.Nullable<bool> QBIntegration, 
                    global::System.Nullable<global::System.DateTime> QBInvoiceDate, 
                    string ReportURL, 
                    int Original_ProfileID, 
                    string Original_TemplatePath, 
                    global::System.Nullable<bool> Original_EnableSound, 
                    string Original_Password, 
                    string Original_ImportPath, 
                    string Original_QBAccount, 
                    global::System.Nullable<bool> Original_QBIntegration, 
                    global::System.Nullable<global::System.DateTime> Original_QBInvoiceDate, 
                    string Original_ReportURL) {
            return this.Update(TemplatePath, EnableSound, Password, ImportPath, QBAccount, QBIntegration, QBInvoiceDate, ReportURL, Original_ProfileID, Original_TemplatePath, Original_EnableSound, Original_Password, Original_ImportPath, Original_QBAccount, Original_QBIntegration, Original_QBInvoiceDate, Original_ReportURL, Original_ProfileID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateUserProfile(string TemplatePath, global::System.Nullable<bool> EnableSound, string ImportPath, string QBInvoiceDate, global::System.Nullable<bool> QBIntegration, string QBAccount, string ReportURL) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((TemplatePath == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(TemplatePath));
            }
            if ((EnableSound.HasValue == true)) {
                command.Parameters[1].Value = ((bool)(EnableSound.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ImportPath == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(ImportPath));
            }
            if ((QBInvoiceDate == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(QBInvoiceDate));
            }
            if ((QBIntegration.HasValue == true)) {
                command.Parameters[4].Value = ((bool)(QBIntegration.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((QBAccount == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(QBAccount));
            }
            if ((ReportURL == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(ReportURL));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CustomerNewLettersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustomerNewLettersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CustomerNewLetters";
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("QBInvoiceID", "QBInvoiceID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT DISTINCT Customer.LastName, Customer.FirstName, Customer.Address, Customer.City, Customer.State, Customer.Zip, CustomerJob.QBInvoiceID
FROM    Customer INNER JOIN
                 Property ON Customer.CustomerID = Property.CustomerID LEFT OUTER JOIN
                 CustomerJob ON Property.PropertyID = CustomerJob.PropertyID
WHERE (CustomerJob.QBInvoiceID IS NULL) AND (Customer.Active = 'True')";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT DISTINCT Customer.LastName, Customer.FirstName, Customer.Address, Customer.City, Customer.State, Customer.Zip, CustomerJob.QBInvoiceID
FROM    Customer INNER JOIN
                 Property ON Customer.CustomerID = Property.CustomerID LEFT OUTER JOIN
                 CustomerJob ON Property.PropertyID = CustomerJob.PropertyID
WHERE (Customer.Active = 'True') AND (CustomerJob.QBInvoiceID IS NULL) AND (CustomerJob.Date BETWEEN @startdate AND @enddate)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startdate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@enddate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT CustomerJobID, PropertyID, Date, QBInvoiceID\r\nFROM    CustomerJob\r\nWHERE (" +
                "QBInvoiceID <> \'NULL\') AND (Date BETWEEN @startdate AND @enddate)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startdate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@enddate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.CustomerNewLettersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.CustomerNewLettersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.CustomerNewLettersDataTable dataTable = new MMSDataSet.CustomerNewLettersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(MMSDataSet.CustomerNewLettersDataTable dataTable, global::System.Nullable<global::System.DateTime> startdate, global::System.Nullable<global::System.DateTime> enddate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((startdate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(startdate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((enddate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(enddate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustomerNewLettersDataTable GetDataBy(global::System.Nullable<global::System.DateTime> startdate, global::System.Nullable<global::System.DateTime> enddate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((startdate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(startdate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((enddate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(enddate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            MMSDataSet.CustomerNewLettersDataTable dataTable = new MMSDataSet.CustomerNewLettersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByNotInvoiced(MMSDataSet.CustomerNewLettersDataTable dataTable, global::System.Nullable<global::System.DateTime> startdate, global::System.Nullable<global::System.DateTime> enddate) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((startdate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(startdate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((enddate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(enddate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MMSDataSet.CustomerNewLettersDataTable GetDataByNotInvoiced(global::System.Nullable<global::System.DateTime> startdate, global::System.Nullable<global::System.DateTime> enddate) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((startdate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(startdate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((enddate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(enddate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            MMSDataSet.CustomerNewLettersDataTable dataTable = new MMSDataSet.CustomerNewLettersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BonusTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BonusTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Bonus";
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("Bonus", "Bonus");
            tableMapping.ColumnMappings.Add("QualityBonus", "QualityBonus");
            tableMapping.ColumnMappings.Add("Year", "Year");
            tableMapping.ColumnMappings.Add("Active", "Active");
            tableMapping.ColumnMappings.Add("Contractor", "Contractor");
            tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID");
            tableMapping.ColumnMappings.Add("EmployeeBonusID", "EmployeeBonusID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM EmployeeBonus\r\nWHERE        (EmployeeBonusID = @Original_EmployeeBonu" +
                "sID) AND (EmployeeID = @Original_EmployeeID) AND (@IsNull_Bonus = 1) AND (Bonus " +
                "IS NULL) AND \r\n                         (@IsNull_QualityBonus = 1) AND (QualityB" +
                "onus IS NULL) AND (@IsNull_Year = 1) AND (Year IS NULL) OR\r\n                    " +
                "     (EmployeeBonusID = @Original_EmployeeBonusID) AND (EmployeeID = @Original_E" +
                "mployeeID) AND (Bonus = @Original_Bonus) AND \r\n                         (@IsNull" +
                "_QualityBonus = 1) AND (QualityBonus IS NULL) AND (@IsNull_Year = 1) AND (Year I" +
                "S NULL) OR\r\n                         (EmployeeBonusID = @Original_EmployeeBonusI" +
                "D) AND (EmployeeID = @Original_EmployeeID) AND (@IsNull_Bonus = 1) AND (Bonus IS" +
                " NULL) AND \r\n                         (QualityBonus = @Original_QualityBonus) AN" +
                "D (@IsNull_Year = 1) AND (Year IS NULL) OR\r\n                         (EmployeeBo" +
                "nusID = @Original_EmployeeBonusID) AND (EmployeeID = @Original_EmployeeID) AND (" +
                "Bonus = @Original_Bonus) AND \r\n                         (QualityBonus = @Origina" +
                "l_QualityBonus) AND (@IsNull_Year = 1) AND (Year IS NULL) OR\r\n                  " +
                "       (EmployeeBonusID = @Original_EmployeeBonusID) AND (EmployeeID = @Original" +
                "_EmployeeID) AND (@IsNull_Bonus = 1) AND (Bonus IS NULL) AND \r\n                 " +
                "        (@IsNull_QualityBonus = 1) AND (QualityBonus IS NULL) AND (Year = @Origi" +
                "nal_Year) OR\r\n                         (EmployeeBonusID = @Original_EmployeeBonu" +
                "sID) AND (EmployeeID = @Original_EmployeeID) AND (Bonus = @Original_Bonus) AND \r" +
                "\n                         (@IsNull_QualityBonus = 1) AND (QualityBonus IS NULL) " +
                "AND (Year = @Original_Year) OR\r\n                         (EmployeeBonusID = @Ori" +
                "ginal_EmployeeBonusID) AND (EmployeeID = @Original_EmployeeID) AND (@IsNull_Bonu" +
                "s = 1) AND (Bonus IS NULL) AND \r\n                         (QualityBonus = @Origi" +
                "nal_QualityBonus) AND (Year = @Original_Year) OR\r\n                         (Empl" +
                "oyeeBonusID = @Original_EmployeeBonusID) AND (EmployeeID = @Original_EmployeeID)" +
                " AND (Bonus = @Original_Bonus) AND \r\n                         (QualityBonus = @O" +
                "riginal_QualityBonus) AND (Year = @Original_Year)";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeBonusID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeBonusID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Bonus", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Bonus", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QualityBonus", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QualityBonus", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Bonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Bonus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QualityBonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "QualityBonus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO EmployeeBonus\r\n                         (EmployeeID, Bonus, QualityBo" +
                "nus, Year)\r\nVALUES        (@EmployeeID,@Bonus,@QualityBonus,@Year)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Bonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Bonus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QualityBonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "QualityBonus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE       EmployeeBonus\r\nSET                EmployeeID = @EmployeeID, Bonus = " +
                "@Bonus, QualityBonus = @QualityBonus, Year = @Year\r\nWHERE        (EmployeeBonusI" +
                "D = @Original_EmployeeBonusID) AND (EmployeeID = @Original_EmployeeID) AND (@IsN" +
                "ull_Bonus = 1) AND (Bonus IS NULL) AND \r\n                         (@IsNull_Quali" +
                "tyBonus = 1) AND (QualityBonus IS NULL) AND (@IsNull_Year = 1) AND (Year IS NULL" +
                ") OR\r\n                         (EmployeeBonusID = @Original_EmployeeBonusID) AND" +
                " (EmployeeID = @Original_EmployeeID) AND (Bonus = @Original_Bonus) AND \r\n       " +
                "                  (@IsNull_QualityBonus = 1) AND (QualityBonus IS NULL) AND (@Is" +
                "Null_Year = 1) AND (Year IS NULL) OR\r\n                         (EmployeeBonusID " +
                "= @Original_EmployeeBonusID) AND (EmployeeID = @Original_EmployeeID) AND (@IsNul" +
                "l_Bonus = 1) AND (Bonus IS NULL) AND \r\n                         (QualityBonus = " +
                "@Original_QualityBonus) AND (@IsNull_Year = 1) AND (Year IS NULL) OR\r\n          " +
                "               (EmployeeBonusID = @Original_EmployeeBonusID) AND (EmployeeID = @" +
                "Original_EmployeeID) AND (Bonus = @Original_Bonus) AND \r\n                       " +
                "  (QualityBonus = @Original_QualityBonus) AND (@IsNull_Year = 1) AND (Year IS NU" +
                "LL) OR\r\n                         (EmployeeBonusID = @Original_EmployeeBonusID) A" +
                "ND (EmployeeID = @Original_EmployeeID) AND (@IsNull_Bonus = 1) AND (Bonus IS NUL" +
                "L) AND \r\n                         (@IsNull_QualityBonus = 1) AND (QualityBonus I" +
                "S NULL) AND (Year = @Original_Year) OR\r\n                         (EmployeeBonusI" +
                "D = @Original_EmployeeBonusID) AND (EmployeeID = @Original_EmployeeID) AND (Bonu" +
                "s = @Original_Bonus) AND \r\n                         (@IsNull_QualityBonus = 1) A" +
                "ND (QualityBonus IS NULL) AND (Year = @Original_Year) OR\r\n                      " +
                "   (EmployeeBonusID = @Original_EmployeeBonusID) AND (EmployeeID = @Original_Emp" +
                "loyeeID) AND (@IsNull_Bonus = 1) AND (Bonus IS NULL) AND \r\n                     " +
                "    (QualityBonus = @Original_QualityBonus) AND (Year = @Original_Year) OR\r\n    " +
                "                     (EmployeeBonusID = @Original_EmployeeBonusID) AND (Employee" +
                "ID = @Original_EmployeeID) AND (Bonus = @Original_Bonus) AND \r\n                 " +
                "        (QualityBonus = @Original_QualityBonus) AND (Year = @Original_Year)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Bonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Bonus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QualityBonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "QualityBonus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeBonusID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeBonusID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Bonus", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Bonus", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QualityBonus", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QualityBonus", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Bonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Bonus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QualityBonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "QualityBonus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        Employee.FirstName, Employee.LastName, EmployeeBonus.Bonus, EmployeeBonus.QualityBonus, EmployeeBonus.Year, Employee.Active, 
                         Employee.Contractor, Employee.EmployeeID, EmployeeBonus.EmployeeBonusID
FROM            Employee LEFT OUTER JOIN
                         EmployeeBonus ON Employee.EmployeeID = EmployeeBonus.EmployeeID
ORDER BY Employee.LastName";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM EmployeeBonus\r\nWHERE        (EmployeeBonusID = @EmployeeBonusID)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeBonusID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeBonusID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO EmployeeBonus\r\n                         (EmployeeID, Bonus, QualityBo" +
                "nus, Year)\r\nVALUES        (@EmployeeID,@Bonus,@QualityBonus,@Year)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Bonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Bonus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QualityBonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "QualityBonus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "UPDATE       EmployeeBonus\r\nSET                EmployeeID = @EmployeeID, Bonus = " +
                "@Bonus, QualityBonus = @QualityBonus, Year = @Year\r\nWHERE        (EmployeeBonusI" +
                "D = @EmployeeBonusID) ";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Bonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Bonus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QualityBonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "QualityBonus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeBonusID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeBonusID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.BonusDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.BonusDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.BonusDataTable dataTable = new MMSDataSet.BonusDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.BonusDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Bonus");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteBonus(int EmployeeBonusID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(EmployeeBonusID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertBonus(int EmployeeID, global::System.Nullable<decimal> Bonus, global::System.Nullable<decimal> QualityBonus, global::System.Nullable<int> Year) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((int)(EmployeeID));
            if ((Bonus.HasValue == true)) {
                command.Parameters[1].Value = ((decimal)(Bonus.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((QualityBonus.HasValue == true)) {
                command.Parameters[2].Value = ((decimal)(QualityBonus.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Year.HasValue == true)) {
                command.Parameters[3].Value = ((int)(Year.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateBonus(int EmployeeID, global::System.Nullable<decimal> Bonus, global::System.Nullable<decimal> QualityBonus, global::System.Nullable<int> Year, int EmployeeBonusID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            command.Parameters[0].Value = ((int)(EmployeeID));
            if ((Bonus.HasValue == true)) {
                command.Parameters[1].Value = ((decimal)(Bonus.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((QualityBonus.HasValue == true)) {
                command.Parameters[2].Value = ((decimal)(QualityBonus.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Year.HasValue == true)) {
                command.Parameters[3].Value = ((int)(Year.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            command.Parameters[4].Value = ((int)(EmployeeBonusID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EmployeeBonusTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmployeeBonusTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EmployeeBonus";
            tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID");
            tableMapping.ColumnMappings.Add("Bonus", "Bonus");
            tableMapping.ColumnMappings.Add("QualityBonus", "QualityBonus");
            tableMapping.ColumnMappings.Add("Year", "Year");
            tableMapping.ColumnMappings.Add("EmployeeBonusID", "EmployeeBonusID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM EmployeeBonus\r\nWHERE        (EmployeeBonusID = @EmployeeBonusID)";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeBonusID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeBonusID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO EmployeeBonus
                         (EmployeeID, Bonus, QualityBonus, Year)
VALUES        (@EmployeeID,@Bonus,@QualityBonus,@Year); 
SELECT EmployeeBonusID, EmployeeID, Bonus, QualityBonus, Year FROM EmployeeBonus WHERE (EmployeeBonusID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Bonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Bonus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QualityBonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "QualityBonus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE       EmployeeBonus
SET                EmployeeID = @EmployeeID, Bonus = @Bonus, QualityBonus = @QualityBonus, Year = @Year
WHERE        (EmployeeBonusID = @EmployeeBonusID);  
SELECT EmployeeBonusID, EmployeeID, Bonus, QualityBonus, Year FROM EmployeeBonus WHERE (EmployeeBonusID = @EmployeeBonusID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Bonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Bonus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QualityBonus", global::System.Data.SqlDbType.Money, 8, global::System.Data.ParameterDirection.Input, 0, 0, "QualityBonus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeBonusID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeBonusID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::System.Windows.Forms.MMS.Properties.Settings.Default.MMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        EmployeeBonusID, EmployeeID, Bonus, QualityBonus, Year\r\nFROM       " +
                "     EmployeeBonus";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MMSDataSet.EmployeeBonusDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MMSDataSet.EmployeeBonusDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MMSDataSet.EmployeeBonusDataTable dataTable = new MMSDataSet.EmployeeBonusDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet.EmployeeBonusDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MMSDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EmployeeBonus");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int EmployeeBonusID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(EmployeeBonusID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int EmployeeID, global::System.Nullable<decimal> Bonus, global::System.Nullable<decimal> QualityBonus, global::System.Nullable<int> Year) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(EmployeeID));
            if ((Bonus.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(Bonus.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((QualityBonus.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(QualityBonus.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Year.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Year.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int EmployeeID, global::System.Nullable<decimal> Bonus, global::System.Nullable<decimal> QualityBonus, global::System.Nullable<int> Year, int EmployeeBonusID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(EmployeeID));
            if ((Bonus.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Bonus.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((QualityBonus.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(QualityBonus.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Year.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Year.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(EmployeeBonusID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private CustomerTableAdapter _customerTableAdapter;
        
        private PropertyTableAdapter _propertyTableAdapter;
        
        private EmployeeTableAdapter _employeeTableAdapter;
        
        private CustomerJobTableAdapter _customerJobTableAdapter;
        
        private ServiceTableAdapter _serviceTableAdapter;
        
        private RouteTableAdapter _routeTableAdapter;
        
        private CrewTableAdapter _crewTableAdapter;
        
        private VendorTableAdapter _vendorTableAdapter;
        
        private PropServiceTableAdapter _propServiceTableAdapter;
        
        private CustPropertyJobsTableAdapter _custPropertyJobsTableAdapter;
        
        private RouteListTableAdapter _routeListTableAdapter;
        
        private CustomerTypeListTableAdapter _customerTypeListTableAdapter;
        
        private JobStatusListTableAdapter _jobStatusListTableAdapter;
        
        private CustomerNewsletterTableAdapter _customerNewsletterTableAdapter;
        
        private UserProfileTableAdapter _userProfileTableAdapter;
        
        private BonusTableAdapter _bonusTableAdapter;
        
        private EmployeeBonusTableAdapter _employeeBonusTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CustomerTableAdapter CustomerTableAdapter {
            get {
                return this._customerTableAdapter;
            }
            set {
                this._customerTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PropertyTableAdapter PropertyTableAdapter {
            get {
                return this._propertyTableAdapter;
            }
            set {
                this._propertyTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public EmployeeTableAdapter EmployeeTableAdapter {
            get {
                return this._employeeTableAdapter;
            }
            set {
                this._employeeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CustomerJobTableAdapter CustomerJobTableAdapter {
            get {
                return this._customerJobTableAdapter;
            }
            set {
                this._customerJobTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ServiceTableAdapter ServiceTableAdapter {
            get {
                return this._serviceTableAdapter;
            }
            set {
                this._serviceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public RouteTableAdapter RouteTableAdapter {
            get {
                return this._routeTableAdapter;
            }
            set {
                this._routeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CrewTableAdapter CrewTableAdapter {
            get {
                return this._crewTableAdapter;
            }
            set {
                this._crewTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public VendorTableAdapter VendorTableAdapter {
            get {
                return this._vendorTableAdapter;
            }
            set {
                this._vendorTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PropServiceTableAdapter PropServiceTableAdapter {
            get {
                return this._propServiceTableAdapter;
            }
            set {
                this._propServiceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CustPropertyJobsTableAdapter CustPropertyJobsTableAdapter {
            get {
                return this._custPropertyJobsTableAdapter;
            }
            set {
                this._custPropertyJobsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public RouteListTableAdapter RouteListTableAdapter {
            get {
                return this._routeListTableAdapter;
            }
            set {
                this._routeListTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CustomerTypeListTableAdapter CustomerTypeListTableAdapter {
            get {
                return this._customerTypeListTableAdapter;
            }
            set {
                this._customerTypeListTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public JobStatusListTableAdapter JobStatusListTableAdapter {
            get {
                return this._jobStatusListTableAdapter;
            }
            set {
                this._jobStatusListTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CustomerNewsletterTableAdapter CustomerNewsletterTableAdapter {
            get {
                return this._customerNewsletterTableAdapter;
            }
            set {
                this._customerNewsletterTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public UserProfileTableAdapter UserProfileTableAdapter {
            get {
                return this._userProfileTableAdapter;
            }
            set {
                this._userProfileTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public BonusTableAdapter BonusTableAdapter {
            get {
                return this._bonusTableAdapter;
            }
            set {
                this._bonusTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public EmployeeBonusTableAdapter EmployeeBonusTableAdapter {
            get {
                return this._employeeBonusTableAdapter;
            }
            set {
                this._employeeBonusTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._customerTableAdapter != null) 
                            && (this._customerTableAdapter.Connection != null))) {
                    return this._customerTableAdapter.Connection;
                }
                if (((this._propertyTableAdapter != null) 
                            && (this._propertyTableAdapter.Connection != null))) {
                    return this._propertyTableAdapter.Connection;
                }
                if (((this._employeeTableAdapter != null) 
                            && (this._employeeTableAdapter.Connection != null))) {
                    return this._employeeTableAdapter.Connection;
                }
                if (((this._customerJobTableAdapter != null) 
                            && (this._customerJobTableAdapter.Connection != null))) {
                    return this._customerJobTableAdapter.Connection;
                }
                if (((this._serviceTableAdapter != null) 
                            && (this._serviceTableAdapter.Connection != null))) {
                    return this._serviceTableAdapter.Connection;
                }
                if (((this._routeTableAdapter != null) 
                            && (this._routeTableAdapter.Connection != null))) {
                    return this._routeTableAdapter.Connection;
                }
                if (((this._crewTableAdapter != null) 
                            && (this._crewTableAdapter.Connection != null))) {
                    return this._crewTableAdapter.Connection;
                }
                if (((this._vendorTableAdapter != null) 
                            && (this._vendorTableAdapter.Connection != null))) {
                    return this._vendorTableAdapter.Connection;
                }
                if (((this._propServiceTableAdapter != null) 
                            && (this._propServiceTableAdapter.Connection != null))) {
                    return this._propServiceTableAdapter.Connection;
                }
                if (((this._custPropertyJobsTableAdapter != null) 
                            && (this._custPropertyJobsTableAdapter.Connection != null))) {
                    return this._custPropertyJobsTableAdapter.Connection;
                }
                if (((this._routeListTableAdapter != null) 
                            && (this._routeListTableAdapter.Connection != null))) {
                    return this._routeListTableAdapter.Connection;
                }
                if (((this._customerTypeListTableAdapter != null) 
                            && (this._customerTypeListTableAdapter.Connection != null))) {
                    return this._customerTypeListTableAdapter.Connection;
                }
                if (((this._jobStatusListTableAdapter != null) 
                            && (this._jobStatusListTableAdapter.Connection != null))) {
                    return this._jobStatusListTableAdapter.Connection;
                }
                if (((this._customerNewsletterTableAdapter != null) 
                            && (this._customerNewsletterTableAdapter.Connection != null))) {
                    return this._customerNewsletterTableAdapter.Connection;
                }
                if (((this._userProfileTableAdapter != null) 
                            && (this._userProfileTableAdapter.Connection != null))) {
                    return this._userProfileTableAdapter.Connection;
                }
                if (((this._bonusTableAdapter != null) 
                            && (this._bonusTableAdapter.Connection != null))) {
                    return this._bonusTableAdapter.Connection;
                }
                if (((this._employeeBonusTableAdapter != null) 
                            && (this._employeeBonusTableAdapter.Connection != null))) {
                    return this._employeeBonusTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._customerTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._propertyTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._employeeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._customerJobTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._serviceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._routeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._crewTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._vendorTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._propServiceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._custPropertyJobsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._routeListTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._customerTypeListTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._jobStatusListTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._customerNewsletterTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._userProfileTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._bonusTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._employeeBonusTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(MMSDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._customerNewsletterTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CustomerNewletter.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._customerNewsletterTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._customerTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Customer.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._customerTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._propertyTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Property.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._propertyTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._serviceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Service.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._serviceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._employeeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Employee.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._employeeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._bonusTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Bonus.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._bonusTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._customerTypeListTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CustomerTypeList.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._customerTypeListTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._jobStatusListTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.JobStatusList.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._jobStatusListTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._employeeBonusTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.EmployeeBonus.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._employeeBonusTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._userProfileTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.UserProfile.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._userProfileTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._crewTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Crew.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._crewTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._customerJobTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CustomerJob.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._customerJobTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._routeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Route.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._routeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._vendorTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Vendor.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._vendorTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._routeListTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.RouteList.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._routeListTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._propServiceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PropService.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._propServiceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._custPropertyJobsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CustPropertyJobs.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._custPropertyJobsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(MMSDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._customerNewsletterTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CustomerNewletter.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._customerNewsletterTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._customerTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Customer.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._customerTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._propertyTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Property.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._propertyTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._serviceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Service.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._serviceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._employeeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Employee.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._employeeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._bonusTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Bonus.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._bonusTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._customerTypeListTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CustomerTypeList.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._customerTypeListTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._jobStatusListTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.JobStatusList.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._jobStatusListTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._employeeBonusTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.EmployeeBonus.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._employeeBonusTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._userProfileTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.UserProfile.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._userProfileTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._crewTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Crew.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._crewTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._customerJobTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CustomerJob.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._customerJobTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._routeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Route.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._routeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._vendorTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Vendor.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._vendorTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._routeListTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.RouteList.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._routeListTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._propServiceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PropService.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._propServiceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._custPropertyJobsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CustPropertyJobs.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._custPropertyJobsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(MMSDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._custPropertyJobsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CustPropertyJobs.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._custPropertyJobsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._propServiceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PropService.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._propServiceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._routeListTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.RouteList.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._routeListTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._vendorTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Vendor.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._vendorTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._routeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Route.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._routeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._customerJobTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CustomerJob.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._customerJobTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._crewTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Crew.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._crewTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._userProfileTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.UserProfile.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._userProfileTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._employeeBonusTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.EmployeeBonus.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._employeeBonusTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._jobStatusListTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.JobStatusList.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._jobStatusListTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._customerTypeListTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CustomerTypeList.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._customerTypeListTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._bonusTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Bonus.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._bonusTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._employeeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Employee.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._employeeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._serviceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Service.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._serviceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._propertyTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Property.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._propertyTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._customerTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Customer.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._customerTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._customerNewsletterTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CustomerNewletter.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._customerNewsletterTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(MMSDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._customerTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._customerTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._propertyTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._propertyTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._employeeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._employeeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._customerJobTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._customerJobTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._serviceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._serviceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._routeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._routeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._crewTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._crewTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._vendorTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._vendorTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._propServiceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._propServiceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._custPropertyJobsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._custPropertyJobsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._routeListTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._routeListTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._customerTypeListTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._customerTypeListTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._jobStatusListTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._jobStatusListTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._customerNewsletterTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._customerNewsletterTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._userProfileTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._userProfileTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._bonusTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._bonusTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._employeeBonusTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._employeeBonusTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._customerTableAdapter != null)) {
                    revertConnections.Add(this._customerTableAdapter, this._customerTableAdapter.Connection);
                    this._customerTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._customerTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._customerTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._customerTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._customerTableAdapter.Adapter);
                    }
                }
                if ((this._propertyTableAdapter != null)) {
                    revertConnections.Add(this._propertyTableAdapter, this._propertyTableAdapter.Connection);
                    this._propertyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._propertyTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._propertyTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._propertyTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._propertyTableAdapter.Adapter);
                    }
                }
                if ((this._employeeTableAdapter != null)) {
                    revertConnections.Add(this._employeeTableAdapter, this._employeeTableAdapter.Connection);
                    this._employeeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._employeeTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._employeeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._employeeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._employeeTableAdapter.Adapter);
                    }
                }
                if ((this._customerJobTableAdapter != null)) {
                    revertConnections.Add(this._customerJobTableAdapter, this._customerJobTableAdapter.Connection);
                    this._customerJobTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._customerJobTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._customerJobTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._customerJobTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._customerJobTableAdapter.Adapter);
                    }
                }
                if ((this._serviceTableAdapter != null)) {
                    revertConnections.Add(this._serviceTableAdapter, this._serviceTableAdapter.Connection);
                    this._serviceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._serviceTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._serviceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._serviceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._serviceTableAdapter.Adapter);
                    }
                }
                if ((this._routeTableAdapter != null)) {
                    revertConnections.Add(this._routeTableAdapter, this._routeTableAdapter.Connection);
                    this._routeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._routeTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._routeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._routeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._routeTableAdapter.Adapter);
                    }
                }
                if ((this._crewTableAdapter != null)) {
                    revertConnections.Add(this._crewTableAdapter, this._crewTableAdapter.Connection);
                    this._crewTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._crewTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._crewTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._crewTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._crewTableAdapter.Adapter);
                    }
                }
                if ((this._vendorTableAdapter != null)) {
                    revertConnections.Add(this._vendorTableAdapter, this._vendorTableAdapter.Connection);
                    this._vendorTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._vendorTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._vendorTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._vendorTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._vendorTableAdapter.Adapter);
                    }
                }
                if ((this._propServiceTableAdapter != null)) {
                    revertConnections.Add(this._propServiceTableAdapter, this._propServiceTableAdapter.Connection);
                    this._propServiceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._propServiceTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._propServiceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._propServiceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._propServiceTableAdapter.Adapter);
                    }
                }
                if ((this._custPropertyJobsTableAdapter != null)) {
                    revertConnections.Add(this._custPropertyJobsTableAdapter, this._custPropertyJobsTableAdapter.Connection);
                    this._custPropertyJobsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._custPropertyJobsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._custPropertyJobsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._custPropertyJobsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._custPropertyJobsTableAdapter.Adapter);
                    }
                }
                if ((this._routeListTableAdapter != null)) {
                    revertConnections.Add(this._routeListTableAdapter, this._routeListTableAdapter.Connection);
                    this._routeListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._routeListTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._routeListTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._routeListTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._routeListTableAdapter.Adapter);
                    }
                }
                if ((this._customerTypeListTableAdapter != null)) {
                    revertConnections.Add(this._customerTypeListTableAdapter, this._customerTypeListTableAdapter.Connection);
                    this._customerTypeListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._customerTypeListTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._customerTypeListTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._customerTypeListTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._customerTypeListTableAdapter.Adapter);
                    }
                }
                if ((this._jobStatusListTableAdapter != null)) {
                    revertConnections.Add(this._jobStatusListTableAdapter, this._jobStatusListTableAdapter.Connection);
                    this._jobStatusListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._jobStatusListTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._jobStatusListTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._jobStatusListTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._jobStatusListTableAdapter.Adapter);
                    }
                }
                if ((this._customerNewsletterTableAdapter != null)) {
                    revertConnections.Add(this._customerNewsletterTableAdapter, this._customerNewsletterTableAdapter.Connection);
                    this._customerNewsletterTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._customerNewsletterTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._customerNewsletterTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._customerNewsletterTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._customerNewsletterTableAdapter.Adapter);
                    }
                }
                if ((this._userProfileTableAdapter != null)) {
                    revertConnections.Add(this._userProfileTableAdapter, this._userProfileTableAdapter.Connection);
                    this._userProfileTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._userProfileTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._userProfileTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._userProfileTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._userProfileTableAdapter.Adapter);
                    }
                }
                if ((this._bonusTableAdapter != null)) {
                    revertConnections.Add(this._bonusTableAdapter, this._bonusTableAdapter.Connection);
                    this._bonusTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._bonusTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._bonusTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._bonusTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._bonusTableAdapter.Adapter);
                    }
                }
                if ((this._employeeBonusTableAdapter != null)) {
                    revertConnections.Add(this._employeeBonusTableAdapter, this._employeeBonusTableAdapter.Connection);
                    this._employeeBonusTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._employeeBonusTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._employeeBonusTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._employeeBonusTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._employeeBonusTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._customerTableAdapter != null)) {
                    this._customerTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._customerTableAdapter]));
                    this._customerTableAdapter.Transaction = null;
                }
                if ((this._propertyTableAdapter != null)) {
                    this._propertyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._propertyTableAdapter]));
                    this._propertyTableAdapter.Transaction = null;
                }
                if ((this._employeeTableAdapter != null)) {
                    this._employeeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._employeeTableAdapter]));
                    this._employeeTableAdapter.Transaction = null;
                }
                if ((this._customerJobTableAdapter != null)) {
                    this._customerJobTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._customerJobTableAdapter]));
                    this._customerJobTableAdapter.Transaction = null;
                }
                if ((this._serviceTableAdapter != null)) {
                    this._serviceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._serviceTableAdapter]));
                    this._serviceTableAdapter.Transaction = null;
                }
                if ((this._routeTableAdapter != null)) {
                    this._routeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._routeTableAdapter]));
                    this._routeTableAdapter.Transaction = null;
                }
                if ((this._crewTableAdapter != null)) {
                    this._crewTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._crewTableAdapter]));
                    this._crewTableAdapter.Transaction = null;
                }
                if ((this._vendorTableAdapter != null)) {
                    this._vendorTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._vendorTableAdapter]));
                    this._vendorTableAdapter.Transaction = null;
                }
                if ((this._propServiceTableAdapter != null)) {
                    this._propServiceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._propServiceTableAdapter]));
                    this._propServiceTableAdapter.Transaction = null;
                }
                if ((this._custPropertyJobsTableAdapter != null)) {
                    this._custPropertyJobsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._custPropertyJobsTableAdapter]));
                    this._custPropertyJobsTableAdapter.Transaction = null;
                }
                if ((this._routeListTableAdapter != null)) {
                    this._routeListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._routeListTableAdapter]));
                    this._routeListTableAdapter.Transaction = null;
                }
                if ((this._customerTypeListTableAdapter != null)) {
                    this._customerTypeListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._customerTypeListTableAdapter]));
                    this._customerTypeListTableAdapter.Transaction = null;
                }
                if ((this._jobStatusListTableAdapter != null)) {
                    this._jobStatusListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._jobStatusListTableAdapter]));
                    this._jobStatusListTableAdapter.Transaction = null;
                }
                if ((this._customerNewsletterTableAdapter != null)) {
                    this._customerNewsletterTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._customerNewsletterTableAdapter]));
                    this._customerNewsletterTableAdapter.Transaction = null;
                }
                if ((this._userProfileTableAdapter != null)) {
                    this._userProfileTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._userProfileTableAdapter]));
                    this._userProfileTableAdapter.Transaction = null;
                }
                if ((this._bonusTableAdapter != null)) {
                    this._bonusTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._bonusTableAdapter]));
                    this._bonusTableAdapter.Transaction = null;
                }
                if ((this._employeeBonusTableAdapter != null)) {
                    this._employeeBonusTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._employeeBonusTableAdapter]));
                    this._employeeBonusTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591